
ADHOC07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08008c28  08008c28  00018c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008f08  08008f08  00018f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008f10  08008f10  00018f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008f14  08008f14  00018f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000003a8  20000000  08008f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000203a8  2**0
                  CONTENTS
  8 .bss          00006610  200003a8  200003a8  000203a8  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  200069b8  200069b8  000203a8  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000203a8  2**0
                  CONTENTS, READONLY
 11 .debug_info   00037574  00000000  00000000  000203d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00007292  00000000  00000000  0005794c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000135ea  00000000  00000000  0005ebde  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001460  00000000  00000000  000721c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000021d0  00000000  00000000  00073628  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000da71  00000000  00000000  000757f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00008cdd  00000000  00000000  00083269  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0008bf46  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003c24  00000000  00000000  0008bfc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003a8 	.word	0x200003a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c10 	.word	0x08008c10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003ac 	.word	0x200003ac
 80001cc:	08008c10 	.word	0x08008c10

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b97a 	b.w	8000500 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	468c      	mov	ip, r1
 800022a:	460d      	mov	r5, r1
 800022c:	4604      	mov	r4, r0
 800022e:	9e08      	ldr	r6, [sp, #32]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d151      	bne.n	80002d8 <__udivmoddi4+0xb4>
 8000234:	428a      	cmp	r2, r1
 8000236:	4617      	mov	r7, r2
 8000238:	d96d      	bls.n	8000316 <__udivmoddi4+0xf2>
 800023a:	fab2 fe82 	clz	lr, r2
 800023e:	f1be 0f00 	cmp.w	lr, #0
 8000242:	d00b      	beq.n	800025c <__udivmoddi4+0x38>
 8000244:	f1ce 0c20 	rsb	ip, lr, #32
 8000248:	fa01 f50e 	lsl.w	r5, r1, lr
 800024c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000250:	fa02 f70e 	lsl.w	r7, r2, lr
 8000254:	ea4c 0c05 	orr.w	ip, ip, r5
 8000258:	fa00 f40e 	lsl.w	r4, r0, lr
 800025c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000260:	0c25      	lsrs	r5, r4, #16
 8000262:	fbbc f8fa 	udiv	r8, ip, sl
 8000266:	fa1f f987 	uxth.w	r9, r7
 800026a:	fb0a cc18 	mls	ip, sl, r8, ip
 800026e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000272:	fb08 f309 	mul.w	r3, r8, r9
 8000276:	42ab      	cmp	r3, r5
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x6c>
 800027a:	19ed      	adds	r5, r5, r7
 800027c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000280:	f080 8123 	bcs.w	80004ca <__udivmoddi4+0x2a6>
 8000284:	42ab      	cmp	r3, r5
 8000286:	f240 8120 	bls.w	80004ca <__udivmoddi4+0x2a6>
 800028a:	f1a8 0802 	sub.w	r8, r8, #2
 800028e:	443d      	add	r5, r7
 8000290:	1aed      	subs	r5, r5, r3
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb5 f0fa 	udiv	r0, r5, sl
 8000298:	fb0a 5510 	mls	r5, sl, r0, r5
 800029c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a0:	fb00 f909 	mul.w	r9, r0, r9
 80002a4:	45a1      	cmp	r9, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x98>
 80002a8:	19e4      	adds	r4, r4, r7
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 810a 	bcs.w	80004c6 <__udivmoddi4+0x2a2>
 80002b2:	45a1      	cmp	r9, r4
 80002b4:	f240 8107 	bls.w	80004c6 <__udivmoddi4+0x2a2>
 80002b8:	3802      	subs	r0, #2
 80002ba:	443c      	add	r4, r7
 80002bc:	eba4 0409 	sub.w	r4, r4, r9
 80002c0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c4:	2100      	movs	r1, #0
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d061      	beq.n	800038e <__udivmoddi4+0x16a>
 80002ca:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ce:	2300      	movs	r3, #0
 80002d0:	6034      	str	r4, [r6, #0]
 80002d2:	6073      	str	r3, [r6, #4]
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xc8>
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d054      	beq.n	800038a <__udivmoddi4+0x166>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	f040 808e 	bne.w	8000412 <__udivmoddi4+0x1ee>
 80002f6:	42ab      	cmp	r3, r5
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xdc>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2d0>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb65 0503 	sbc.w	r5, r5, r3
 8000306:	2001      	movs	r0, #1
 8000308:	46ac      	mov	ip, r5
 800030a:	2e00      	cmp	r6, #0
 800030c:	d03f      	beq.n	800038e <__udivmoddi4+0x16a>
 800030e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	b912      	cbnz	r2, 800031e <__udivmoddi4+0xfa>
 8000318:	2701      	movs	r7, #1
 800031a:	fbb7 f7f2 	udiv	r7, r7, r2
 800031e:	fab7 fe87 	clz	lr, r7
 8000322:	f1be 0f00 	cmp.w	lr, #0
 8000326:	d134      	bne.n	8000392 <__udivmoddi4+0x16e>
 8000328:	1beb      	subs	r3, r5, r7
 800032a:	0c3a      	lsrs	r2, r7, #16
 800032c:	fa1f fc87 	uxth.w	ip, r7
 8000330:	2101      	movs	r1, #1
 8000332:	fbb3 f8f2 	udiv	r8, r3, r2
 8000336:	0c25      	lsrs	r5, r4, #16
 8000338:	fb02 3318 	mls	r3, r2, r8, r3
 800033c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000340:	fb0c f308 	mul.w	r3, ip, r8
 8000344:	42ab      	cmp	r3, r5
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x134>
 8000348:	19ed      	adds	r5, r5, r7
 800034a:	f108 30ff 	add.w	r0, r8, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x132>
 8000350:	42ab      	cmp	r3, r5
 8000352:	f200 80d1 	bhi.w	80004f8 <__udivmoddi4+0x2d4>
 8000356:	4680      	mov	r8, r0
 8000358:	1aed      	subs	r5, r5, r3
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000360:	fb02 5510 	mls	r5, r2, r0, r5
 8000364:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000368:	fb0c fc00 	mul.w	ip, ip, r0
 800036c:	45a4      	cmp	ip, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x15c>
 8000370:	19e4      	adds	r4, r4, r7
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x15a>
 8000378:	45a4      	cmp	ip, r4
 800037a:	f200 80b8 	bhi.w	80004ee <__udivmoddi4+0x2ca>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000388:	e79d      	b.n	80002c6 <__udivmoddi4+0xa2>
 800038a:	4631      	mov	r1, r6
 800038c:	4630      	mov	r0, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	f1ce 0420 	rsb	r4, lr, #32
 8000396:	fa05 f30e 	lsl.w	r3, r5, lr
 800039a:	fa07 f70e 	lsl.w	r7, r7, lr
 800039e:	fa20 f804 	lsr.w	r8, r0, r4
 80003a2:	0c3a      	lsrs	r2, r7, #16
 80003a4:	fa25 f404 	lsr.w	r4, r5, r4
 80003a8:	ea48 0803 	orr.w	r8, r8, r3
 80003ac:	fbb4 f1f2 	udiv	r1, r4, r2
 80003b0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b4:	fb02 4411 	mls	r4, r2, r1, r4
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003c0:	fb01 f30c 	mul.w	r3, r1, ip
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1bc>
 80003cc:	19ed      	adds	r5, r5, r7
 80003ce:	f101 30ff 	add.w	r0, r1, #4294967295
 80003d2:	f080 808a 	bcs.w	80004ea <__udivmoddi4+0x2c6>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	f240 8087 	bls.w	80004ea <__udivmoddi4+0x2c6>
 80003dc:	3902      	subs	r1, #2
 80003de:	443d      	add	r5, r7
 80003e0:	1aeb      	subs	r3, r5, r3
 80003e2:	fa1f f588 	uxth.w	r5, r8
 80003e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ea:	fb02 3310 	mls	r3, r2, r0, r3
 80003ee:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003f2:	fb00 f30c 	mul.w	r3, r0, ip
 80003f6:	42ab      	cmp	r3, r5
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1e6>
 80003fa:	19ed      	adds	r5, r5, r7
 80003fc:	f100 38ff 	add.w	r8, r0, #4294967295
 8000400:	d26f      	bcs.n	80004e2 <__udivmoddi4+0x2be>
 8000402:	42ab      	cmp	r3, r5
 8000404:	d96d      	bls.n	80004e2 <__udivmoddi4+0x2be>
 8000406:	3802      	subs	r0, #2
 8000408:	443d      	add	r5, r7
 800040a:	1aeb      	subs	r3, r5, r3
 800040c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000410:	e78f      	b.n	8000332 <__udivmoddi4+0x10e>
 8000412:	f1c1 0720 	rsb	r7, r1, #32
 8000416:	fa22 f807 	lsr.w	r8, r2, r7
 800041a:	408b      	lsls	r3, r1
 800041c:	fa05 f401 	lsl.w	r4, r5, r1
 8000420:	ea48 0303 	orr.w	r3, r8, r3
 8000424:	fa20 fe07 	lsr.w	lr, r0, r7
 8000428:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800042c:	40fd      	lsrs	r5, r7
 800042e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000432:	fbb5 f9fc 	udiv	r9, r5, ip
 8000436:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800043a:	fb0c 5519 	mls	r5, ip, r9, r5
 800043e:	fa1f f883 	uxth.w	r8, r3
 8000442:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000446:	fb09 f408 	mul.w	r4, r9, r8
 800044a:	42ac      	cmp	r4, r5
 800044c:	fa02 f201 	lsl.w	r2, r2, r1
 8000450:	fa00 fa01 	lsl.w	sl, r0, r1
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x244>
 8000456:	18ed      	adds	r5, r5, r3
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d243      	bcs.n	80004e6 <__udivmoddi4+0x2c2>
 800045e:	42ac      	cmp	r4, r5
 8000460:	d941      	bls.n	80004e6 <__udivmoddi4+0x2c2>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	441d      	add	r5, r3
 8000468:	1b2d      	subs	r5, r5, r4
 800046a:	fa1f fe8e 	uxth.w	lr, lr
 800046e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000472:	fb0c 5510 	mls	r5, ip, r0, r5
 8000476:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45a0      	cmp	r8, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x26e>
 8000482:	18e4      	adds	r4, r4, r3
 8000484:	f100 35ff 	add.w	r5, r0, #4294967295
 8000488:	d229      	bcs.n	80004de <__udivmoddi4+0x2ba>
 800048a:	45a0      	cmp	r8, r4
 800048c:	d927      	bls.n	80004de <__udivmoddi4+0x2ba>
 800048e:	3802      	subs	r0, #2
 8000490:	441c      	add	r4, r3
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba4 0408 	sub.w	r4, r4, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454c      	cmp	r4, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	464d      	mov	r5, r9
 80004a4:	d315      	bcc.n	80004d2 <__udivmoddi4+0x2ae>
 80004a6:	d012      	beq.n	80004ce <__udivmoddi4+0x2aa>
 80004a8:	b156      	cbz	r6, 80004c0 <__udivmoddi4+0x29c>
 80004aa:	ebba 030e 	subs.w	r3, sl, lr
 80004ae:	eb64 0405 	sbc.w	r4, r4, r5
 80004b2:	fa04 f707 	lsl.w	r7, r4, r7
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431f      	orrs	r7, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	6037      	str	r7, [r6, #0]
 80004be:	6074      	str	r4, [r6, #4]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	4618      	mov	r0, r3
 80004c8:	e6f8      	b.n	80002bc <__udivmoddi4+0x98>
 80004ca:	4690      	mov	r8, r2
 80004cc:	e6e0      	b.n	8000290 <__udivmoddi4+0x6c>
 80004ce:	45c2      	cmp	sl, r8
 80004d0:	d2ea      	bcs.n	80004a8 <__udivmoddi4+0x284>
 80004d2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d6:	eb69 0503 	sbc.w	r5, r9, r3
 80004da:	3801      	subs	r0, #1
 80004dc:	e7e4      	b.n	80004a8 <__udivmoddi4+0x284>
 80004de:	4628      	mov	r0, r5
 80004e0:	e7d7      	b.n	8000492 <__udivmoddi4+0x26e>
 80004e2:	4640      	mov	r0, r8
 80004e4:	e791      	b.n	800040a <__udivmoddi4+0x1e6>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e7be      	b.n	8000468 <__udivmoddi4+0x244>
 80004ea:	4601      	mov	r1, r0
 80004ec:	e778      	b.n	80003e0 <__udivmoddi4+0x1bc>
 80004ee:	3802      	subs	r0, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	e745      	b.n	8000380 <__udivmoddi4+0x15c>
 80004f4:	4608      	mov	r0, r1
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xe6>
 80004f8:	f1a8 0802 	sub.w	r8, r8, #2
 80004fc:	443d      	add	r5, r7
 80004fe:	e72b      	b.n	8000358 <__udivmoddi4+0x134>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000504:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000506:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <HAL_InitTick+0x3c>)
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_InitTick+0x40>)
{
 800050a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800050c:	7818      	ldrb	r0, [r3, #0]
 800050e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000512:	fbb3 f3f0 	udiv	r3, r3, r0
 8000516:	6810      	ldr	r0, [r2, #0]
 8000518:	fbb0 f0f3 	udiv	r0, r0, r3
 800051c:	f000 f8a8 	bl	8000670 <HAL_SYSTICK_Config>
 8000520:	4604      	mov	r4, r0
 8000522:	b958      	cbnz	r0, 800053c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000524:	2d0f      	cmp	r5, #15
 8000526:	d809      	bhi.n	800053c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000528:	4602      	mov	r2, r0
 800052a:	4629      	mov	r1, r5
 800052c:	f04f 30ff 	mov.w	r0, #4294967295
 8000530:	f000 f85e 	bl	80005f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <HAL_InitTick+0x44>)
 8000536:	4620      	mov	r0, r4
 8000538:	601d      	str	r5, [r3, #0]
 800053a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800053c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800053e:	bd38      	pop	{r3, r4, r5, pc}
 8000540:	200001d4 	.word	0x200001d4
 8000544:	20000000 	.word	0x20000000
 8000548:	20000004 	.word	0x20000004

0800054c <HAL_Init>:
{
 800054c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <HAL_Init+0x30>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000556:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800055e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000566:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000568:	2003      	movs	r0, #3
 800056a:	f000 f82f 	bl	80005cc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800056e:	200f      	movs	r0, #15
 8000570:	f7ff ffc8 	bl	8000504 <HAL_InitTick>
  HAL_MspInit();
 8000574:	f008 f8dc 	bl	8008730 <HAL_MspInit>
}
 8000578:	2000      	movs	r0, #0
 800057a:	bd08      	pop	{r3, pc}
 800057c:	40023c00 	.word	0x40023c00

08000580 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000580:	4a03      	ldr	r2, [pc, #12]	; (8000590 <HAL_IncTick+0x10>)
 8000582:	4b04      	ldr	r3, [pc, #16]	; (8000594 <HAL_IncTick+0x14>)
 8000584:	6811      	ldr	r1, [r2, #0]
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	440b      	add	r3, r1
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20005774 	.word	0x20005774
 8000594:	20000000 	.word	0x20000000

08000598 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000598:	4b01      	ldr	r3, [pc, #4]	; (80005a0 <HAL_GetTick+0x8>)
 800059a:	6818      	ldr	r0, [r3, #0]
}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20005774 	.word	0x20005774

080005a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005a4:	b538      	push	{r3, r4, r5, lr}
 80005a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005a8:	f7ff fff6 	bl	8000598 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ac:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005ae:	bf1c      	itt	ne
 80005b0:	4b05      	ldrne	r3, [pc, #20]	; (80005c8 <HAL_Delay+0x24>)
 80005b2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005b6:	bf18      	it	ne
 80005b8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ba:	f7ff ffed 	bl	8000598 <HAL_GetTick>
 80005be:	1b40      	subs	r0, r0, r5
 80005c0:	4284      	cmp	r4, r0
 80005c2:	d8fa      	bhi.n	80005ba <HAL_Delay+0x16>
  {
  }
}
 80005c4:	bd38      	pop	{r3, r4, r5, pc}
 80005c6:	bf00      	nop
 80005c8:	20000000 	.word	0x20000000

080005cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005cc:	4a07      	ldr	r2, [pc, #28]	; (80005ec <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005ce:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005d4:	041b      	lsls	r3, r3, #16
 80005d6:	0c1b      	lsrs	r3, r3, #16
 80005d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005dc:	0200      	lsls	r0, r0, #8
 80005de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005e6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005e8:	60d3      	str	r3, [r2, #12]
 80005ea:	4770      	bx	lr
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005f2:	b530      	push	{r4, r5, lr}
 80005f4:	68dc      	ldr	r4, [r3, #12]
 80005f6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005fa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000600:	2b04      	cmp	r3, #4
 8000602:	bf28      	it	cs
 8000604:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000606:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000608:	f04f 0501 	mov.w	r5, #1
 800060c:	fa05 f303 	lsl.w	r3, r5, r3
 8000610:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000614:	bf8c      	ite	hi
 8000616:	3c03      	subhi	r4, #3
 8000618:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800061a:	4019      	ands	r1, r3
 800061c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800061e:	fa05 f404 	lsl.w	r4, r5, r4
 8000622:	3c01      	subs	r4, #1
 8000624:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000626:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000628:	ea42 0201 	orr.w	r2, r2, r1
 800062c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000630:	bfaf      	iteee	ge
 8000632:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	f000 000f 	andlt.w	r0, r0, #15
 800063a:	4b06      	ldrlt	r3, [pc, #24]	; (8000654 <HAL_NVIC_SetPriority+0x64>)
 800063c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063e:	bfa5      	ittet	ge
 8000640:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000644:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000646:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000648:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800064c:	bd30      	pop	{r4, r5, pc}
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00
 8000654:	e000ed14 	.word	0xe000ed14

08000658 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000658:	0942      	lsrs	r2, r0, #5
 800065a:	2301      	movs	r3, #1
 800065c:	f000 001f 	and.w	r0, r0, #31
 8000660:	fa03 f000 	lsl.w	r0, r3, r0
 8000664:	4b01      	ldr	r3, [pc, #4]	; (800066c <HAL_NVIC_EnableIRQ+0x14>)
 8000666:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800066a:	4770      	bx	lr
 800066c:	e000e100 	.word	0xe000e100

08000670 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000670:	3801      	subs	r0, #1
 8000672:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000676:	d20a      	bcs.n	800068e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	4a07      	ldr	r2, [pc, #28]	; (8000698 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800067c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	21f0      	movs	r1, #240	; 0xf0
 8000680:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000684:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000686:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000688:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800068e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	e000e010 	.word	0xe000e010
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800069e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006a0:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006a2:	bf0c      	ite	eq
 80006a4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006a8:	f022 0204 	bicne.w	r2, r2, #4
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	4770      	bx	lr
 80006b0:	e000e010 	.word	0xe000e010

080006b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006b8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ba:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800086c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006c0:	4a68      	ldr	r2, [pc, #416]	; (8000864 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006c2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000870 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006c6:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006c8:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006ca:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ce:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80006d0:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d4:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006d8:	45b6      	cmp	lr, r6
 80006da:	f040 80ae 	bne.w	800083a <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006de:	684c      	ldr	r4, [r1, #4]
 80006e0:	f024 0710 	bic.w	r7, r4, #16
 80006e4:	2f02      	cmp	r7, #2
 80006e6:	d116      	bne.n	8000716 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80006e8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006ec:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006f0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006f4:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006f8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006fc:	f04f 0c0f 	mov.w	ip, #15
 8000700:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000704:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000708:	690d      	ldr	r5, [r1, #16]
 800070a:	fa05 f50b 	lsl.w	r5, r5, fp
 800070e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000712:	f8ca 5020 	str.w	r5, [sl, #32]
 8000716:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800071a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800071c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000720:	fa05 f50a 	lsl.w	r5, r5, sl
 8000724:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000726:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800072a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800072e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000732:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000734:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000738:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800073a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800073e:	d811      	bhi.n	8000764 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000740:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000742:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000746:	68cf      	ldr	r7, [r1, #12]
 8000748:	fa07 fc0a 	lsl.w	ip, r7, sl
 800074c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000750:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000752:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000754:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000758:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800075c:	409f      	lsls	r7, r3
 800075e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000762:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000764:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000766:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000768:	688f      	ldr	r7, [r1, #8]
 800076a:	fa07 f70a 	lsl.w	r7, r7, sl
 800076e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000770:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000772:	00e5      	lsls	r5, r4, #3
 8000774:	d561      	bpl.n	800083a <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	f04f 0b00 	mov.w	fp, #0
 800077a:	f8cd b00c 	str.w	fp, [sp, #12]
 800077e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000782:	4d39      	ldr	r5, [pc, #228]	; (8000868 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000784:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000788:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800078c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000790:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000794:	9703      	str	r7, [sp, #12]
 8000796:	9f03      	ldr	r7, [sp, #12]
 8000798:	f023 0703 	bic.w	r7, r3, #3
 800079c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007a0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007a4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007a8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007ac:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007b0:	f04f 0e0f 	mov.w	lr, #15
 80007b4:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007b8:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007ba:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007be:	d043      	beq.n	8000848 <HAL_GPIO_Init+0x194>
 80007c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c4:	42a8      	cmp	r0, r5
 80007c6:	d041      	beq.n	800084c <HAL_GPIO_Init+0x198>
 80007c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007cc:	42a8      	cmp	r0, r5
 80007ce:	d03f      	beq.n	8000850 <HAL_GPIO_Init+0x19c>
 80007d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007d4:	42a8      	cmp	r0, r5
 80007d6:	d03d      	beq.n	8000854 <HAL_GPIO_Init+0x1a0>
 80007d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007dc:	42a8      	cmp	r0, r5
 80007de:	d03b      	beq.n	8000858 <HAL_GPIO_Init+0x1a4>
 80007e0:	4548      	cmp	r0, r9
 80007e2:	d03b      	beq.n	800085c <HAL_GPIO_Init+0x1a8>
 80007e4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007e8:	42a8      	cmp	r0, r5
 80007ea:	d039      	beq.n	8000860 <HAL_GPIO_Init+0x1ac>
 80007ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007f0:	42a8      	cmp	r0, r5
 80007f2:	bf14      	ite	ne
 80007f4:	2508      	movne	r5, #8
 80007f6:	2507      	moveq	r5, #7
 80007f8:	fa05 f50c 	lsl.w	r5, r5, ip
 80007fc:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000800:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000802:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000804:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000806:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800080a:	bf0c      	ite	eq
 800080c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800080e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000810:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000812:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000814:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000818:	bf0c      	ite	eq
 800081a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800081c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800081e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000820:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000822:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000826:	bf0c      	ite	eq
 8000828:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800082a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800082c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800082e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000830:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000832:	bf54      	ite	pl
 8000834:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000836:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000838:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800083a:	3301      	adds	r3, #1
 800083c:	2b10      	cmp	r3, #16
 800083e:	f47f af44 	bne.w	80006ca <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000842:	b005      	add	sp, #20
 8000844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000848:	465d      	mov	r5, fp
 800084a:	e7d5      	b.n	80007f8 <HAL_GPIO_Init+0x144>
 800084c:	2501      	movs	r5, #1
 800084e:	e7d3      	b.n	80007f8 <HAL_GPIO_Init+0x144>
 8000850:	2502      	movs	r5, #2
 8000852:	e7d1      	b.n	80007f8 <HAL_GPIO_Init+0x144>
 8000854:	2503      	movs	r5, #3
 8000856:	e7cf      	b.n	80007f8 <HAL_GPIO_Init+0x144>
 8000858:	2504      	movs	r5, #4
 800085a:	e7cd      	b.n	80007f8 <HAL_GPIO_Init+0x144>
 800085c:	2505      	movs	r5, #5
 800085e:	e7cb      	b.n	80007f8 <HAL_GPIO_Init+0x144>
 8000860:	2506      	movs	r5, #6
 8000862:	e7c9      	b.n	80007f8 <HAL_GPIO_Init+0x144>
 8000864:	40013c00 	.word	0x40013c00
 8000868:	40020000 	.word	0x40020000
 800086c:	40023800 	.word	0x40023800
 8000870:	40021400 	.word	0x40021400

08000874 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000874:	b10a      	cbz	r2, 800087a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000876:	6181      	str	r1, [r0, #24]
 8000878:	4770      	bx	lr
 800087a:	0409      	lsls	r1, r1, #16
 800087c:	e7fb      	b.n	8000876 <HAL_GPIO_WritePin+0x2>

0800087e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 800087e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000880:	4606      	mov	r6, r0
{ 
 8000882:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 8000884:	2800      	cmp	r0, #0
 8000886:	d064      	beq.n	8000952 <HAL_PCD_Init+0xd4>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000888:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 800088a:	4634      	mov	r4, r6
  hpcd->State = HAL_PCD_STATE_BUSY;
 800088c:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 8000890:	f001 fad0 	bl	8001e34 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 8000894:	f854 0b10 	ldr.w	r0, [r4], #16
 8000898:	f000 fed4 	bl	8001644 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 800089c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800089e:	466d      	mov	r5, sp
 80008a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80008ae:	1d37      	adds	r7, r6, #4
 80008b0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80008b4:	6830      	ldr	r0, [r6, #0]
 80008b6:	f000 fe85 	bl	80015c4 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 80008ba:	2100      	movs	r1, #0
 80008bc:	6830      	ldr	r0, [r6, #0]
 80008be:	f000 fec7 	bl	8001650 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 80008c6:	4632      	mov	r2, r6
 80008c8:	f106 0410 	add.w	r4, r6, #16
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 80008cc:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80008ce:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 80008d0:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 80008d4:	87d1      	strh	r1, [r2, #62]	; 0x3e
 for (i = 0U; i < 15U; i++)
 80008d6:	3101      	adds	r1, #1
 80008d8:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].is_in = 1U;
 80008da:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80008de:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 80008e2:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 80008e4:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 80008e6:	64d0      	str	r0, [r2, #76]	; 0x4c
 80008e8:	f102 021c 	add.w	r2, r2, #28
 for (i = 0U; i < 15U; i++)
 80008ec:	d1f0      	bne.n	80008d0 <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 80008ee:	2200      	movs	r2, #0
 80008f0:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->OUT_ep[i].is_in = 0U;
 80008f4:	4611      	mov	r1, r2
   hpcd->Instance->DIEPTXF[i] = 0U;
 80008f6:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->OUT_ep[i].num = i;
 80008fa:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 80008fe:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000900:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 for (i = 0U; i < 15U; i++)
 8000904:	3201      	adds	r2, #1
 8000906:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].is_in = 0U;
 8000908:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800090c:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000910:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000914:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0U;
 8000918:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   hpcd->Instance->DIEPTXF[i] = 0U;
 800091c:	6041      	str	r1, [r0, #4]
 800091e:	f103 031c 	add.w	r3, r3, #28
 for (i = 0U; i < 15U; i++)
 8000922:	d1e8      	bne.n	80008f6 <HAL_PCD_Init+0x78>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8000924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000926:	466d      	mov	r5, sp
 8000928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800092a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800092c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800092e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000932:	e885 0003 	stmia.w	r5, {r0, r1}
 8000936:	4670      	mov	r0, lr
 8000938:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800093c:	f000 fea0 	bl	8001680 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8000940:	2301      	movs	r3, #1
 8000942:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8000946:	6830      	ldr	r0, [r6, #0]
 8000948:	f001 f9bd 	bl	8001cc6 <USB_DevDisconnect>
 return HAL_OK;
 800094c:	2000      	movs	r0, #0
}
 800094e:	b00b      	add	sp, #44	; 0x2c
 8000950:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000952:	2001      	movs	r0, #1
 8000954:	e7fb      	b.n	800094e <HAL_PCD_Init+0xd0>

08000956 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8000956:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 800095a:	2b01      	cmp	r3, #1
{ 
 800095c:	b510      	push	{r4, lr}
 800095e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000960:	d00c      	beq.n	800097c <HAL_PCD_Start+0x26>
 8000962:	2301      	movs	r3, #1
 8000964:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8000968:	6800      	ldr	r0, [r0, #0]
 800096a:	f001 f9a0 	bl	8001cae <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800096e:	6820      	ldr	r0, [r4, #0]
 8000970:	f000 fe62 	bl	8001638 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8000974:	2000      	movs	r0, #0
 8000976:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 800097a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 800097c:	2002      	movs	r0, #2
}
 800097e:	bd10      	pop	{r4, pc}

08000980 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000984:	f8d0 9000 	ldr.w	r9, [r0]
{
 8000988:	b087      	sub	sp, #28
 800098a:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800098c:	4648      	mov	r0, r9
 800098e:	f001 f9d4 	bl	8001d3a <USB_GetMode>
 8000992:	9002      	str	r0, [sp, #8]
 8000994:	2800      	cmp	r0, #0
 8000996:	f040 812e 	bne.w	8000bf6 <HAL_PCD_IRQHandler+0x276>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 800099a:	6820      	ldr	r0, [r4, #0]
 800099c:	f001 f99f 	bl	8001cde <USB_ReadInterrupts>
 80009a0:	2800      	cmp	r0, #0
 80009a2:	f000 8128 	beq.w	8000bf6 <HAL_PCD_IRQHandler+0x276>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80009a6:	6820      	ldr	r0, [r4, #0]
 80009a8:	f001 f999 	bl	8001cde <USB_ReadInterrupts>
 80009ac:	0785      	lsls	r5, r0, #30
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80009ae:	bf48      	it	mi
 80009b0:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80009b2:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80009b4:	bf42      	ittt	mi
 80009b6:	6953      	ldrmi	r3, [r2, #20]
 80009b8:	f003 0302 	andmi.w	r3, r3, #2
 80009bc:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80009be:	f001 f98e 	bl	8001cde <USB_ReadInterrupts>
 80009c2:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 80009c6:	d00a      	beq.n	80009de <HAL_PCD_IRQHandler+0x5e>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80009c8:	6820      	ldr	r0, [r4, #0]
 80009ca:	f001 f98c 	bl	8001ce6 <USB_ReadDevAllOutEpInterrupt>
 80009ce:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 80009d2:	4607      	mov	r7, r0
 80009d4:	46a2      	mov	sl, r4
      epnum = 0U;
 80009d6:	2500      	movs	r5, #0
      
      while ( ep_intr )
 80009d8:	2f00      	cmp	r7, #0
 80009da:	f040 810f 	bne.w	8000bfc <HAL_PCD_IRQHandler+0x27c>
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80009de:	6820      	ldr	r0, [r4, #0]
 80009e0:	f001 f97d 	bl	8001cde <USB_ReadInterrupts>
 80009e4:	0341      	lsls	r1, r0, #13
 80009e6:	d50b      	bpl.n	8000a00 <HAL_PCD_IRQHandler+0x80>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80009e8:	6820      	ldr	r0, [r4, #0]
 80009ea:	f001 f984 	bl	8001cf6 <USB_ReadDevAllInEpInterrupt>
 80009ee:	4626      	mov	r6, r4
 80009f0:	9003      	str	r0, [sp, #12]
 80009f2:	f509 6810 	add.w	r8, r9, #2304	; 0x900
      
      epnum = 0U;
 80009f6:	2500      	movs	r5, #0
      
      while ( ep_intr )
 80009f8:	9b03      	ldr	r3, [sp, #12]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f040 813f 	bne.w	8000c7e <HAL_PCD_IRQHandler+0x2fe>
        ep_intr >>= 1U;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000a00:	6820      	ldr	r0, [r4, #0]
 8000a02:	f001 f96c 	bl	8001cde <USB_ReadInterrupts>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	da0d      	bge.n	8000a26 <HAL_PCD_IRQHandler+0xa6>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000a0a:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 8000a0e:	f023 0301 	bic.w	r3, r3, #1
 8000a12:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8000a16:	4620      	mov	r0, r4
 8000a18:	f001 fa8a 	bl	8001f30 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8000a1c:	6822      	ldr	r2, [r4, #0]
 8000a1e:	6953      	ldr	r3, [r2, #20]
 8000a20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000a24:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000a26:	6820      	ldr	r0, [r4, #0]
 8000a28:	f001 f959 	bl	8001cde <USB_ReadInterrupts>
 8000a2c:	0506      	lsls	r6, r0, #20
 8000a2e:	d50b      	bpl.n	8000a48 <HAL_PCD_IRQHandler+0xc8>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000a30:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 8000a34:	07d8      	lsls	r0, r3, #31
 8000a36:	d502      	bpl.n	8000a3e <HAL_PCD_IRQHandler+0xbe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8000a38:	4620      	mov	r0, r4
 8000a3a:	f001 fa61 	bl	8001f00 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000a3e:	6822      	ldr	r2, [r4, #0]
 8000a40:	6953      	ldr	r3, [r2, #20]
 8000a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a46:	6153      	str	r3, [r2, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000a48:	6820      	ldr	r0, [r4, #0]
 8000a4a:	f001 f948 	bl	8001cde <USB_ReadInterrupts>
 8000a4e:	04c1      	lsls	r1, r0, #19
 8000a50:	d537      	bpl.n	8000ac2 <HAL_PCD_IRQHandler+0x142>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000a52:	f509 6600 	add.w	r6, r9, #2048	; 0x800
 8000a56:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000a58:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000a5a:	f023 0301 	bic.w	r3, r3, #1
 8000a5e:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000a60:	2110      	movs	r1, #16
 8000a62:	f000 fea9 	bl	80017b8 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a66:	6861      	ldr	r1, [r4, #4]
 8000a68:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000a6c:	22ff      	movs	r2, #255	; 0xff
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a6e:	9802      	ldr	r0, [sp, #8]
 8000a70:	4288      	cmp	r0, r1
 8000a72:	f040 8192 	bne.w	8000d9a <HAL_PCD_IRQHandler+0x41a>
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7a:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000a7c:	69f3      	ldr	r3, [r6, #28]
 8000a7e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000a82:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8000a84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f000 818f 	beq.w	8000daa <HAL_PCD_IRQHandler+0x42a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8000a8c:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8000a90:	f043 030b 	orr.w	r3, r3, #11
 8000a94:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8000a98:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000a9a:	f043 030b 	orr.w	r3, r3, #11
 8000a9e:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000aa0:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000aa4:	7c21      	ldrb	r1, [r4, #16]
 8000aa6:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000aa8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8000aac:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000ab0:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000ab4:	f001 f960 	bl	8001d78 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000ab8:	6822      	ldr	r2, [r4, #0]
 8000aba:	6953      	ldr	r3, [r2, #20]
 8000abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ac0:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000ac2:	6820      	ldr	r0, [r4, #0]
 8000ac4:	f001 f90b 	bl	8001cde <USB_ReadInterrupts>
 8000ac8:	0482      	lsls	r2, r0, #18
 8000aca:	d51d      	bpl.n	8000b08 <HAL_PCD_IRQHandler+0x188>
    {
      USB_ActivateSetup(hpcd->Instance);
 8000acc:	6820      	ldr	r0, [r4, #0]
 8000ace:	f001 f938 	bl	8001d42 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8000ad2:	6820      	ldr	r0, [r4, #0]
 8000ad4:	68c3      	ldr	r3, [r0, #12]
 8000ad6:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000ada:	60c3      	str	r3, [r0, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8000adc:	f000 fe95 	bl	800180a <USB_GetDevSpeed>
 8000ae0:	2800      	cmp	r0, #0
 8000ae2:	f040 816b 	bne.w	8000dbc <HAL_PCD_IRQHandler+0x43c>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ae6:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8000ae8:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8000aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aee:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000af0:	68d3      	ldr	r3, [r2, #12]
 8000af2:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8000af6:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8000af8:	4620      	mov	r0, r4
 8000afa:	f001 f9f0 	bl	8001ede <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000afe:	6822      	ldr	r2, [r4, #0]
 8000b00:	6953      	ldr	r3, [r2, #20]
 8000b02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b06:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000b08:	6820      	ldr	r0, [r4, #0]
 8000b0a:	f001 f8e8 	bl	8001cde <USB_ReadInterrupts>
 8000b0e:	06c3      	lsls	r3, r0, #27
 8000b10:	d52b      	bpl.n	8000b6a <HAL_PCD_IRQHandler+0x1ea>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000b12:	6822      	ldr	r2, [r4, #0]
 8000b14:	6993      	ldr	r3, [r2, #24]
 8000b16:	f023 0310 	bic.w	r3, r3, #16
 8000b1a:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8000b1c:	f8d9 6020 	ldr.w	r6, [r9, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000b20:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8000b24:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000b26:	f006 080f 	and.w	r8, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000b2a:	f040 81a8 	bne.w	8000e7e <HAL_PCD_IRQHandler+0x4fe>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000b2e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000b32:	421e      	tst	r6, r3
 8000b34:	d014      	beq.n	8000b60 <HAL_PCD_IRQHandler+0x1e0>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8000b36:	271c      	movs	r7, #28
 8000b38:	fb07 4708 	mla	r7, r7, r8, r4
 8000b3c:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000b40:	4632      	mov	r2, r6
 8000b42:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8000b46:	4648      	mov	r0, r9
 8000b48:	f001 f85b 	bl	8001c02 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000b4c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000b50:	4433      	add	r3, r6
 8000b52:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000b56:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000b5a:	441e      	add	r6, r3
 8000b5c:	f8c7 6210 	str.w	r6, [r7, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000b60:	6822      	ldr	r2, [r4, #0]
 8000b62:	6993      	ldr	r3, [r2, #24]
 8000b64:	f043 0310 	orr.w	r3, r3, #16
 8000b68:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000b6a:	6820      	ldr	r0, [r4, #0]
 8000b6c:	f001 f8b7 	bl	8001cde <USB_ReadInterrupts>
 8000b70:	0707      	lsls	r7, r0, #28
 8000b72:	d507      	bpl.n	8000b84 <HAL_PCD_IRQHandler+0x204>
    {
      HAL_PCD_SOFCallback(hpcd);
 8000b74:	4620      	mov	r0, r4
 8000b76:	f001 f9ae 	bl	8001ed6 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8000b7a:	6822      	ldr	r2, [r4, #0]
 8000b7c:	6953      	ldr	r3, [r2, #20]
 8000b7e:	f003 0308 	and.w	r3, r3, #8
 8000b82:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000b84:	6820      	ldr	r0, [r4, #0]
 8000b86:	f001 f8aa 	bl	8001cde <USB_ReadInterrupts>
 8000b8a:	02c6      	lsls	r6, r0, #11
 8000b8c:	d508      	bpl.n	8000ba0 <HAL_PCD_IRQHandler+0x220>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8000b8e:	b2e9      	uxtb	r1, r5
 8000b90:	4620      	mov	r0, r4
 8000b92:	f001 f9d5 	bl	8001f40 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000b96:	6822      	ldr	r2, [r4, #0]
 8000b98:	6953      	ldr	r3, [r2, #20]
 8000b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b9e:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000ba0:	6820      	ldr	r0, [r4, #0]
 8000ba2:	f001 f89c 	bl	8001cde <USB_ReadInterrupts>
 8000ba6:	0280      	lsls	r0, r0, #10
 8000ba8:	d508      	bpl.n	8000bbc <HAL_PCD_IRQHandler+0x23c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8000baa:	b2e9      	uxtb	r1, r5
 8000bac:	4620      	mov	r0, r4
 8000bae:	f001 f9c3 	bl	8001f38 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000bb2:	6822      	ldr	r2, [r4, #0]
 8000bb4:	6953      	ldr	r3, [r2, #20]
 8000bb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bba:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000bbc:	6820      	ldr	r0, [r4, #0]
 8000bbe:	f001 f88e 	bl	8001cde <USB_ReadInterrupts>
 8000bc2:	0041      	lsls	r1, r0, #1
 8000bc4:	d507      	bpl.n	8000bd6 <HAL_PCD_IRQHandler+0x256>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	f001 f9be 	bl	8001f48 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000bcc:	6822      	ldr	r2, [r4, #0]
 8000bce:	6953      	ldr	r3, [r2, #20]
 8000bd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000bd4:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000bd6:	6820      	ldr	r0, [r4, #0]
 8000bd8:	f001 f881 	bl	8001cde <USB_ReadInterrupts>
 8000bdc:	0742      	lsls	r2, r0, #29
 8000bde:	d50a      	bpl.n	8000bf6 <HAL_PCD_IRQHandler+0x276>
    {
      temp = hpcd->Instance->GOTGINT;
 8000be0:	6823      	ldr	r3, [r4, #0]
 8000be2:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000be4:	076b      	lsls	r3, r5, #29
 8000be6:	d502      	bpl.n	8000bee <HAL_PCD_IRQHandler+0x26e>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8000be8:	4620      	mov	r0, r4
 8000bea:	f001 f9b1 	bl	8001f50 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8000bee:	6823      	ldr	r3, [r4, #0]
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	4315      	orrs	r5, r2
 8000bf4:	605d      	str	r5, [r3, #4]
    }
  }
}
 8000bf6:	b007      	add	sp, #28
 8000bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1U)
 8000bfc:	07f8      	lsls	r0, r7, #31
 8000bfe:	d538      	bpl.n	8000c72 <HAL_PCD_IRQHandler+0x2f2>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000c00:	fa5f fb85 	uxtb.w	fp, r5
 8000c04:	4659      	mov	r1, fp
 8000c06:	6820      	ldr	r0, [r4, #0]
 8000c08:	f001 f87d 	bl	8001d06 <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000c0c:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000c10:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000c12:	d021      	beq.n	8000c58 <HAL_PCD_IRQHandler+0x2d8>
            if(hpcd->Init.dma_enable == 1U)
 8000c14:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000c16:	2301      	movs	r3, #1
            if(hpcd->Init.dma_enable == 1U)
 8000c18:	4299      	cmp	r1, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000c1a:	60b3      	str	r3, [r6, #8]
            if(hpcd->Init.dma_enable == 1U)
 8000c1c:	d10c      	bne.n	8000c38 <HAL_PCD_IRQHandler+0x2b8>
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8000c1e:	6931      	ldr	r1, [r6, #16]
 8000c20:	f8da 0200 	ldr.w	r0, [sl, #512]	; 0x200
 8000c24:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8000c28:	1a41      	subs	r1, r0, r1
 8000c2a:	f8ca 1210 	str.w	r1, [sl, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8000c2e:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
 8000c32:	4408      	add	r0, r1
 8000c34:	f8ca 0204 	str.w	r0, [sl, #516]	; 0x204
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000c38:	4659      	mov	r1, fp
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f001 f93a 	bl	8001eb4 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8000c40:	6921      	ldr	r1, [r4, #16]
 8000c42:	2901      	cmp	r1, #1
 8000c44:	d108      	bne.n	8000c58 <HAL_PCD_IRQHandler+0x2d8>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000c46:	b93d      	cbnz	r5, 8000c58 <HAL_PCD_IRQHandler+0x2d8>
 8000c48:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8000c4c:	b922      	cbnz	r2, 8000c58 <HAL_PCD_IRQHandler+0x2d8>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000c4e:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000c52:	6820      	ldr	r0, [r4, #0]
 8000c54:	f001 f890 	bl	8001d78 <USB_EP0_OutStart>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000c58:	f018 0f08 	tst.w	r8, #8
 8000c5c:	d004      	beq.n	8000c68 <HAL_PCD_IRQHandler+0x2e8>
            HAL_PCD_SetupStageCallback(hpcd);
 8000c5e:	4620      	mov	r0, r4
 8000c60:	f001 f922 	bl	8001ea8 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000c64:	2308      	movs	r3, #8
 8000c66:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000c68:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2310      	movne	r3, #16
 8000c70:	60b3      	strne	r3, [r6, #8]
        epnum++;
 8000c72:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000c74:	087f      	lsrs	r7, r7, #1
 8000c76:	3620      	adds	r6, #32
 8000c78:	f10a 0a1c 	add.w	sl, sl, #28
 8000c7c:	e6ac      	b.n	80009d8 <HAL_PCD_IRQHandler+0x58>
        if (ep_intr & 0x1U) /* In ITR */
 8000c7e:	9b03      	ldr	r3, [sp, #12]
 8000c80:	07da      	lsls	r2, r3, #31
 8000c82:	d558      	bpl.n	8000d36 <HAL_PCD_IRQHandler+0x3b6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000c84:	fa5f fb85 	uxtb.w	fp, r5
 8000c88:	4659      	mov	r1, fp
 8000c8a:	6820      	ldr	r0, [r4, #0]
 8000c8c:	f001 f845 	bl	8001d1a <USB_ReadDevInEPInterrupt>
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000c90:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000c92:	4607      	mov	r7, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000c94:	d520      	bpl.n	8000cd8 <HAL_PCD_IRQHandler+0x358>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000c96:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = 0x1U << epnum;
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000c9e:	ea23 0301 	bic.w	r3, r3, r1
 8000ca2:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	f8c8 3008 	str.w	r3, [r8, #8]
            if (hpcd->Init.dma_enable == 1U)
 8000cac:	6923      	ldr	r3, [r4, #16]
 8000cae:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8000cb0:	bf01      	itttt	eq
 8000cb2:	6c73      	ldreq	r3, [r6, #68]	; 0x44
 8000cb4:	6c32      	ldreq	r2, [r6, #64]	; 0x40
 8000cb6:	189b      	addeq	r3, r3, r2
 8000cb8:	6473      	streq	r3, [r6, #68]	; 0x44
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8000cba:	4659      	mov	r1, fp
 8000cbc:	4620      	mov	r0, r4
 8000cbe:	f001 f902 	bl	8001ec6 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8000cc2:	6921      	ldr	r1, [r4, #16]
 8000cc4:	2901      	cmp	r1, #1
 8000cc6:	d107      	bne.n	8000cd8 <HAL_PCD_IRQHandler+0x358>
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8000cc8:	b935      	cbnz	r5, 8000cd8 <HAL_PCD_IRQHandler+0x358>
 8000cca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ccc:	b923      	cbnz	r3, 8000cd8 <HAL_PCD_IRQHandler+0x358>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000cce:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000cd2:	6820      	ldr	r0, [r4, #0]
 8000cd4:	f001 f850 	bl	8001d78 <USB_EP0_OutStart>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000cd8:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000cda:	bf44      	itt	mi
 8000cdc:	2308      	movmi	r3, #8
 8000cde:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8000ce2:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8000ce4:	bf44      	itt	mi
 8000ce6:	2310      	movmi	r3, #16
 8000ce8:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8000cec:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000cee:	bf44      	itt	mi
 8000cf0:	2340      	movmi	r3, #64	; 0x40
 8000cf2:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8000cf6:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8000cf8:	bf44      	itt	mi
 8000cfa:	2302      	movmi	r3, #2
 8000cfc:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000d00:	063f      	lsls	r7, r7, #24
 8000d02:	d518      	bpl.n	8000d36 <HAL_PCD_IRQHandler+0x3b6>
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8000d04:	6823      	ldr	r3, [r4, #0]
 8000d06:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8000d08:	6cf7      	ldr	r7, [r6, #76]	; 0x4c
 8000d0a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000d0c:	1aff      	subs	r7, r7, r3
 8000d0e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000d10:	429f      	cmp	r7, r3
 8000d12:	bf28      	it	cs
 8000d14:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000d16:	9b04      	ldr	r3, [sp, #16]
 8000d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8000d1c:	f107 0a03 	add.w	sl, r7, #3
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000d20:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 8000d24:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000d28:	9305      	str	r3, [sp, #20]
 8000d2a:	9b05      	ldr	r3, [sp, #20]
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	4553      	cmp	r3, sl
 8000d32:	d808      	bhi.n	8000d46 <HAL_PCD_IRQHandler+0x3c6>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 8000d34:	b32f      	cbz	r7, 8000d82 <HAL_PCD_IRQHandler+0x402>
        ep_intr >>= 1U;
 8000d36:	9b03      	ldr	r3, [sp, #12]
 8000d38:	085b      	lsrs	r3, r3, #1
        epnum++;
 8000d3a:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000d3c:	9303      	str	r3, [sp, #12]
 8000d3e:	361c      	adds	r6, #28
 8000d40:	f108 0820 	add.w	r8, r8, #32
 8000d44:	e658      	b.n	80009f8 <HAL_PCD_IRQHandler+0x78>
          (ep->xfer_count < ep->xfer_len) &&
 8000d46:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8000d48:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d9f2      	bls.n	8000d34 <HAL_PCD_IRQHandler+0x3b4>
          (ep->xfer_count < ep->xfer_len) &&
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0f0      	beq.n	8000d34 <HAL_PCD_IRQHandler+0x3b4>
 8000d52:	6c37      	ldr	r7, [r6, #64]	; 0x40
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000d54:	9804      	ldr	r0, [sp, #16]
    len = ep->xfer_len - ep->xfer_count;
 8000d56:	1a9b      	subs	r3, r3, r2
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	bf28      	it	cs
 8000d5c:	461f      	movcs	r7, r3
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000d5e:	7c23      	ldrb	r3, [r4, #16]
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	465a      	mov	r2, fp
 8000d64:	b2bb      	uxth	r3, r7
 8000d66:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8000d68:	f000 ff37 	bl	8001bda <USB_WritePacket>
    ep->xfer_buff  += len;
 8000d6c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000d6e:	443b      	add	r3, r7
 8000d70:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 8000d72:	6d33      	ldr	r3, [r6, #80]	; 0x50
    len32b = (len + 3U) / 4U;
 8000d74:	f107 0a03 	add.w	sl, r7, #3
    ep->xfer_count += len;
 8000d78:	443b      	add	r3, r7
    len32b = (len + 3U) / 4U;
 8000d7a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
    ep->xfer_count += len;
 8000d7e:	6533      	str	r3, [r6, #80]	; 0x50
 8000d80:	e7d3      	b.n	8000d2a <HAL_PCD_IRQHandler+0x3aa>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d82:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = 0x1U << epnum;
 8000d84:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d86:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 8000d8a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1U << epnum;
 8000d8e:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d90:	ea23 0302 	bic.w	r3, r3, r2
 8000d94:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 8000d98:	e7cd      	b.n	8000d36 <HAL_PCD_IRQHandler+0x3b6>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d9a:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000d9c:	609a      	str	r2, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d9e:	3001      	adds	r0, #1
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8000da0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000da4:	9002      	str	r0, [sp, #8]
 8000da6:	3320      	adds	r3, #32
 8000da8:	e661      	b.n	8000a6e <HAL_PCD_IRQHandler+0xee>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8000daa:	6973      	ldr	r3, [r6, #20]
 8000dac:	f043 030b 	orr.w	r3, r3, #11
 8000db0:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8000db2:	6933      	ldr	r3, [r6, #16]
 8000db4:	f043 030b 	orr.w	r3, r3, #11
 8000db8:	6133      	str	r3, [r6, #16]
 8000dba:	e671      	b.n	8000aa0 <HAL_PCD_IRQHandler+0x120>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8000dc0:	2340      	movs	r3, #64	; 0x40
 8000dc2:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 8000dc4:	f000 fbf8 	bl	80015b8 <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8000dc8:	4b34      	ldr	r3, [pc, #208]	; (8000e9c <HAL_PCD_IRQHandler+0x51c>)
 8000dca:	4a35      	ldr	r2, [pc, #212]	; (8000ea0 <HAL_PCD_IRQHandler+0x520>)
 8000dcc:	4403      	add	r3, r0
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	6823      	ldr	r3, [r4, #0]
 8000dd2:	d804      	bhi.n	8000dde <HAL_PCD_IRQHandler+0x45e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000dd4:	68da      	ldr	r2, [r3, #12]
 8000dd6:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	e68c      	b.n	8000af8 <HAL_PCD_IRQHandler+0x178>
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8000dde:	4a31      	ldr	r2, [pc, #196]	; (8000ea4 <HAL_PCD_IRQHandler+0x524>)
 8000de0:	4931      	ldr	r1, [pc, #196]	; (8000ea8 <HAL_PCD_IRQHandler+0x528>)
 8000de2:	4402      	add	r2, r0
 8000de4:	428a      	cmp	r2, r1
 8000de6:	d803      	bhi.n	8000df0 <HAL_PCD_IRQHandler+0x470>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8000dee:	e7f4      	b.n	8000dda <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8000df0:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8000df4:	492d      	ldr	r1, [pc, #180]	; (8000eac <HAL_PCD_IRQHandler+0x52c>)
 8000df6:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8000dfa:	428a      	cmp	r2, r1
 8000dfc:	d803      	bhi.n	8000e06 <HAL_PCD_IRQHandler+0x486>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8000e04:	e7e9      	b.n	8000dda <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8000e06:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8000e0a:	4929      	ldr	r1, [pc, #164]	; (8000eb0 <HAL_PCD_IRQHandler+0x530>)
 8000e0c:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8000e10:	428a      	cmp	r2, r1
 8000e12:	d803      	bhi.n	8000e1c <HAL_PCD_IRQHandler+0x49c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e14:	68da      	ldr	r2, [r3, #12]
 8000e16:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000e1a:	e7de      	b.n	8000dda <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 8000e1c:	4a25      	ldr	r2, [pc, #148]	; (8000eb4 <HAL_PCD_IRQHandler+0x534>)
 8000e1e:	4926      	ldr	r1, [pc, #152]	; (8000eb8 <HAL_PCD_IRQHandler+0x538>)
 8000e20:	4402      	add	r2, r0
 8000e22:	428a      	cmp	r2, r1
 8000e24:	d803      	bhi.n	8000e2e <HAL_PCD_IRQHandler+0x4ae>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e26:	68da      	ldr	r2, [r3, #12]
 8000e28:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8000e2c:	e7d5      	b.n	8000dda <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 8000e2e:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <HAL_PCD_IRQHandler+0x53c>)
 8000e30:	4923      	ldr	r1, [pc, #140]	; (8000ec0 <HAL_PCD_IRQHandler+0x540>)
 8000e32:	4402      	add	r2, r0
 8000e34:	428a      	cmp	r2, r1
 8000e36:	d803      	bhi.n	8000e40 <HAL_PCD_IRQHandler+0x4c0>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e38:	68da      	ldr	r2, [r3, #12]
 8000e3a:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8000e3e:	e7cc      	b.n	8000dda <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8000e40:	4a20      	ldr	r2, [pc, #128]	; (8000ec4 <HAL_PCD_IRQHandler+0x544>)
 8000e42:	4921      	ldr	r1, [pc, #132]	; (8000ec8 <HAL_PCD_IRQHandler+0x548>)
 8000e44:	4402      	add	r2, r0
 8000e46:	428a      	cmp	r2, r1
 8000e48:	d803      	bhi.n	8000e52 <HAL_PCD_IRQHandler+0x4d2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8000e50:	e7c3      	b.n	8000dda <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8000e52:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8000e56:	491d      	ldr	r1, [pc, #116]	; (8000ecc <HAL_PCD_IRQHandler+0x54c>)
 8000e58:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8000e5c:	428a      	cmp	r2, r1
 8000e5e:	d803      	bhi.n	8000e68 <HAL_PCD_IRQHandler+0x4e8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e66:	e7b8      	b.n	8000dda <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8000e68:	4a19      	ldr	r2, [pc, #100]	; (8000ed0 <HAL_PCD_IRQHandler+0x550>)
 8000e6a:	491a      	ldr	r1, [pc, #104]	; (8000ed4 <HAL_PCD_IRQHandler+0x554>)
 8000e6c:	4402      	add	r2, r0
 8000e6e:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e70:	68da      	ldr	r2, [r3, #12]
 8000e72:	bf94      	ite	ls
 8000e74:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e78:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8000e7c:	e7ad      	b.n	8000dda <HAL_PCD_IRQHandler+0x45a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	f47f ae6e 	bne.w	8000b60 <HAL_PCD_IRQHandler+0x1e0>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000e84:	2208      	movs	r2, #8
 8000e86:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 8000e8a:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000e8c:	271c      	movs	r7, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000e8e:	f000 feb8 	bl	8001c02 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000e92:	fb07 4708 	mla	r7, r7, r8, r4
 8000e96:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000e9a:	e65c      	b.n	8000b56 <HAL_PCD_IRQHandler+0x1d6>
 8000e9c:	ff275340 	.word	0xff275340
 8000ea0:	000c34ff 	.word	0x000c34ff
 8000ea4:	ff1b1e40 	.word	0xff1b1e40
 8000ea8:	000f423f 	.word	0x000f423f
 8000eac:	00124f7f 	.word	0x00124f7f
 8000eb0:	0013d61f 	.word	0x0013d61f
 8000eb4:	fee5b660 	.word	0xfee5b660
 8000eb8:	0016e35f 	.word	0x0016e35f
 8000ebc:	feced300 	.word	0xfeced300
 8000ec0:	001b773f 	.word	0x001b773f
 8000ec4:	feb35bc0 	.word	0xfeb35bc0
 8000ec8:	002191bf 	.word	0x002191bf
 8000ecc:	0038751f 	.word	0x0038751f
 8000ed0:	fe5954e0 	.word	0xfe5954e0
 8000ed4:	00419cdf 	.word	0x00419cdf

08000ed8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8000ed8:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8000edc:	2b01      	cmp	r3, #1
{
 8000ede:	b510      	push	{r4, lr}
 8000ee0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000ee2:	d009      	beq.n	8000ef8 <HAL_PCD_SetAddress+0x20>
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8000eea:	6800      	ldr	r0, [r0, #0]
 8000eec:	f000 fecf 	bl	8001c8e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000ef6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000ef8:	2002      	movs	r0, #2
}
 8000efa:	bd10      	pop	{r4, pc}

08000efc <HAL_PCD_EP_Open>:
{
 8000efc:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 8000efe:	b24e      	sxtb	r6, r1
 8000f00:	2e00      	cmp	r6, #0
{
 8000f02:	4604      	mov	r4, r0
 8000f04:	f04f 051c 	mov.w	r5, #28
 8000f08:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000f0c:	bfb5      	itete	lt
 8000f0e:	fb05 4100 	mlalt	r1, r5, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f12:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000f16:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f18:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->num   = ep_addr & 0x7F;
 8000f1c:	b2c0      	uxtb	r0, r0
  if (ep->is_in)
 8000f1e:	2e00      	cmp	r6, #0
    ep->tx_fifo_num = ep->num;
 8000f20:	bfb8      	it	lt
 8000f22:	80c8      	strhlt	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK )
 8000f24:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8000f26:	70cb      	strb	r3, [r1, #3]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000f28:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep->data_pid_start = 0U;
 8000f2c:	bf04      	itt	eq
 8000f2e:	2300      	moveq	r3, #0
 8000f30:	710b      	strbeq	r3, [r1, #4]
  ep->num   = ep_addr & 0x7F;
 8000f32:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000f34:	704d      	strb	r5, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000f36:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
  ep->maxpacket = ep_mps;
 8000f3a:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd); 
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d009      	beq.n	8000f54 <HAL_PCD_EP_Open+0x58>
 8000f40:	2301      	movs	r3, #1
 8000f42:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000f46:	6820      	ldr	r0, [r4, #0]
 8000f48:	f000 fc7a 	bl	8001840 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 8000f52:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd); 
 8000f54:	2002      	movs	r0, #2
}
 8000f56:	bd70      	pop	{r4, r5, r6, pc}

08000f58 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 8000f58:	b24b      	sxtb	r3, r1
 8000f5a:	2b00      	cmp	r3, #0
{  
 8000f5c:	b510      	push	{r4, lr}
 8000f5e:	f04f 021c 	mov.w	r2, #28
 8000f62:	4604      	mov	r4, r0
 8000f64:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000f68:	bfb5      	itete	lt
 8000f6a:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f6e:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000f72:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f74:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = (0x80 & ep_addr) != 0;
 8000f78:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8000f7a:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000f7c:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000f7e:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d009      	beq.n	8000f9a <HAL_PCD_EP_Close+0x42>
 8000f86:	2301      	movs	r3, #1
 8000f88:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000f8c:	6820      	ldr	r0, [r4, #0]
 8000f8e:	f000 fc96 	bl	80018be <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8000f92:	2000      	movs	r0, #0
 8000f94:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000f98:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000f9a:	2002      	movs	r0, #2
}
 8000f9c:	bd10      	pop	{r4, pc}

08000f9e <HAL_PCD_EP_Receive>:
{
 8000f9e:	b538      	push	{r3, r4, r5, lr}
 8000fa0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000fa4:	241c      	movs	r4, #28
 8000fa6:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8000faa:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000fae:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->xfer_len = len;
 8000fb2:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0U;
 8000fb6:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;  
 8000fb8:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_count = 0U;
 8000fbc:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
 8000fc0:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 8000fc4:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1U)
 8000fc8:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000fca:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8000fcc:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8000fce:	bf08      	it	eq
 8000fd0:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
 8000fd4:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8000fd6:	b91d      	cbnz	r5, 8000fe0 <HAL_PCD_EP_Receive+0x42>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000fd8:	f000 fd92 	bl	8001b00 <USB_EP0StartXfer>
}
 8000fdc:	2000      	movs	r0, #0
 8000fde:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000fe0:	f000 fcc8 	bl	8001974 <USB_EPStartXfer>
 8000fe4:	e7fa      	b.n	8000fdc <HAL_PCD_EP_Receive+0x3e>

08000fe6 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8000fe6:	231c      	movs	r3, #28
 8000fe8:	f001 010f 	and.w	r1, r1, #15
 8000fec:	fb03 0101 	mla	r1, r3, r1, r0
}
 8000ff0:	f8b1 0210 	ldrh.w	r0, [r1, #528]	; 0x210
 8000ff4:	4770      	bx	lr

08000ff6 <HAL_PCD_EP_Transmit>:
{
 8000ff6:	b538      	push	{r3, r4, r5, lr}
 8000ff8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000ffc:	241c      	movs	r4, #28
 8000ffe:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8001002:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001006:	3138      	adds	r1, #56	; 0x38
  ep->xfer_len = len;
 8001008:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 800100a:	2300      	movs	r3, #0
 800100c:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1U;
 800100e:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;  
 8001010:	6462      	str	r2, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8001012:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 8001016:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  if (hpcd->Init.dma_enable == 1U)
 800101a:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800101c:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800101e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8001020:	bf08      	it	eq
 8001022:	64a2      	streq	r2, [r4, #72]	; 0x48
 8001024:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8001026:	b91d      	cbnz	r5, 8001030 <HAL_PCD_EP_Transmit+0x3a>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001028:	f000 fd6a 	bl	8001b00 <USB_EP0StartXfer>
}
 800102c:	2000      	movs	r0, #0
 800102e:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001030:	f000 fca0 	bl	8001974 <USB_EPStartXfer>
 8001034:	e7fa      	b.n	800102c <HAL_PCD_EP_Transmit+0x36>

08001036 <HAL_PCD_EP_SetStall>:
{
 8001036:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8001038:	b24b      	sxtb	r3, r1
 800103a:	2b00      	cmp	r3, #0
 800103c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8001040:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001044:	bfb5      	itete	lt
 8001046:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 800104a:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800104e:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 8001050:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_stall = 1U;
 8001054:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001056:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8001058:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 800105a:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 800105c:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800105e:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001060:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8001064:	4293      	cmp	r3, r2
{
 8001066:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8001068:	d00f      	beq.n	800108a <HAL_PCD_EP_SetStall+0x54>
 800106a:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 800106e:	6800      	ldr	r0, [r0, #0]
 8001070:	f000 fdd5 	bl	8001c1e <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8001074:	b92d      	cbnz	r5, 8001082 <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001076:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 800107a:	7c21      	ldrb	r1, [r4, #16]
 800107c:	6820      	ldr	r0, [r4, #0]
 800107e:	f000 fe7b 	bl	8001d78 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8001082:	2000      	movs	r0, #0
 8001084:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001088:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 800108a:	2002      	movs	r0, #2
}
 800108c:	bd38      	pop	{r3, r4, r5, pc}

0800108e <HAL_PCD_EP_ClrStall>:
{
 800108e:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8001090:	b24b      	sxtb	r3, r1
 8001092:	2b00      	cmp	r3, #0
{
 8001094:	4605      	mov	r5, r0
 8001096:	f04f 021c 	mov.w	r2, #28
 800109a:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800109e:	bfb5      	itete	lt
 80010a0:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 80010a4:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80010a8:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 80010aa:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80010ae:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 80010b0:	2400      	movs	r4, #0
 80010b2:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80010b4:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80010b6:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80010b8:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d009      	beq.n	80010d4 <HAL_PCD_EP_ClrStall+0x46>
 80010c0:	2301      	movs	r3, #1
 80010c2:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 80010c6:	6828      	ldr	r0, [r5, #0]
 80010c8:	f000 fdc8 	bl	8001c5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80010cc:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
  return HAL_OK;
 80010d0:	4620      	mov	r0, r4
 80010d2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 80010d4:	2002      	movs	r0, #2
}
 80010d6:	bd38      	pop	{r3, r4, r5, pc}

080010d8 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80010d8:	6800      	ldr	r0, [r0, #0]
{
 80010da:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80010dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 80010de:	b921      	cbnz	r1, 80010ea <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 80010e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010e4:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
  }
  
  return HAL_OK;
}
 80010e6:	2000      	movs	r0, #0
 80010e8:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 80010ea:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 80010ec:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 80010ee:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 80010f2:	1e4e      	subs	r6, r1, #1
 80010f4:	b2ec      	uxtb	r4, r5
 80010f6:	42b4      	cmp	r4, r6
 80010f8:	f105 0501 	add.w	r5, r5, #1
 80010fc:	db06      	blt.n	800110c <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 80010fe:	313f      	adds	r1, #63	; 0x3f
 8001100:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001104:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001108:	6043      	str	r3, [r0, #4]
 800110a:	e7ec      	b.n	80010e6 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 800110c:	3440      	adds	r4, #64	; 0x40
 800110e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8001112:	6864      	ldr	r4, [r4, #4]
 8001114:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8001118:	e7ec      	b.n	80010f4 <HAL_PCDEx_SetTxFiFo+0x1c>

0800111a <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800111a:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 800111c:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800111e:	6259      	str	r1, [r3, #36]	; 0x24
}
 8001120:	4770      	bx	lr
	...

08001124 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001124:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001128:	4604      	mov	r4, r0
 800112a:	b918      	cbnz	r0, 8001134 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800112c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800112e:	b002      	add	sp, #8
 8001130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001134:	6803      	ldr	r3, [r0, #0]
 8001136:	07dd      	lsls	r5, r3, #31
 8001138:	d410      	bmi.n	800115c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113a:	6823      	ldr	r3, [r4, #0]
 800113c:	0798      	lsls	r0, r3, #30
 800113e:	d458      	bmi.n	80011f2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	071a      	lsls	r2, r3, #28
 8001144:	f100 809a 	bmi.w	800127c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001148:	6823      	ldr	r3, [r4, #0]
 800114a:	075b      	lsls	r3, r3, #29
 800114c:	f100 80b8 	bmi.w	80012c0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001150:	69a2      	ldr	r2, [r4, #24]
 8001152:	2a00      	cmp	r2, #0
 8001154:	f040 8119 	bne.w	800138a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001158:	2000      	movs	r0, #0
 800115a:	e7e8      	b.n	800112e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800115c:	4ba6      	ldr	r3, [pc, #664]	; (80013f8 <HAL_RCC_OscConfig+0x2d4>)
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	f002 020c 	and.w	r2, r2, #12
 8001164:	2a04      	cmp	r2, #4
 8001166:	d007      	beq.n	8001178 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800116e:	2a08      	cmp	r2, #8
 8001170:	d10a      	bne.n	8001188 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	0259      	lsls	r1, r3, #9
 8001176:	d507      	bpl.n	8001188 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001178:	4b9f      	ldr	r3, [pc, #636]	; (80013f8 <HAL_RCC_OscConfig+0x2d4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	039a      	lsls	r2, r3, #14
 800117e:	d5dc      	bpl.n	800113a <HAL_RCC_OscConfig+0x16>
 8001180:	6863      	ldr	r3, [r4, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1d9      	bne.n	800113a <HAL_RCC_OscConfig+0x16>
 8001186:	e7d1      	b.n	800112c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001188:	6863      	ldr	r3, [r4, #4]
 800118a:	4d9b      	ldr	r5, [pc, #620]	; (80013f8 <HAL_RCC_OscConfig+0x2d4>)
 800118c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001190:	d111      	bne.n	80011b6 <HAL_RCC_OscConfig+0x92>
 8001192:	682b      	ldr	r3, [r5, #0]
 8001194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001198:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800119a:	f7ff f9fd 	bl	8000598 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119e:	4d96      	ldr	r5, [pc, #600]	; (80013f8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80011a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a2:	682b      	ldr	r3, [r5, #0]
 80011a4:	039b      	lsls	r3, r3, #14
 80011a6:	d4c8      	bmi.n	800113a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff f9f6 	bl	8000598 <HAL_GetTick>
 80011ac:	1b80      	subs	r0, r0, r6
 80011ae:	2864      	cmp	r0, #100	; 0x64
 80011b0:	d9f7      	bls.n	80011a2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80011b2:	2003      	movs	r0, #3
 80011b4:	e7bb      	b.n	800112e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ba:	d104      	bne.n	80011c6 <HAL_RCC_OscConfig+0xa2>
 80011bc:	682b      	ldr	r3, [r5, #0]
 80011be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c2:	602b      	str	r3, [r5, #0]
 80011c4:	e7e5      	b.n	8001192 <HAL_RCC_OscConfig+0x6e>
 80011c6:	682a      	ldr	r2, [r5, #0]
 80011c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011cc:	602a      	str	r2, [r5, #0]
 80011ce:	682a      	ldr	r2, [r5, #0]
 80011d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011d4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1df      	bne.n	800119a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80011da:	f7ff f9dd 	bl	8000598 <HAL_GetTick>
 80011de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e0:	682b      	ldr	r3, [r5, #0]
 80011e2:	039f      	lsls	r7, r3, #14
 80011e4:	d5a9      	bpl.n	800113a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e6:	f7ff f9d7 	bl	8000598 <HAL_GetTick>
 80011ea:	1b80      	subs	r0, r0, r6
 80011ec:	2864      	cmp	r0, #100	; 0x64
 80011ee:	d9f7      	bls.n	80011e0 <HAL_RCC_OscConfig+0xbc>
 80011f0:	e7df      	b.n	80011b2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011f2:	4b81      	ldr	r3, [pc, #516]	; (80013f8 <HAL_RCC_OscConfig+0x2d4>)
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	f012 0f0c 	tst.w	r2, #12
 80011fa:	d007      	beq.n	800120c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001202:	2a08      	cmp	r2, #8
 8001204:	d111      	bne.n	800122a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	025e      	lsls	r6, r3, #9
 800120a:	d40e      	bmi.n	800122a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120c:	4b7a      	ldr	r3, [pc, #488]	; (80013f8 <HAL_RCC_OscConfig+0x2d4>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	0795      	lsls	r5, r2, #30
 8001212:	d502      	bpl.n	800121a <HAL_RCC_OscConfig+0xf6>
 8001214:	68e2      	ldr	r2, [r4, #12]
 8001216:	2a01      	cmp	r2, #1
 8001218:	d188      	bne.n	800112c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	6921      	ldr	r1, [r4, #16]
 800121e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001222:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001226:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001228:	e78a      	b.n	8001140 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800122a:	68e2      	ldr	r2, [r4, #12]
 800122c:	4b73      	ldr	r3, [pc, #460]	; (80013fc <HAL_RCC_OscConfig+0x2d8>)
 800122e:	b1b2      	cbz	r2, 800125e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001230:	2201      	movs	r2, #1
 8001232:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001234:	f7ff f9b0 	bl	8000598 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001238:	4d6f      	ldr	r5, [pc, #444]	; (80013f8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800123a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123c:	682b      	ldr	r3, [r5, #0]
 800123e:	0798      	lsls	r0, r3, #30
 8001240:	d507      	bpl.n	8001252 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001242:	682b      	ldr	r3, [r5, #0]
 8001244:	6922      	ldr	r2, [r4, #16]
 8001246:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800124a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800124e:	602b      	str	r3, [r5, #0]
 8001250:	e776      	b.n	8001140 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001252:	f7ff f9a1 	bl	8000598 <HAL_GetTick>
 8001256:	1b80      	subs	r0, r0, r6
 8001258:	2802      	cmp	r0, #2
 800125a:	d9ef      	bls.n	800123c <HAL_RCC_OscConfig+0x118>
 800125c:	e7a9      	b.n	80011b2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800125e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001260:	f7ff f99a 	bl	8000598 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001264:	4d64      	ldr	r5, [pc, #400]	; (80013f8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001266:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001268:	682b      	ldr	r3, [r5, #0]
 800126a:	0799      	lsls	r1, r3, #30
 800126c:	f57f af68 	bpl.w	8001140 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001270:	f7ff f992 	bl	8000598 <HAL_GetTick>
 8001274:	1b80      	subs	r0, r0, r6
 8001276:	2802      	cmp	r0, #2
 8001278:	d9f6      	bls.n	8001268 <HAL_RCC_OscConfig+0x144>
 800127a:	e79a      	b.n	80011b2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800127c:	6962      	ldr	r2, [r4, #20]
 800127e:	4b60      	ldr	r3, [pc, #384]	; (8001400 <HAL_RCC_OscConfig+0x2dc>)
 8001280:	b17a      	cbz	r2, 80012a2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001282:	2201      	movs	r2, #1
 8001284:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001286:	f7ff f987 	bl	8000598 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128a:	4d5b      	ldr	r5, [pc, #364]	; (80013f8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800128c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001290:	079f      	lsls	r7, r3, #30
 8001292:	f53f af59 	bmi.w	8001148 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001296:	f7ff f97f 	bl	8000598 <HAL_GetTick>
 800129a:	1b80      	subs	r0, r0, r6
 800129c:	2802      	cmp	r0, #2
 800129e:	d9f6      	bls.n	800128e <HAL_RCC_OscConfig+0x16a>
 80012a0:	e787      	b.n	80011b2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80012a2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012a4:	f7ff f978 	bl	8000598 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a8:	4d53      	ldr	r5, [pc, #332]	; (80013f8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80012aa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012ae:	0798      	lsls	r0, r3, #30
 80012b0:	f57f af4a 	bpl.w	8001148 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b4:	f7ff f970 	bl	8000598 <HAL_GetTick>
 80012b8:	1b80      	subs	r0, r0, r6
 80012ba:	2802      	cmp	r0, #2
 80012bc:	d9f6      	bls.n	80012ac <HAL_RCC_OscConfig+0x188>
 80012be:	e778      	b.n	80011b2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012c0:	4b4d      	ldr	r3, [pc, #308]	; (80013f8 <HAL_RCC_OscConfig+0x2d4>)
 80012c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012c4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80012c8:	d128      	bne.n	800131c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	9201      	str	r2, [sp, #4]
 80012cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012de:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e0:	4d48      	ldr	r5, [pc, #288]	; (8001404 <HAL_RCC_OscConfig+0x2e0>)
 80012e2:	682b      	ldr	r3, [r5, #0]
 80012e4:	05d9      	lsls	r1, r3, #23
 80012e6:	d51b      	bpl.n	8001320 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e8:	68a3      	ldr	r3, [r4, #8]
 80012ea:	4d43      	ldr	r5, [pc, #268]	; (80013f8 <HAL_RCC_OscConfig+0x2d4>)
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d127      	bne.n	8001340 <HAL_RCC_OscConfig+0x21c>
 80012f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80012f8:	f7ff f94e 	bl	8000598 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012fc:	4d3e      	ldr	r5, [pc, #248]	; (80013f8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80012fe:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001300:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001304:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001306:	079b      	lsls	r3, r3, #30
 8001308:	d539      	bpl.n	800137e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800130a:	2e00      	cmp	r6, #0
 800130c:	f43f af20 	beq.w	8001150 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001310:	4a39      	ldr	r2, [pc, #228]	; (80013f8 <HAL_RCC_OscConfig+0x2d4>)
 8001312:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001318:	6413      	str	r3, [r2, #64]	; 0x40
 800131a:	e719      	b.n	8001150 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 800131c:	2600      	movs	r6, #0
 800131e:	e7df      	b.n	80012e0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001320:	682b      	ldr	r3, [r5, #0]
 8001322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001326:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001328:	f7ff f936 	bl	8000598 <HAL_GetTick>
 800132c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132e:	682b      	ldr	r3, [r5, #0]
 8001330:	05da      	lsls	r2, r3, #23
 8001332:	d4d9      	bmi.n	80012e8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001334:	f7ff f930 	bl	8000598 <HAL_GetTick>
 8001338:	1bc0      	subs	r0, r0, r7
 800133a:	2802      	cmp	r0, #2
 800133c:	d9f7      	bls.n	800132e <HAL_RCC_OscConfig+0x20a>
 800133e:	e738      	b.n	80011b2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001340:	2b05      	cmp	r3, #5
 8001342:	d104      	bne.n	800134e <HAL_RCC_OscConfig+0x22a>
 8001344:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	672b      	str	r3, [r5, #112]	; 0x70
 800134c:	e7d0      	b.n	80012f0 <HAL_RCC_OscConfig+0x1cc>
 800134e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001350:	f022 0201 	bic.w	r2, r2, #1
 8001354:	672a      	str	r2, [r5, #112]	; 0x70
 8001356:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001358:	f022 0204 	bic.w	r2, r2, #4
 800135c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1ca      	bne.n	80012f8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001362:	f7ff f919 	bl	8000598 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001366:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800136a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800136c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800136e:	0798      	lsls	r0, r3, #30
 8001370:	d5cb      	bpl.n	800130a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001372:	f7ff f911 	bl	8000598 <HAL_GetTick>
 8001376:	1bc0      	subs	r0, r0, r7
 8001378:	4540      	cmp	r0, r8
 800137a:	d9f7      	bls.n	800136c <HAL_RCC_OscConfig+0x248>
 800137c:	e719      	b.n	80011b2 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800137e:	f7ff f90b 	bl	8000598 <HAL_GetTick>
 8001382:	1bc0      	subs	r0, r0, r7
 8001384:	4540      	cmp	r0, r8
 8001386:	d9bd      	bls.n	8001304 <HAL_RCC_OscConfig+0x1e0>
 8001388:	e713      	b.n	80011b2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800138a:	4d1b      	ldr	r5, [pc, #108]	; (80013f8 <HAL_RCC_OscConfig+0x2d4>)
 800138c:	68ab      	ldr	r3, [r5, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b08      	cmp	r3, #8
 8001394:	f43f aeca 	beq.w	800112c <HAL_RCC_OscConfig+0x8>
 8001398:	4e1b      	ldr	r6, [pc, #108]	; (8001408 <HAL_RCC_OscConfig+0x2e4>)
 800139a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800139c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800139e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a0:	d134      	bne.n	800140c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80013a2:	f7ff f8f9 	bl	8000598 <HAL_GetTick>
 80013a6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a8:	682b      	ldr	r3, [r5, #0]
 80013aa:	0199      	lsls	r1, r3, #6
 80013ac:	d41e      	bmi.n	80013ec <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013ae:	6a22      	ldr	r2, [r4, #32]
 80013b0:	69e3      	ldr	r3, [r4, #28]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013b6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80013ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80013c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c2:	4c0d      	ldr	r4, [pc, #52]	; (80013f8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013c4:	0852      	lsrs	r2, r2, #1
 80013c6:	3a01      	subs	r2, #1
 80013c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80013cc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80013ce:	2301      	movs	r3, #1
 80013d0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80013d2:	f7ff f8e1 	bl	8000598 <HAL_GetTick>
 80013d6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d8:	6823      	ldr	r3, [r4, #0]
 80013da:	019a      	lsls	r2, r3, #6
 80013dc:	f53f aebc 	bmi.w	8001158 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e0:	f7ff f8da 	bl	8000598 <HAL_GetTick>
 80013e4:	1b40      	subs	r0, r0, r5
 80013e6:	2802      	cmp	r0, #2
 80013e8:	d9f6      	bls.n	80013d8 <HAL_RCC_OscConfig+0x2b4>
 80013ea:	e6e2      	b.n	80011b2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ec:	f7ff f8d4 	bl	8000598 <HAL_GetTick>
 80013f0:	1bc0      	subs	r0, r0, r7
 80013f2:	2802      	cmp	r0, #2
 80013f4:	d9d8      	bls.n	80013a8 <HAL_RCC_OscConfig+0x284>
 80013f6:	e6dc      	b.n	80011b2 <HAL_RCC_OscConfig+0x8e>
 80013f8:	40023800 	.word	0x40023800
 80013fc:	42470000 	.word	0x42470000
 8001400:	42470e80 	.word	0x42470e80
 8001404:	40007000 	.word	0x40007000
 8001408:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 800140c:	f7ff f8c4 	bl	8000598 <HAL_GetTick>
 8001410:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001412:	682b      	ldr	r3, [r5, #0]
 8001414:	019b      	lsls	r3, r3, #6
 8001416:	f57f ae9f 	bpl.w	8001158 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800141a:	f7ff f8bd 	bl	8000598 <HAL_GetTick>
 800141e:	1b00      	subs	r0, r0, r4
 8001420:	2802      	cmp	r0, #2
 8001422:	d9f6      	bls.n	8001412 <HAL_RCC_OscConfig+0x2ee>
 8001424:	e6c5      	b.n	80011b2 <HAL_RCC_OscConfig+0x8e>
 8001426:	bf00      	nop

08001428 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001428:	4913      	ldr	r1, [pc, #76]	; (8001478 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800142a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800142c:	688b      	ldr	r3, [r1, #8]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	2b04      	cmp	r3, #4
 8001434:	d003      	beq.n	800143e <HAL_RCC_GetSysClockFreq+0x16>
 8001436:	2b08      	cmp	r3, #8
 8001438:	d003      	beq.n	8001442 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800143a:	4810      	ldr	r0, [pc, #64]	; (800147c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800143c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800143e:	4810      	ldr	r0, [pc, #64]	; (8001480 <HAL_RCC_GetSysClockFreq+0x58>)
 8001440:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001442:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001444:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001446:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001448:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800144c:	bf14      	ite	ne
 800144e:	480c      	ldrne	r0, [pc, #48]	; (8001480 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001450:	480a      	ldreq	r0, [pc, #40]	; (800147c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001452:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001456:	bf18      	it	ne
 8001458:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800145a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800145e:	fba1 0100 	umull	r0, r1, r1, r0
 8001462:	f7fe fec7 	bl	80001f4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <HAL_RCC_GetSysClockFreq+0x50>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800146e:	3301      	adds	r3, #1
 8001470:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001472:	fbb0 f0f3 	udiv	r0, r0, r3
 8001476:	bd08      	pop	{r3, pc}
 8001478:	40023800 	.word	0x40023800
 800147c:	00f42400 	.word	0x00f42400
 8001480:	007a1200 	.word	0x007a1200

08001484 <HAL_RCC_ClockConfig>:
{
 8001484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001488:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800148a:	4604      	mov	r4, r0
 800148c:	b910      	cbnz	r0, 8001494 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800148e:	2001      	movs	r0, #1
 8001490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001494:	4b44      	ldr	r3, [pc, #272]	; (80015a8 <HAL_RCC_ClockConfig+0x124>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	f002 020f 	and.w	r2, r2, #15
 800149c:	428a      	cmp	r2, r1
 800149e:	d328      	bcc.n	80014f2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a0:	6821      	ldr	r1, [r4, #0]
 80014a2:	078f      	lsls	r7, r1, #30
 80014a4:	d42d      	bmi.n	8001502 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a6:	07c8      	lsls	r0, r1, #31
 80014a8:	d440      	bmi.n	800152c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014aa:	4b3f      	ldr	r3, [pc, #252]	; (80015a8 <HAL_RCC_ClockConfig+0x124>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	f002 020f 	and.w	r2, r2, #15
 80014b2:	4295      	cmp	r5, r2
 80014b4:	d366      	bcc.n	8001584 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b6:	6822      	ldr	r2, [r4, #0]
 80014b8:	0751      	lsls	r1, r2, #29
 80014ba:	d46c      	bmi.n	8001596 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014bc:	0713      	lsls	r3, r2, #28
 80014be:	d507      	bpl.n	80014d0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014c0:	4a3a      	ldr	r2, [pc, #232]	; (80015ac <HAL_RCC_ClockConfig+0x128>)
 80014c2:	6921      	ldr	r1, [r4, #16]
 80014c4:	6893      	ldr	r3, [r2, #8]
 80014c6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80014ca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014ce:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014d0:	f7ff ffaa 	bl	8001428 <HAL_RCC_GetSysClockFreq>
 80014d4:	4b35      	ldr	r3, [pc, #212]	; (80015ac <HAL_RCC_ClockConfig+0x128>)
 80014d6:	4a36      	ldr	r2, [pc, #216]	; (80015b0 <HAL_RCC_ClockConfig+0x12c>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014de:	5cd3      	ldrb	r3, [r2, r3]
 80014e0:	40d8      	lsrs	r0, r3
 80014e2:	4b34      	ldr	r3, [pc, #208]	; (80015b4 <HAL_RCC_ClockConfig+0x130>)
 80014e4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80014e6:	200f      	movs	r0, #15
 80014e8:	f7ff f80c 	bl	8000504 <HAL_InitTick>
  return HAL_OK;
 80014ec:	2000      	movs	r0, #0
 80014ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f2:	b2ca      	uxtb	r2, r1
 80014f4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 030f 	and.w	r3, r3, #15
 80014fc:	4299      	cmp	r1, r3
 80014fe:	d1c6      	bne.n	800148e <HAL_RCC_ClockConfig+0xa>
 8001500:	e7ce      	b.n	80014a0 <HAL_RCC_ClockConfig+0x1c>
 8001502:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001504:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001508:	bf1e      	ittt	ne
 800150a:	689a      	ldrne	r2, [r3, #8]
 800150c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001510:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001512:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001514:	bf42      	ittt	mi
 8001516:	689a      	ldrmi	r2, [r3, #8]
 8001518:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 800151c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	68a0      	ldr	r0, [r4, #8]
 8001522:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001526:	4302      	orrs	r2, r0
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	e7bc      	b.n	80014a6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152c:	6862      	ldr	r2, [r4, #4]
 800152e:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <HAL_RCC_ClockConfig+0x128>)
 8001530:	2a01      	cmp	r2, #1
 8001532:	d11d      	bne.n	8001570 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153a:	d0a8      	beq.n	800148e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800153c:	4e1b      	ldr	r6, [pc, #108]	; (80015ac <HAL_RCC_ClockConfig+0x128>)
 800153e:	68b3      	ldr	r3, [r6, #8]
 8001540:	f023 0303 	bic.w	r3, r3, #3
 8001544:	4313      	orrs	r3, r2
 8001546:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001548:	f7ff f826 	bl	8000598 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001550:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001552:	68b3      	ldr	r3, [r6, #8]
 8001554:	6862      	ldr	r2, [r4, #4]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800155e:	d0a4      	beq.n	80014aa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001560:	f7ff f81a 	bl	8000598 <HAL_GetTick>
 8001564:	1bc0      	subs	r0, r0, r7
 8001566:	4540      	cmp	r0, r8
 8001568:	d9f3      	bls.n	8001552 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800156a:	2003      	movs	r0, #3
}
 800156c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001570:	1e91      	subs	r1, r2, #2
 8001572:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001574:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001576:	d802      	bhi.n	800157e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001578:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800157c:	e7dd      	b.n	800153a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157e:	f013 0f02 	tst.w	r3, #2
 8001582:	e7da      	b.n	800153a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001584:	b2ea      	uxtb	r2, r5
 8001586:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	429d      	cmp	r5, r3
 8001590:	f47f af7d 	bne.w	800148e <HAL_RCC_ClockConfig+0xa>
 8001594:	e78f      	b.n	80014b6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001596:	4905      	ldr	r1, [pc, #20]	; (80015ac <HAL_RCC_ClockConfig+0x128>)
 8001598:	68e0      	ldr	r0, [r4, #12]
 800159a:	688b      	ldr	r3, [r1, #8]
 800159c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80015a0:	4303      	orrs	r3, r0
 80015a2:	608b      	str	r3, [r1, #8]
 80015a4:	e78a      	b.n	80014bc <HAL_RCC_ClockConfig+0x38>
 80015a6:	bf00      	nop
 80015a8:	40023c00 	.word	0x40023c00
 80015ac:	40023800 	.word	0x40023800
 80015b0:	08008ded 	.word	0x08008ded
 80015b4:	200001d4 	.word	0x200001d4

080015b8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80015b8:	4b01      	ldr	r3, [pc, #4]	; (80015c0 <HAL_RCC_GetHCLKFreq+0x8>)
 80015ba:	6818      	ldr	r0, [r3, #0]
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	200001d4 	.word	0x200001d4

080015c4 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80015c4:	b084      	sub	sp, #16
 80015c6:	b538      	push	{r3, r4, r5, lr}
 80015c8:	ad05      	add	r5, sp, #20
 80015ca:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80015ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015d0:	2b01      	cmp	r3, #1
{
 80015d2:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80015d4:	d126      	bne.n	8001624 <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80015d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80015d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015dc:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80015de:	68c3      	ldr	r3, [r0, #12]
 80015e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80015e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015e8:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80015ea:	68c3      	ldr	r3, [r0, #12]
 80015ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80015f0:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 80015f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80015f4:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80015f6:	bf02      	ittt	eq
 80015f8:	68c3      	ldreq	r3, [r0, #12]
 80015fa:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 80015fe:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8001600:	f000 fbde 	bl	8001dc0 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 8001604:	9b08      	ldr	r3, [sp, #32]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d107      	bne.n	800161a <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800160a:	68a3      	ldr	r3, [r4, #8]
 800160c:	f043 0306 	orr.w	r3, r3, #6
 8001610:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001612:	68a3      	ldr	r3, [r4, #8]
 8001614:	f043 0320 	orr.w	r3, r3, #32
 8001618:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 800161a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800161e:	2000      	movs	r0, #0
 8001620:	b004      	add	sp, #16
 8001622:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001624:	68c3      	ldr	r3, [r0, #12]
 8001626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800162a:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 800162c:	f000 fbc8 	bl	8001dc0 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8001630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001634:	63a3      	str	r3, [r4, #56]	; 0x38
 8001636:	e7e5      	b.n	8001604 <USB_CoreInit+0x40>

08001638 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001638:	6883      	ldr	r3, [r0, #8]
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001640:	2000      	movs	r0, #0
 8001642:	4770      	bx	lr

08001644 <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001644:	6883      	ldr	r3, [r0, #8]
 8001646:	f023 0301 	bic.w	r3, r3, #1
 800164a:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 800164c:	2000      	movs	r0, #0
 800164e:	4770      	bx	lr

08001650 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8001650:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8001652:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8001654:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8001656:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800165a:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 800165c:	d108      	bne.n	8001670 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 800165e:	68c3      	ldr	r3, [r0, #12]
 8001660:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001664:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 8001666:	2032      	movs	r0, #50	; 0x32
 8001668:	f7fe ff9c 	bl	80005a4 <HAL_Delay>
  
  return HAL_OK;
}
 800166c:	2000      	movs	r0, #0
 800166e:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 8001670:	2900      	cmp	r1, #0
 8001672:	d1f8      	bne.n	8001666 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8001674:	68c3      	ldr	r3, [r0, #12]
 8001676:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800167a:	60c3      	str	r3, [r0, #12]
 800167c:	e7f3      	b.n	8001666 <USB_SetCurrentMode+0x16>
	...

08001680 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001680:	b084      	sub	sp, #16
 8001682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001686:	4604      	mov	r4, r0
 8001688:	a807      	add	r0, sp, #28
 800168a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800168e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8001690:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001692:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001694:	4688      	mov	r8, r1
  if (cfg.vbus_sensing_enable == 0U)
 8001696:	b9a6      	cbnz	r6, 80016c2 <USB_DevInit+0x42>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001698:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800169c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80016a4:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80016a8:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80016ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80016ae:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80016b0:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80016b4:	d15e      	bne.n	8001774 <USB_DevInit+0xf4>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80016b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80016b8:	b939      	cbnz	r1, 80016ca <USB_DevInit+0x4a>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80016ba:	4620      	mov	r0, r4
 80016bc:	f000 f89e 	bl	80017fc <USB_SetDevSpeed>
 80016c0:	e007      	b.n	80016d2 <USB_DevInit+0x52>
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80016c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016c6:	63a3      	str	r3, [r4, #56]	; 0x38
 80016c8:	e7e9      	b.n	800169e <USB_DevInit+0x1e>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 80016ca:	4619      	mov	r1, r3
 80016cc:	4620      	mov	r0, r4
 80016ce:	f000 f895 	bl	80017fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 80016d2:	2110      	movs	r1, #16
 80016d4:	4620      	mov	r0, r4
 80016d6:	f000 f86f 	bl	80017b8 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80016da:	4620      	mov	r0, r4
 80016dc:	f000 f87e 	bl	80017dc <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80016e0:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80016e2:	f04f 32ff 	mov.w	r2, #4294967295
  USBx_DEVICE->DIEPMSK = 0U;
 80016e6:	612b      	str	r3, [r5, #16]
 80016e8:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0U;
 80016ea:	616b      	str	r3, [r5, #20]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80016ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80016f0:	61aa      	str	r2, [r5, #24]
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 80016f2:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0U;
 80016f6:	61eb      	str	r3, [r5, #28]
 80016f8:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80016fc:	4543      	cmp	r3, r8
 80016fe:	d13b      	bne.n	8001778 <USB_DevInit+0xf8>
 8001700:	2100      	movs	r1, #0
 8001702:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
 8001706:	4608      	mov	r0, r1
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8001708:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 800170c:	f04f 0cff 	mov.w	ip, #255	; 0xff
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001710:	428b      	cmp	r3, r1
 8001712:	d13e      	bne.n	8001792 <USB_DevInit+0x112>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001714:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 8001716:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800171c:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 800171e:	d108      	bne.n	8001732 <USB_DevInit+0xb2>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <USB_DevInit+0x130>)
 8001722:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8001724:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172a:	f043 0303 	orr.w	r3, r3, #3
 800172e:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8001730:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001736:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800173a:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 800173c:	b91f      	cbnz	r7, 8001746 <USB_DevInit+0xc6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 800173e:	69a3      	ldr	r3, [r4, #24]
 8001740:	f043 0310 	orr.w	r3, r3, #16
 8001744:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8001746:	69a2      	ldr	r2, [r4, #24]
 8001748:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <USB_DevInit+0x134>)
 800174a:	4313      	orrs	r3, r2
 800174c:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 800174e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001750:	b11b      	cbz	r3, 800175a <USB_DevInit+0xda>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8001752:	69a3      	ldr	r3, [r4, #24]
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 800175a:	2e01      	cmp	r6, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 800175c:	bf01      	itttt	eq
 800175e:	69a3      	ldreq	r3, [r4, #24]
 8001760:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8001764:	f043 0304 	orreq.w	r3, r3, #4
 8001768:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 800176a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800176e:	2000      	movs	r0, #0
 8001770:	b004      	add	sp, #16
 8001772:	4770      	bx	lr
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8001774:	2103      	movs	r1, #3
 8001776:	e7a0      	b.n	80016ba <USB_DevInit+0x3a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001778:	f8d2 c000 	ldr.w	ip, [r2]
 800177c:	f1bc 0f00 	cmp.w	ip, #0
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8001780:	bfb4      	ite	lt
 8001782:	6010      	strlt	r0, [r2, #0]
      USBx_INEP(i)->DIEPCTL = 0U;
 8001784:	6011      	strge	r1, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001786:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8001788:	6111      	str	r1, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 800178a:	f8c2 e008 	str.w	lr, [r2, #8]
 800178e:	3220      	adds	r2, #32
 8001790:	e7b4      	b.n	80016fc <USB_DevInit+0x7c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001792:	f8d2 8000 	ldr.w	r8, [r2]
 8001796:	f1b8 0f00 	cmp.w	r8, #0
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800179a:	bfb4      	ite	lt
 800179c:	f8c2 e000 	strlt.w	lr, [r2]
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80017a0:	6010      	strge	r0, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80017a2:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80017a4:	6110      	str	r0, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 80017a6:	f8c2 c008 	str.w	ip, [r2, #8]
 80017aa:	3220      	adds	r2, #32
 80017ac:	e7b0      	b.n	8001710 <USB_DevInit+0x90>
 80017ae:	bf00      	nop
 80017b0:	00800100 	.word	0x00800100
 80017b4:	803c3800 	.word	0x803c3800

080017b8 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80017b8:	0189      	lsls	r1, r1, #6
 80017ba:	f041 0120 	orr.w	r1, r1, #32
 80017be:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <USB_FlushTxFifo+0x20>)
 80017c0:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80017c2:	3a01      	subs	r2, #1
 80017c4:	d005      	beq.n	80017d2 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80017c6:	6903      	ldr	r3, [r0, #16]
 80017c8:	f013 0320 	ands.w	r3, r3, #32
 80017cc:	d1f9      	bne.n	80017c2 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 80017ce:	4618      	mov	r0, r3
 80017d0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80017d2:	2003      	movs	r0, #3
}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	00030d41 	.word	0x00030d41

080017dc <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80017dc:	2310      	movs	r3, #16
 80017de:	4a06      	ldr	r2, [pc, #24]	; (80017f8 <USB_FlushRxFifo+0x1c>)
 80017e0:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80017e2:	3a01      	subs	r2, #1
 80017e4:	d005      	beq.n	80017f2 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80017e6:	6903      	ldr	r3, [r0, #16]
 80017e8:	f013 0310 	ands.w	r3, r3, #16
 80017ec:	d1f9      	bne.n	80017e2 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 80017ee:	4618      	mov	r0, r3
 80017f0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80017f2:	2003      	movs	r0, #3
}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	00030d41 	.word	0x00030d41

080017fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 80017fc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001800:	4319      	orrs	r1, r3
 8001802:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8001806:	2000      	movs	r0, #0
 8001808:	4770      	bx	lr

0800180a <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800180a:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 800180e:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 8001812:	f010 0006 	ands.w	r0, r0, #6
 8001816:	d012      	beq.n	800183e <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8001818:	6893      	ldr	r3, [r2, #8]
 800181a:	f003 0306 	and.w	r3, r3, #6
 800181e:	2b02      	cmp	r3, #2
 8001820:	d00c      	beq.n	800183c <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8001822:	6893      	ldr	r3, [r2, #8]
 8001824:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8001828:	2b06      	cmp	r3, #6
 800182a:	d007      	beq.n	800183c <USB_GetDevSpeed+0x32>
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800182c:	6893      	ldr	r3, [r2, #8]
 800182e:	f003 0306 	and.w	r3, r3, #6
 8001832:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 8001834:	bf14      	ite	ne
 8001836:	2000      	movne	r0, #0
 8001838:	2002      	moveq	r0, #2
 800183a:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 800183c:	2003      	movs	r0, #3
  }
  
  return speed;
}
 800183e:	4770      	bx	lr

08001840 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8001840:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 8001842:	784b      	ldrb	r3, [r1, #1]
 8001844:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8001846:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 800184a:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 800184e:	2b01      	cmp	r3, #1
 8001850:	d11b      	bne.n	800188a <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8001852:	40a3      	lsls	r3, r4
 8001854:	b29b      	uxth	r3, r3
 8001856:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001858:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 800185c:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800185e:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	0412      	lsls	r2, r2, #16
 8001866:	d40e      	bmi.n	8001886 <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8001868:	688a      	ldr	r2, [r1, #8]
 800186a:	78c8      	ldrb	r0, [r1, #3]
 800186c:	681d      	ldr	r5, [r3, #0]
 800186e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001872:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001876:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800187a:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 800187e:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8001882:	4328      	orrs	r0, r5
 8001884:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8001886:	2000      	movs	r0, #0
 8001888:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 800188a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800188e:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001890:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8001894:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001896:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 800189a:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800189c:	6803      	ldr	r3, [r0, #0]
 800189e:	041b      	lsls	r3, r3, #16
 80018a0:	d4f1      	bmi.n	8001886 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80018a2:	688b      	ldr	r3, [r1, #8]
 80018a4:	78c9      	ldrb	r1, [r1, #3]
 80018a6:	6802      	ldr	r2, [r0, #0]
 80018a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80018b8:	4313      	orrs	r3, r2
 80018ba:	6003      	str	r3, [r0, #0]
 80018bc:	e7e3      	b.n	8001886 <USB_ActivateEndpoint+0x46>

080018be <USB_DeactivateEndpoint>:
 80018be:	f000 b801 	b.w	80018c4 <USB_DeactivateDedicatedEndpoint>
	...

080018c4 <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80018c4:	b570      	push	{r4, r5, r6, lr}
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 80018c6:	784b      	ldrb	r3, [r1, #1]
 80018c8:	2b01      	cmp	r3, #1
{
 80018ca:	460e      	mov	r6, r1
 80018cc:	4605      	mov	r5, r0
 80018ce:	7809      	ldrb	r1, [r1, #0]
 80018d0:	f04f 0320 	mov.w	r3, #32
  if (ep->is_in == 1U)
 80018d4:	d126      	bne.n	8001924 <USB_DeactivateDedicatedEndpoint+0x60>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 80018d6:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 80018da:	fb13 2301 	smlabb	r3, r3, r1, r2
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018e4:	601a      	str	r2, [r3, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80018e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ea:	601a      	str	r2, [r3, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 80018ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <USB_DeactivateDedicatedEndpoint+0xac>)
    
    do
    {
      if (++count > 200000U)
 80018f4:	3a01      	subs	r2, #1
 80018f6:	d101      	bne.n	80018fc <USB_DeactivateDedicatedEndpoint+0x38>
      {
        return HAL_TIMEOUT;
 80018f8:	2003      	movs	r0, #3
 80018fa:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 80018fc:	689c      	ldr	r4, [r3, #8]
 80018fe:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 8001902:	d1f7      	bne.n	80018f4 <USB_DeactivateDedicatedEndpoint+0x30>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8001904:	2110      	movs	r1, #16
 8001906:	4628      	mov	r0, r5
 8001908:	f7ff ff56 	bl	80017b8 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 800190c:	7831      	ldrb	r1, [r6, #0]
 800190e:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 8001912:	2301      	movs	r3, #1
 8001914:	408b      	lsls	r3, r1
 8001916:	b29b      	uxth	r3, r3
 8001918:	ea22 0303 	bic.w	r3, r2, r3
 800191c:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
  }
  return HAL_OK;
 8001920:	4620      	mov	r0, r4
 8001922:	bd70      	pop	{r4, r5, r6, pc}
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8001924:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8001928:	fb13 2301 	smlabb	r3, r3, r1, r2
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001932:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001934:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001938:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 800193a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <USB_DeactivateDedicatedEndpoint+0xac>)
      if (++count > 200000U)
 8001942:	3a01      	subs	r2, #1
 8001944:	d0d8      	beq.n	80018f8 <USB_DeactivateDedicatedEndpoint+0x34>
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8001946:	6898      	ldr	r0, [r3, #8]
 8001948:	f010 0010 	ands.w	r0, r0, #16
 800194c:	d1f9      	bne.n	8001942 <USB_DeactivateDedicatedEndpoint+0x7e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800194e:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8001952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001956:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 800195a:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 800195e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001962:	408a      	lsls	r2, r1
 8001964:	ea23 0302 	bic.w	r3, r3, r2
 8001968:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c

}
 800196c:	bd70      	pop	{r4, r5, r6, pc}
 800196e:	bf00      	nop
 8001970:	00030d41 	.word	0x00030d41

08001974 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8001974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8001976:	784b      	ldrb	r3, [r1, #1]
 8001978:	780c      	ldrb	r4, [r1, #0]
 800197a:	2b01      	cmp	r3, #1
 800197c:	694b      	ldr	r3, [r1, #20]
 800197e:	d177      	bne.n	8001a70 <USB_EPStartXfer+0xfc>
 8001980:	2620      	movs	r6, #32
 8001982:	f500 6510 	add.w	r5, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001986:	fb16 5404 	smlabb	r4, r6, r4, r5
 800198a:	6926      	ldr	r6, [r4, #16]
    if (ep->xfer_len == 0U)
 800198c:	2b00      	cmp	r3, #0
 800198e:	d138      	bne.n	8001a02 <USB_EPStartXfer+0x8e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001990:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8001994:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8001998:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 800199a:	6926      	ldr	r6, [r4, #16]
 800199c:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 80019a0:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80019a2:	6926      	ldr	r6, [r4, #16]
 80019a4:	0cf6      	lsrs	r6, r6, #19
 80019a6:	04f6      	lsls	r6, r6, #19
 80019a8:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 80019aa:	2a01      	cmp	r2, #1
 80019ac:	d150      	bne.n	8001a50 <USB_EPStartXfer+0xdc>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80019ae:	780c      	ldrb	r4, [r1, #0]
 80019b0:	690e      	ldr	r6, [r1, #16]
 80019b2:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 80019b6:	6166      	str	r6, [r4, #20]
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80019b8:	78ce      	ldrb	r6, [r1, #3]
 80019ba:	2e01      	cmp	r6, #1
 80019bc:	d10f      	bne.n	80019de <USB_EPStartXfer+0x6a>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80019be:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 80019c2:	780f      	ldrb	r7, [r1, #0]
 80019c4:	f414 7f80 	tst.w	r4, #256	; 0x100
 80019c8:	f04f 0420 	mov.w	r4, #32
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80019cc:	fb14 5407 	smlabb	r4, r4, r7, r5
 80019d0:	6827      	ldr	r7, [r4, #0]
 80019d2:	bf0c      	ite	eq
 80019d4:	f047 5700 	orreq.w	r7, r7, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80019d8:	f047 5780 	orrne.w	r7, r7, #268435456	; 0x10000000
 80019dc:	6027      	str	r7, [r4, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80019de:	780f      	ldrb	r7, [r1, #0]
 80019e0:	eb05 1547 	add.w	r5, r5, r7, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 80019e4:	2e01      	cmp	r6, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80019e6:	682c      	ldr	r4, [r5, #0]
 80019e8:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80019ec:	602c      	str	r4, [r5, #0]
    if (ep->type == EP_TYPE_ISOC)
 80019ee:	d105      	bne.n	80019fc <USB_EPStartXfer+0x88>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 80019f0:	9200      	str	r2, [sp, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	463a      	mov	r2, r7
 80019f6:	68c9      	ldr	r1, [r1, #12]
 80019f8:	f000 f8ef 	bl	8001bda <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 80019fc:	2000      	movs	r0, #0
 80019fe:	b003      	add	sp, #12
 8001a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001a02:	0cf6      	lsrs	r6, r6, #19
 8001a04:	04f6      	lsls	r6, r6, #19
 8001a06:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001a08:	6926      	ldr	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8001a0a:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001a0c:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8001a10:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8001a14:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8001a16:	19de      	adds	r6, r3, r7
 8001a18:	3e01      	subs	r6, #1
 8001a1a:	fbb6 f7f7 	udiv	r7, r6, r7
 8001a1e:	4e37      	ldr	r6, [pc, #220]	; (8001afc <USB_EPStartXfer+0x188>)
 8001a20:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8001a24:	ea06 46c7 	and.w	r6, r6, r7, lsl #19
 8001a28:	ea46 060e 	orr.w	r6, r6, lr
 8001a2c:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8001a2e:	6927      	ldr	r7, [r4, #16]
 8001a30:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8001a34:	433e      	orrs	r6, r7
 8001a36:	6126      	str	r6, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8001a38:	78ce      	ldrb	r6, [r1, #3]
 8001a3a:	2e01      	cmp	r6, #1
 8001a3c:	d15a      	bne.n	8001af4 <USB_EPStartXfer+0x180>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8001a3e:	6926      	ldr	r6, [r4, #16]
 8001a40:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 8001a44:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8001a46:	6926      	ldr	r6, [r4, #16]
 8001a48:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8001a4c:	6126      	str	r6, [r4, #16]
 8001a4e:	e7ac      	b.n	80019aa <USB_EPStartXfer+0x36>
      if (ep->type != EP_TYPE_ISOC)
 8001a50:	78ce      	ldrb	r6, [r1, #3]
 8001a52:	2e01      	cmp	r6, #1
 8001a54:	d0b3      	beq.n	80019be <USB_EPStartXfer+0x4a>
        if (ep->xfer_len > 0U)
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0ae      	beq.n	80019b8 <USB_EPStartXfer+0x44>
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8001a5a:	f891 e000 	ldrb.w	lr, [r1]
 8001a5e:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 8001a62:	2401      	movs	r4, #1
 8001a64:	fa04 f40e 	lsl.w	r4, r4, lr
 8001a68:	433c      	orrs	r4, r7
 8001a6a:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 8001a6e:	e7a3      	b.n	80019b8 <USB_EPStartXfer+0x44>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001a70:	f500 6530 	add.w	r5, r0, #2816	; 0xb00
 8001a74:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8001a78:	6925      	ldr	r5, [r4, #16]
 8001a7a:	0ced      	lsrs	r5, r5, #19
 8001a7c:	04ed      	lsls	r5, r5, #19
 8001a7e:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8001a80:	6925      	ldr	r5, [r4, #16]
 8001a82:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8001a86:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8001a8a:	6125      	str	r5, [r4, #16]
 8001a8c:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 8001a8e:	b9fb      	cbnz	r3, 8001ad0 <USB_EPStartXfer+0x15c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8001a90:	6923      	ldr	r3, [r4, #16]
 8001a92:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8001a96:	431d      	orrs	r5, r3
 8001a98:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8001a9a:	6923      	ldr	r3, [r4, #16]
 8001a9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001aa0:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 8001aa2:	2a01      	cmp	r2, #1
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8001aa4:	bf04      	itt	eq
 8001aa6:	68cb      	ldreq	r3, [r1, #12]
 8001aa8:	6163      	streq	r3, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 8001aaa:	78cb      	ldrb	r3, [r1, #3]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d10a      	bne.n	8001ac6 <USB_EPStartXfer+0x152>
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8001ab0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8001ab4:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8001ab8:	6823      	ldr	r3, [r4, #0]
 8001aba:	bf0c      	ite	eq
 8001abc:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8001ac0:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	6023      	str	r3, [r4, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8001ac6:	6823      	ldr	r3, [r4, #0]
 8001ac8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001acc:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8001ace:	e795      	b.n	80019fc <USB_EPStartXfer+0x88>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8001ad0:	4e0a      	ldr	r6, [pc, #40]	; (8001afc <USB_EPStartXfer+0x188>)
 8001ad2:	6927      	ldr	r7, [r4, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8001ad4:	442b      	add	r3, r5
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8001adc:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8001ae0:	433e      	orrs	r6, r7
 8001ae2:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	6926      	ldr	r6, [r4, #16]
 8001ae8:	435d      	muls	r5, r3
 8001aea:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8001aee:	4335      	orrs	r5, r6
 8001af0:	6125      	str	r5, [r4, #16]
 8001af2:	e7d6      	b.n	8001aa2 <USB_EPStartXfer+0x12e>
    if (dma == 1U)
 8001af4:	2a01      	cmp	r2, #1
 8001af6:	d1ae      	bne.n	8001a56 <USB_EPStartXfer+0xe2>
 8001af8:	e759      	b.n	80019ae <USB_EPStartXfer+0x3a>
 8001afa:	bf00      	nop
 8001afc:	1ff80000 	.word	0x1ff80000

08001b00 <USB_EP0StartXfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  /* IN endpoint */
  if (ep->is_in == 1U)
 8001b00:	784b      	ldrb	r3, [r1, #1]
 8001b02:	2b01      	cmp	r3, #1
{
 8001b04:	b570      	push	{r4, r5, r6, lr}
 8001b06:	780b      	ldrb	r3, [r1, #0]
 8001b08:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1U)
 8001b0a:	d143      	bne.n	8001b94 <USB_EP0StartXfer+0x94>
 8001b0c:	2420      	movs	r4, #32
 8001b0e:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001b12:	fb14 6303 	smlabb	r3, r4, r3, r6
 8001b16:	691c      	ldr	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8001b18:	b9cd      	cbnz	r5, 8001b4e <USB_EP0StartXfer+0x4e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001b1a:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001b1e:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001b22:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001b24:	691c      	ldr	r4, [r3, #16]
 8001b26:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001b2a:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8001b2c:	691c      	ldr	r4, [r3, #16]
 8001b2e:	0ce4      	lsrs	r4, r4, #19
 8001b30:	04e4      	lsls	r4, r4, #19
 8001b32:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8001b34:	780d      	ldrb	r5, [r1, #0]
 8001b36:	eb06 1345 	add.w	r3, r6, r5, lsl #5
    
    if (dma == 1)
 8001b3a:	2a01      	cmp	r2, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8001b3c:	681c      	ldr	r4, [r3, #0]
 8001b3e:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8001b42:	601c      	str	r4, [r3, #0]
    if (dma == 1)
 8001b44:	d11b      	bne.n	8001b7e <USB_EP0StartXfer+0x7e>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8001b46:	690a      	ldr	r2, [r1, #16]
 8001b48:	615a      	str	r2, [r3, #20]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001b4e:	0ce4      	lsrs	r4, r4, #19
 8001b50:	04e4      	lsls	r4, r4, #19
 8001b52:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001b54:	691c      	ldr	r4, [r3, #16]
 8001b56:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001b5a:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001b5e:	611c      	str	r4, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8001b60:	688c      	ldr	r4, [r1, #8]
 8001b62:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8001b64:	bf88      	it	hi
 8001b66:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001b68:	691c      	ldr	r4, [r3, #16]
 8001b6a:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001b6e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8001b70:	694c      	ldr	r4, [r1, #20]
 8001b72:	691d      	ldr	r5, [r3, #16]
 8001b74:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8001b78:	432c      	orrs	r4, r5
 8001b7a:	611c      	str	r4, [r3, #16]
 8001b7c:	e7da      	b.n	8001b34 <USB_EP0StartXfer+0x34>
      if (ep->xfer_len > 0U)
 8001b7e:	694b      	ldr	r3, [r1, #20]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0e2      	beq.n	8001b4a <USB_EP0StartXfer+0x4a>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8001b84:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8001b88:	2301      	movs	r3, #1
 8001b8a:	40ab      	lsls	r3, r5
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8001b92:	e7da      	b.n	8001b4a <USB_EP0StartXfer+0x4a>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001b94:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8001b98:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8001b9c:	6903      	ldr	r3, [r0, #16]
 8001b9e:	0cdb      	lsrs	r3, r3, #19
 8001ba0:	04db      	lsls	r3, r3, #19
 8001ba2:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8001ba4:	6903      	ldr	r3, [r0, #16]
 8001ba6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8001baa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8001bae:	6103      	str	r3, [r0, #16]
 8001bb0:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0U)
 8001bb2:	b105      	cbz	r5, 8001bb6 <USB_EP0StartXfer+0xb6>
      ep->xfer_len = ep->maxpacket;
 8001bb4:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8001bb6:	6904      	ldr	r4, [r0, #16]
 8001bb8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001bbc:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8001bbe:	6904      	ldr	r4, [r0, #16]
 8001bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc4:	4323      	orrs	r3, r4
    if (dma == 1U)
 8001bc6:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8001bc8:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8001bca:	bf04      	itt	eq
 8001bcc:	68cb      	ldreq	r3, [r1, #12]
 8001bce:	6143      	streq	r3, [r0, #20]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8001bd0:	6803      	ldr	r3, [r0, #0]
 8001bd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001bd6:	6003      	str	r3, [r0, #0]
 8001bd8:	e7b7      	b.n	8001b4a <USB_EP0StartXfer+0x4a>

08001bda <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8001bda:	b510      	push	{r4, lr}
 8001bdc:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8001be0:	b94c      	cbnz	r4, 8001bf6 <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 8001be2:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8001be4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8001be8:	f023 0303 	bic.w	r3, r3, #3
 8001bec:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8001bf0:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 8001bf2:	4299      	cmp	r1, r3
 8001bf4:	d101      	bne.n	8001bfa <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8001bfa:	f851 0b04 	ldr.w	r0, [r1], #4
 8001bfe:	6010      	str	r0, [r2, #0]
 8001c00:	e7f7      	b.n	8001bf2 <USB_WritePacket+0x18>

08001c02 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8001c02:	3203      	adds	r2, #3
 8001c04:	f022 0203 	bic.w	r2, r2, #3
 8001c08:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8001c0a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8001c0e:	4291      	cmp	r1, r2
 8001c10:	d101      	bne.n	8001c16 <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 8001c12:	4608      	mov	r0, r1
 8001c14:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8001c16:	6803      	ldr	r3, [r0, #0]
 8001c18:	f841 3b04 	str.w	r3, [r1], #4
 8001c1c:	e7f7      	b.n	8001c0e <USB_ReadPacket+0xc>

08001c1e <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8001c1e:	784b      	ldrb	r3, [r1, #1]
 8001c20:	780a      	ldrb	r2, [r1, #0]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	f04f 0320 	mov.w	r3, #32
 8001c28:	d10b      	bne.n	8001c42 <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8001c2a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8001c2e:	fb13 0002 	smlabb	r0, r3, r2, r0
 8001c32:	6803      	ldr	r3, [r0, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0b      	blt.n	8001c50 <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8001c38:	6803      	ldr	r3, [r0, #0]
 8001c3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001c3e:	6003      	str	r3, [r0, #0]
 8001c40:	e006      	b.n	8001c50 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8001c42:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8001c46:	fb13 0002 	smlabb	r0, r3, r2, r0
 8001c4a:	6803      	ldr	r3, [r0, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	daf3      	bge.n	8001c38 <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8001c50:	6803      	ldr	r3, [r0, #0]
 8001c52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c56:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8001c58:	2000      	movs	r0, #0
 8001c5a:	4770      	bx	lr

08001c5c <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8001c5c:	784b      	ldrb	r3, [r1, #1]
 8001c5e:	780a      	ldrb	r2, [r1, #0]
 8001c60:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c62:	bf0c      	ite	eq
 8001c64:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c68:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8001c6c:	2320      	movs	r3, #32
 8001c6e:	fb13 0002 	smlabb	r0, r3, r2, r0
 8001c72:	6803      	ldr	r3, [r0, #0]
 8001c74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c78:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8001c7a:	78cb      	ldrb	r3, [r1, #3]
 8001c7c:	3b02      	subs	r3, #2
 8001c7e:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8001c80:	bf9e      	ittt	ls
 8001c82:	6803      	ldrls	r3, [r0, #0]
 8001c84:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8001c88:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	4770      	bx	lr

08001c8e <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8001c8e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001c92:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c96:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8001c9a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001c9e:	0109      	lsls	r1, r1, #4
 8001ca0:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8001ca4:	4319      	orrs	r1, r3
 8001ca6:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 8001caa:	2000      	movs	r0, #0
 8001cac:	4770      	bx	lr

08001cae <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8001cae:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8001cb0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001cb4:	f023 0302 	bic.w	r3, r3, #2
 8001cb8:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8001cbc:	2003      	movs	r0, #3
 8001cbe:	f7fe fc71 	bl	80005a4 <HAL_Delay>
  
  return HAL_OK;  
}
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	bd08      	pop	{r3, pc}

08001cc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8001cc6:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8001cc8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001ccc:	f043 0302 	orr.w	r3, r3, #2
 8001cd0:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8001cd4:	2003      	movs	r0, #3
 8001cd6:	f7fe fc65 	bl	80005a4 <HAL_Delay>
  
  return HAL_OK;  
}
 8001cda:	2000      	movs	r0, #0
 8001cdc:	bd08      	pop	{r3, pc}

08001cde <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8001cde:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8001ce0:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8001ce2:	4010      	ands	r0, r2
 8001ce4:	4770      	bx	lr

08001ce6 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8001ce6:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8001cea:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8001cee:	69c0      	ldr	r0, [r0, #28]
 8001cf0:	4018      	ands	r0, r3
  return ((v & 0xffff0000U) >> 16U);
}
 8001cf2:	0c00      	lsrs	r0, r0, #16
 8001cf4:	4770      	bx	lr

08001cf6 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8001cf6:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8001cfa:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8001cfe:	69c0      	ldr	r0, [r0, #28]
 8001d00:	4018      	ands	r0, r3
  return ((v & 0xFFFFU));
}
 8001d02:	b280      	uxth	r0, r0
 8001d04:	4770      	bx	lr

08001d06 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8001d06:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8001d0a:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 8001d0e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8001d12:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8001d14:	6940      	ldr	r0, [r0, #20]
  return v;
}
 8001d16:	4010      	ands	r0, r2
 8001d18:	4770      	bx	lr

08001d1a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8001d1a:	b510      	push	{r4, lr}
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8001d1c:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8001d20:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8001d24:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8001d28:	40cb      	lsrs	r3, r1
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8001d2a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8001d2e:	01db      	lsls	r3, r3, #7
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8001d30:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	4323      	orrs	r3, r4
  return v;
}
 8001d36:	4018      	ands	r0, r3
 8001d38:	bd10      	pop	{r4, pc}

08001d3a <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8001d3a:	6940      	ldr	r0, [r0, #20]
}
 8001d3c:	f000 0001 	and.w	r0, r0, #1
 8001d40:	4770      	bx	lr

08001d42 <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8001d42:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8001d46:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d4a:	f023 0307 	bic.w	r3, r3, #7
 8001d4e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8001d52:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	f002 0206 	and.w	r2, r2, #6
 8001d5c:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8001d5e:	bf02      	ittt	eq
 8001d60:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8001d64:	f042 0203 	orreq.w	r2, r2, #3
 8001d68:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d72:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8001d74:	2000      	movs	r0, #0
 8001d76:	4770      	bx	lr

08001d78 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8001d78:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8001d7a:	2400      	movs	r4, #0
 8001d7c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001d80:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8001d84:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001d88:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8001d8c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8001d90:	f044 0418 	orr.w	r4, r4, #24
 8001d94:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8001d98:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 8001d9c:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8001d9e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8001da2:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8001da6:	bf08      	it	eq
 8001da8:	f04f 2380 	moveq.w	r3, #2147516416	; 0x80008000
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8001dac:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8001db0:	bf04      	itt	eq
 8001db2:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8001db6:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 8001dba:	2000      	movs	r0, #0
 8001dbc:	bd10      	pop	{r4, pc}
	...

08001dc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	d101      	bne.n	8001dca <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8001dc6:	2003      	movs	r0, #3
 8001dc8:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001dca:	6902      	ldr	r2, [r0, #16]
 8001dcc:	2a00      	cmp	r2, #0
 8001dce:	daf8      	bge.n	8001dc2 <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001dd0:	6903      	ldr	r3, [r0, #16]
 8001dd2:	4a06      	ldr	r2, [pc, #24]	; (8001dec <USB_CoreReset+0x2c>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8001dda:	3a01      	subs	r2, #1
 8001ddc:	d0f3      	beq.n	8001dc6 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001dde:	6903      	ldr	r3, [r0, #16]
 8001de0:	f013 0301 	ands.w	r3, r3, #1
 8001de4:	d1f9      	bne.n	8001dda <USB_CoreReset+0x1a>
  
  return HAL_OK;
 8001de6:	4618      	mov	r0, r3
}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	00030d41 	.word	0x00030d41

08001df0 <MX_USB_DEVICE_Init>:
#include "usbd_rndis_if.h"

USBD_HandleTypeDef hUsbDeviceFS;

void MX_USB_DEVICE_Init(void)
{
 8001df0:	b510      	push	{r4, lr}
	USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8001df2:	4c0c      	ldr	r4, [pc, #48]	; (8001e24 <MX_USB_DEVICE_Init+0x34>)
 8001df4:	490c      	ldr	r1, [pc, #48]	; (8001e28 <MX_USB_DEVICE_Init+0x38>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	4620      	mov	r0, r4
 8001dfa:	f001 f979 	bl	80030f0 <USBD_Init>

//	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC);
//	USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
//	USBD_COMPOSITE_RegisterClass(&hUsbDeviceFS, 0x08, 0x06, 0x50);

	USBD_RegisterClass(&hUsbDeviceFS, &USBD_RNDIS);
 8001dfe:	490b      	ldr	r1, [pc, #44]	; (8001e2c <MX_USB_DEVICE_Init+0x3c>)
 8001e00:	4620      	mov	r0, r4
 8001e02:	f001 f98a 	bl	800311a <USBD_RegisterClass>
	USBD_RNDIS_RegisterInterface(&hUsbDeviceFS, &USBD_RNDIS_Interface_fops_FS);
 8001e06:	490a      	ldr	r1, [pc, #40]	; (8001e30 <MX_USB_DEVICE_Init+0x40>)
 8001e08:	4620      	mov	r0, r4
 8001e0a:	f001 f92a 	bl	8003062 <USBD_RNDIS_RegisterInterface>
	USBD_COMPOSITE_RegisterClass(&hUsbDeviceFS, 0xE0, 0x01, 0x03);
 8001e0e:	4620      	mov	r0, r4
 8001e10:	2303      	movs	r3, #3
 8001e12:	2201      	movs	r2, #1
 8001e14:	21e0      	movs	r1, #224	; 0xe0
 8001e16:	f000 fefd 	bl	8002c14 <USBD_COMPOSITE_RegisterClass>

	USBD_Start(&hUsbDeviceFS);
 8001e1a:	4620      	mov	r0, r4

}
 8001e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USBD_Start(&hUsbDeviceFS);
 8001e20:	f001 b982 	b.w	8003128 <USBD_Start>
 8001e24:	20005778 	.word	0x20005778
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	200000ac 	.word	0x200000ac
 8001e30:	2000003c 	.word	0x2000003c

08001e34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001e34:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8001e36:	6803      	ldr	r3, [r0, #0]
 8001e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8001e3c:	b086      	sub	sp, #24
  if(pcdHandle->Instance==USB_OTG_FS)
 8001e3e:	d12d      	bne.n	8001e9c <HAL_PCD_MspInit+0x68>
	    PA8     ------> USB_OTG_FS_SOF
	    PA9     ------> USB_OTG_FS_VBUS
	    PA11     ------> USB_OTG_FS_DM
	    PA12     ------> USB_OTG_FS_DP
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001e40:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001e44:	9301      	str	r3, [sp, #4]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2400      	movs	r4, #0
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	9302      	str	r3, [sp, #8]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4c:	a901      	add	r1, sp, #4
	    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e4e:	230a      	movs	r3, #10
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	4813      	ldr	r0, [pc, #76]	; (8001ea0 <HAL_PCD_MspInit+0x6c>)
	    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e52:	9305      	str	r3, [sp, #20]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	9403      	str	r4, [sp, #12]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	9404      	str	r4, [sp, #16]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e58:	f7fe fc2c 	bl	80006b4 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e60:	a901      	add	r1, sp, #4
 8001e62:	480f      	ldr	r0, [pc, #60]	; (8001ea0 <HAL_PCD_MspInit+0x6c>)
	    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e64:	9301      	str	r3, [sp, #4]
	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e66:	9402      	str	r4, [sp, #8]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	9403      	str	r4, [sp, #12]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f7fe fc23 	bl	80006b4 <HAL_GPIO_Init>

	    /* Peripheral clock enable */
	    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <HAL_PCD_MspInit+0x70>)
 8001e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e76:	635a      	str	r2, [r3, #52]	; 0x34
 8001e78:	9400      	str	r4, [sp, #0]
 8001e7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e80:	645a      	str	r2, [r3, #68]	; 0x44
 8001e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e88:	9300      	str	r3, [sp, #0]

	    /* Peripheral interrupt init */
	    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8001e8a:	2043      	movs	r0, #67	; 0x43
 8001e8c:	4622      	mov	r2, r4
 8001e8e:	2105      	movs	r1, #5
	    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e90:	9b00      	ldr	r3, [sp, #0]
	    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8001e92:	f7fe fbad 	bl	80005f0 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001e96:	2043      	movs	r0, #67	; 0x43
 8001e98:	f7fe fbde 	bl	8000658 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001e9c:	b006      	add	sp, #24
 8001e9e:	bd10      	pop	{r4, pc}
 8001ea0:	40020000 	.word	0x40020000
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8001ea8:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 8001eac:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8001eb0:	f001 b951 	b.w	8003156 <USBD_LL_SetupStage>

08001eb4 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8001eb4:	231c      	movs	r3, #28
 8001eb6:	fb03 0301 	mla	r3, r3, r1, r0
 8001eba:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8001ebe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ec2:	f001 b975 	b.w	80031b0 <USBD_LL_DataOutStage>

08001ec6 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001ec6:	231c      	movs	r3, #28
 8001ec8:	fb03 0301 	mla	r3, r3, r1, r0
 8001ecc:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8001ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ed2:	f001 b99f 	b.w	8003214 <USBD_LL_DataInStage>

08001ed6 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8001ed6:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8001eda:	f001 ba1b 	b.w	8003314 <USBD_LL_SOF>

08001ede <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8001ede:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 8001ee0:	68c1      	ldr	r1, [r0, #12]
{ 
 8001ee2:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8001ee4:	3100      	adds	r1, #0
 8001ee6:	bf18      	it	ne
 8001ee8:	2101      	movne	r1, #1
 8001eea:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8001eee:	f001 f9ff 	bl	80032f0 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8001ef2:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	; 0x3ec
}
 8001ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8001efa:	f001 b9da 	b.w	80032b2 <USBD_LL_Reset>
	...

08001f00 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{  
 8001f00:	b510      	push	{r4, lr}
 8001f02:	4604      	mov	r4, r0
   /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8001f04:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8001f08:	f001 f9f5 	bl	80032f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8001f0c:	6822      	ldr	r2, [r4, #0]
 8001f0e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8001f1a:	6a23      	ldr	r3, [r4, #32]
 8001f1c:	b123      	cbz	r3, 8001f28 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001f1e:	4a03      	ldr	r2, [pc, #12]	; (8001f2c <HAL_PCD_SuspendCallback+0x2c>)
 8001f20:	6913      	ldr	r3, [r2, #16]
 8001f22:	f043 0306 	orr.w	r3, r3, #6
 8001f26:	6113      	str	r3, [r2, #16]
 8001f28:	bd10      	pop	{r4, pc}
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8001f30:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8001f34:	f001 b9e8 	b.w	8003308 <USBD_LL_Resume>

08001f38 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8001f38:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8001f3c:	f001 b9f8 	b.w	8003330 <USBD_LL_IsoOUTIncomplete>

08001f40 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8001f40:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8001f44:	f001 b9f2 	b.w	800332c <USBD_LL_IsoINIncomplete>

08001f48 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8001f48:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8001f4c:	f001 b9f2 	b.w	8003334 <USBD_LL_DevConnected>

08001f50 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8001f50:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8001f54:	f001 b9f0 	b.w	8003338 <USBD_LL_DevDisconnected>

08001f58 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8001f58:	b508      	push	{r3, lr}
  /* Init USB_IP */
  if (pdev->id == DEVICE_FS) {
 8001f5a:	7802      	ldrb	r2, [r0, #0]
 8001f5c:	2a00      	cmp	r2, #0
 8001f5e:	d135      	bne.n	8001fcc <USBD_LL_Init+0x74>
  /* Link The driver to the stack */	
  hpcd_USB_OTG_FS.pData = pdev;
 8001f60:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <USBD_LL_Init+0x78>)
  pdev->pData = &hpcd_USB_OTG_FS; 
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001f62:	2104      	movs	r1, #4
  hpcd_USB_OTG_FS.pData = pdev;
 8001f64:	f8c3 03ec 	str.w	r0, [r3, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS; 
 8001f68:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001f6c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f70:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001f74:	2102      	movs	r1, #2
 8001f76:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f78:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001f7a:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001f7c:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001f7e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8001f80:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001f82:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f84:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f86:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001f88:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001f8c:	f7fe fc77 	bl	800087e <HAL_PCD_Init>
 8001f90:	b120      	cbz	r0, 8001f9c <USBD_LL_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001f92:	f240 113d 	movw	r1, #317	; 0x13d
 8001f96:	480f      	ldr	r0, [pc, #60]	; (8001fd4 <USBD_LL_Init+0x7c>)
 8001f98:	f006 fbc8 	bl	800872c <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8001f9c:	2180      	movs	r1, #128	; 0x80
 8001f9e:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <USBD_LL_Init+0x78>)
 8001fa0:	f7ff f8bb 	bl	800111a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8001fa4:	2240      	movs	r2, #64	; 0x40
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4809      	ldr	r0, [pc, #36]	; (8001fd0 <USBD_LL_Init+0x78>)
 8001faa:	f7ff f895 	bl	80010d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x40);
 8001fae:	2240      	movs	r2, #64	; 0x40
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	4807      	ldr	r0, [pc, #28]	; (8001fd0 <USBD_LL_Init+0x78>)
 8001fb4:	f7ff f890 	bl	80010d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 2, 0x40);
 8001fb8:	2240      	movs	r2, #64	; 0x40
 8001fba:	2102      	movs	r1, #2
 8001fbc:	4804      	ldr	r0, [pc, #16]	; (8001fd0 <USBD_LL_Init+0x78>)
 8001fbe:	f7ff f88b 	bl	80010d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 3, 0x40);
 8001fc2:	2240      	movs	r2, #64	; 0x40
 8001fc4:	2103      	movs	r1, #3
 8001fc6:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <USBD_LL_Init+0x78>)
 8001fc8:	f7ff f886 	bl	80010d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8001fcc:	2000      	movs	r0, #0
 8001fce:	bd08      	pop	{r3, pc}
 8001fd0:	2000599c 	.word	0x2000599c
 8001fd4:	08008c40 	.word	0x08008c40

08001fd8 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8001fd8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8001fda:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8001fde:	f7fe fcba 	bl	8000956 <HAL_PCD_Start>
 8001fe2:	2803      	cmp	r0, #3
 8001fe4:	bf9a      	itte	ls
 8001fe6:	4b02      	ldrls	r3, [pc, #8]	; (8001ff0 <USBD_LL_Start+0x18>)
 8001fe8:	5c18      	ldrbls	r0, [r3, r0]
 8001fea:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8001fec:	bd08      	pop	{r3, pc}
 8001fee:	bf00      	nop
 8001ff0:	08008c3c 	.word	0x08008c3c

08001ff4 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8001ff4:	b570      	push	{r4, r5, r6, lr}
 8001ff6:	4616      	mov	r6, r2
 8001ff8:	461d      	mov	r5, r3
 8001ffa:	4604      	mov	r4, r0
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  ep_addr=USBD_COMPOSITE_LL_EP_Conversion(pdev, ep_addr);
 8001ffc:	f000 ff06 	bl	8002e0c <USBD_COMPOSITE_LL_EP_Conversion>

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8002000:	4633      	mov	r3, r6
 8002002:	4601      	mov	r1, r0
 8002004:	462a      	mov	r2, r5
 8002006:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800200a:	f7fe ff77 	bl	8000efc <HAL_PCD_EP_Open>
 800200e:	2803      	cmp	r0, #3
 8002010:	bf9a      	itte	ls
 8002012:	4b02      	ldrls	r3, [pc, #8]	; (800201c <USBD_LL_OpenEP+0x28>)
 8002014:	5c18      	ldrbls	r0, [r3, r0]
 8002016:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002018:	bd70      	pop	{r4, r5, r6, pc}
 800201a:	bf00      	nop
 800201c:	08008c3c 	.word	0x08008c3c

08002020 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8002020:	b510      	push	{r4, lr}
 8002022:	4604      	mov	r4, r0
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  ep_addr=USBD_COMPOSITE_LL_EP_Conversion(pdev, ep_addr);
 8002024:	f000 fef2 	bl	8002e0c <USBD_COMPOSITE_LL_EP_Conversion>

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002028:	4601      	mov	r1, r0
 800202a:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800202e:	f7fe ff93 	bl	8000f58 <HAL_PCD_EP_Close>
 8002032:	2803      	cmp	r0, #3
 8002034:	bf9a      	itte	ls
 8002036:	4b02      	ldrls	r3, [pc, #8]	; (8002040 <USBD_LL_CloseEP+0x20>)
 8002038:	5c18      	ldrbls	r0, [r3, r0]
 800203a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 800203c:	bd10      	pop	{r4, pc}
 800203e:	bf00      	nop
 8002040:	08008c3c 	.word	0x08008c3c

08002044 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8002044:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002046:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800204a:	f7fe fff4 	bl	8001036 <HAL_PCD_EP_SetStall>
 800204e:	2803      	cmp	r0, #3
 8002050:	bf9a      	itte	ls
 8002052:	4b02      	ldrls	r3, [pc, #8]	; (800205c <USBD_LL_StallEP+0x18>)
 8002054:	5c18      	ldrbls	r0, [r3, r0]
 8002056:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002058:	bd08      	pop	{r3, pc}
 800205a:	bf00      	nop
 800205c:	08008c3c 	.word	0x08008c3c

08002060 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8002060:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002062:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002066:	f7ff f812 	bl	800108e <HAL_PCD_EP_ClrStall>
 800206a:	2803      	cmp	r0, #3
 800206c:	bf9a      	itte	ls
 800206e:	4b02      	ldrls	r3, [pc, #8]	; (8002078 <USBD_LL_ClearStallEP+0x18>)
 8002070:	5c18      	ldrbls	r0, [r3, r0]
 8002072:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002074:	bd08      	pop	{r3, pc}
 8002076:	bf00      	nop
 8002078:	08008c3c 	.word	0x08008c3c

0800207c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 800207c:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002080:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8002084:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002088:	bf1b      	ittet	ne
 800208a:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800208e:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002092:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002096:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800209a:	bf08      	it	eq
 800209c:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 80020a0:	4770      	bx	lr
	...

080020a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 80020a4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80020a6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80020aa:	f7fe ff15 	bl	8000ed8 <HAL_PCD_SetAddress>
 80020ae:	2803      	cmp	r0, #3
 80020b0:	bf9a      	itte	ls
 80020b2:	4b02      	ldrls	r3, [pc, #8]	; (80020bc <USBD_LL_SetUSBAddress+0x18>)
 80020b4:	5c18      	ldrbls	r0, [r3, r0]
 80020b6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80020b8:	bd08      	pop	{r3, pc}
 80020ba:	bf00      	nop
 80020bc:	08008c3c 	.word	0x08008c3c

080020c0 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 80020c0:	b570      	push	{r4, r5, r6, lr}
 80020c2:	4604      	mov	r4, r0
 80020c4:	4615      	mov	r5, r2
 80020c6:	461e      	mov	r6, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  ep_addr=USBD_COMPOSITE_LL_EP_Conversion(pdev, ep_addr);
 80020c8:	f000 fea0 	bl	8002e0c <USBD_COMPOSITE_LL_EP_Conversion>

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80020cc:	4633      	mov	r3, r6
 80020ce:	4601      	mov	r1, r0
 80020d0:	462a      	mov	r2, r5
 80020d2:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80020d6:	f7fe ff8e 	bl	8000ff6 <HAL_PCD_EP_Transmit>
 80020da:	2803      	cmp	r0, #3
 80020dc:	bf9a      	itte	ls
 80020de:	4b02      	ldrls	r3, [pc, #8]	; (80020e8 <USBD_LL_Transmit+0x28>)
 80020e0:	5c18      	ldrbls	r0, [r3, r0]
 80020e2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 80020e4:	bd70      	pop	{r4, r5, r6, pc}
 80020e6:	bf00      	nop
 80020e8:	08008c3c 	.word	0x08008c3c

080020ec <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 80020ec:	b570      	push	{r4, r5, r6, lr}
 80020ee:	4604      	mov	r4, r0
 80020f0:	4615      	mov	r5, r2
 80020f2:	461e      	mov	r6, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  ep_addr=USBD_COMPOSITE_LL_EP_Conversion(pdev, ep_addr);
 80020f4:	f000 fe8a 	bl	8002e0c <USBD_COMPOSITE_LL_EP_Conversion>

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80020f8:	4633      	mov	r3, r6
 80020fa:	4601      	mov	r1, r0
 80020fc:	462a      	mov	r2, r5
 80020fe:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002102:	f7fe ff4c 	bl	8000f9e <HAL_PCD_EP_Receive>
 8002106:	2803      	cmp	r0, #3
 8002108:	bf9a      	itte	ls
 800210a:	4b02      	ldrls	r3, [pc, #8]	; (8002114 <USBD_LL_PrepareReceive+0x28>)
 800210c:	5c18      	ldrbls	r0, [r3, r0]
 800210e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002110:	bd70      	pop	{r4, r5, r6, pc}
 8002112:	bf00      	nop
 8002114:	08008c3c 	.word	0x08008c3c

08002118 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8002118:	b510      	push	{r4, lr}
 800211a:	4604      	mov	r4, r0
  ep_addr=USBD_COMPOSITE_LL_EP_Conversion(pdev, ep_addr);
 800211c:	f000 fe76 	bl	8002e0c <USBD_COMPOSITE_LL_EP_Conversion>
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002120:	4601      	mov	r1, r0
 8002122:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002126:	f7fe ff5e 	bl	8000fe6 <HAL_PCD_EP_GetRxCount>
}
 800212a:	bd10      	pop	{r4, pc}

0800212c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800212c:	4801      	ldr	r0, [pc, #4]	; (8002134 <OTG_FS_IRQHandler+0x8>)
 800212e:	f7fe bc27 	b.w	8000980 <HAL_PCD_IRQHandler>
 8002132:	bf00      	nop
 8002134:	2000599c 	.word	0x2000599c

08002138 <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8002138:	2312      	movs	r3, #18
 800213a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800213c:	4800      	ldr	r0, [pc, #0]	; (8002140 <USBD_FS_DeviceDescriptor+0x8>)
 800213e:	4770      	bx	lr
 8002140:	20000024 	.word	0x20000024

08002144 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8002144:	2304      	movs	r3, #4
 8002146:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8002148:	4800      	ldr	r0, [pc, #0]	; (800214c <USBD_FS_LangIDStrDescriptor+0x8>)
 800214a:	4770      	bx	lr
 800214c:	20000038 	.word	0x20000038

08002150 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8002150:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002152:	4c04      	ldr	r4, [pc, #16]	; (8002164 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8002154:	4804      	ldr	r0, [pc, #16]	; (8002168 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8002156:	460a      	mov	r2, r1
 8002158:	4621      	mov	r1, r4
 800215a:	f001 fa8c 	bl	8003676 <USBD_GetString>
  return USBD_StrDesc;
}
 800215e:	4620      	mov	r0, r4
 8002160:	bd10      	pop	{r4, pc}
 8002162:	bf00      	nop
 8002164:	20005d8c 	.word	0x20005d8c
 8002168:	08008ca2 	.word	0x08008ca2

0800216c <USBD_FS_ProductStrDescriptor>:
{
 800216c:	b510      	push	{r4, lr}
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800216e:	4c04      	ldr	r4, [pc, #16]	; (8002180 <USBD_FS_ProductStrDescriptor+0x14>)
 8002170:	4804      	ldr	r0, [pc, #16]	; (8002184 <USBD_FS_ProductStrDescriptor+0x18>)
 8002172:	460a      	mov	r2, r1
 8002174:	4621      	mov	r1, r4
 8002176:	f001 fa7e 	bl	8003676 <USBD_GetString>
}
 800217a:	4620      	mov	r0, r4
 800217c:	bd10      	pop	{r4, pc}
 800217e:	bf00      	nop
 8002180:	20005d8c 	.word	0x20005d8c
 8002184:	08008ca8 	.word	0x08008ca8

08002188 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8002188:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800218a:	4c04      	ldr	r4, [pc, #16]	; (800219c <USBD_FS_SerialStrDescriptor+0x14>)
 800218c:	4804      	ldr	r0, [pc, #16]	; (80021a0 <USBD_FS_SerialStrDescriptor+0x18>)
 800218e:	460a      	mov	r2, r1
 8002190:	4621      	mov	r1, r4
 8002192:	f001 fa70 	bl	8003676 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8002196:	4620      	mov	r0, r4
 8002198:	bd10      	pop	{r4, pc}
 800219a:	bf00      	nop
 800219c:	20005d8c 	.word	0x20005d8c
 80021a0:	08008cb7 	.word	0x08008cb7

080021a4 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80021a4:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80021a6:	4c04      	ldr	r4, [pc, #16]	; (80021b8 <USBD_FS_ConfigStrDescriptor+0x14>)
 80021a8:	4804      	ldr	r0, [pc, #16]	; (80021bc <USBD_FS_ConfigStrDescriptor+0x18>)
 80021aa:	460a      	mov	r2, r1
 80021ac:	4621      	mov	r1, r4
 80021ae:	f001 fa62 	bl	8003676 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 80021b2:	4620      	mov	r0, r4
 80021b4:	bd10      	pop	{r4, pc}
 80021b6:	bf00      	nop
 80021b8:	20005d8c 	.word	0x20005d8c
 80021bc:	08008c7f 	.word	0x08008c7f

080021c0 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80021c0:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80021c2:	4c04      	ldr	r4, [pc, #16]	; (80021d4 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80021c4:	4804      	ldr	r0, [pc, #16]	; (80021d8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80021c6:	460a      	mov	r2, r1
 80021c8:	4621      	mov	r1, r4
 80021ca:	f001 fa54 	bl	8003676 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 80021ce:	4620      	mov	r0, r4
 80021d0:	bd10      	pop	{r4, pc}
 80021d2:	bf00      	nop
 80021d4:	20005d8c 	.word	0x20005d8c
 80021d8:	08008c8f 	.word	0x08008c8f

080021dc <prvEMACHandlerTask>:
		}

		return xReturn;
}

static void prvEMACHandlerTask( void *pvParameters ){
 80021dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

		/* See how much data was received.  Here it is assumed ReceiveSize() is
	        a peripheral driver function that returns the number of bytes in the
	        received Ethernet frame. */

		xBytesReceived = UserRxSize;
 80021e0:	4f1a      	ldr	r7, [pc, #104]	; (800224c <prvEMACHandlerTask+0x70>)
	                is assumed ReceiveData() is a peripheral driver function that
	                copies the received data into a buffer passed in as the function's
	                parameter.  Remember! While is is a simple robust technique -
	                it is not efficient.  An example that uses a zero copy technique
	                is provided further down this page. */
				memcpy(pxBufferDescriptor->pucEthernetBuffer, UserRxBufferFS+44, xBytesReceived);
 80021e2:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8002258 <prvEMACHandlerTask+0x7c>
				/* The event was lost because a network buffer was not available.
	                Call the standard trace macro to log the occurrence. */
				iptraceETHERNET_RX_EVENT_LOST();
			}
		}
		USBD_RNDIS_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS_Temp);
 80021e6:	4e1a      	ldr	r6, [pc, #104]	; (8002250 <prvEMACHandlerTask+0x74>)
		ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
 80021e8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ec:	2000      	movs	r0, #0
 80021ee:	f002 ff77 	bl	80050e0 <ulTaskNotifyTake>
		xBytesReceived = UserRxSize;
 80021f2:	883d      	ldrh	r5, [r7, #0]
		if( xBytesReceived > 44 )
 80021f4:	2d2c      	cmp	r5, #44	; 0x2c
 80021f6:	d920      	bls.n	800223a <prvEMACHandlerTask+0x5e>
			xBytesReceived-=44;
 80021f8:	3d2c      	subs	r5, #44	; 0x2c
			pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( xBytesReceived, 0 );
 80021fa:	2100      	movs	r1, #0
 80021fc:	4628      	mov	r0, r5
 80021fe:	f006 f97b 	bl	80084f8 <pxGetNetworkBufferWithDescriptor>
			if( pxBufferDescriptor != NULL )
 8002202:	4604      	mov	r4, r0
 8002204:	b1c8      	cbz	r0, 800223a <prvEMACHandlerTask+0x5e>
				memcpy(pxBufferDescriptor->pucEthernetBuffer, UserRxBufferFS+44, xBytesReceived);
 8002206:	462a      	mov	r2, r5
 8002208:	4649      	mov	r1, r9
 800220a:	6980      	ldr	r0, [r0, #24]
 800220c:	f006 fb79 	bl	8008902 <memcpy>
				UserRxSize=0;
 8002210:	f04f 0800 	mov.w	r8, #0
				pxBufferDescriptor->xDataLength = xBytesReceived;
 8002214:	61e5      	str	r5, [r4, #28]
				if( eConsiderFrameForProcessing( pxBufferDescriptor->pucEthernetBuffer )
 8002216:	69a0      	ldr	r0, [r4, #24]
				UserRxSize=0;
 8002218:	f8a7 8000 	strh.w	r8, [r7]
				if( eConsiderFrameForProcessing( pxBufferDescriptor->pucEthernetBuffer )
 800221c:	f003 fca2 	bl	8005b64 <eConsiderFrameForProcessing>
 8002220:	2801      	cmp	r0, #1
 8002222:	d107      	bne.n	8002234 <prvEMACHandlerTask+0x58>
					xRxEvent.eEventType = eNetworkRxEvent;
 8002224:	f88d 0000 	strb.w	r0, [sp]
					if( xSendEventStructToIPTask( &xRxEvent, 0 ) == pdFALSE )
 8002228:	4641      	mov	r1, r8
 800222a:	4668      	mov	r0, sp
					xRxEvent.pvData = ( void * ) pxBufferDescriptor;
 800222c:	9401      	str	r4, [sp, #4]
					if( xSendEventStructToIPTask( &xRxEvent, 0 ) == pdFALSE )
 800222e:	f003 fc51 	bl	8005ad4 <xSendEventStructToIPTask>
 8002232:	b910      	cbnz	r0, 800223a <prvEMACHandlerTask+0x5e>
					vReleaseNetworkBufferAndDescriptor( pxBufferDescriptor );
 8002234:	4620      	mov	r0, r4
 8002236:	f006 f93b 	bl	80084b0 <vReleaseNetworkBufferAndDescriptor>
		USBD_RNDIS_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS_Temp);
 800223a:	4906      	ldr	r1, [pc, #24]	; (8002254 <prvEMACHandlerTask+0x78>)
 800223c:	4630      	mov	r0, r6
 800223e:	f000 ff1f 	bl	8003080 <USBD_RNDIS_SetRxBuffer>
		USBD_RNDIS_ReceivePacket(&hUsbDeviceFS);
 8002242:	4630      	mov	r0, r6
 8002244:	f000 ff39 	bl	80030ba <USBD_RNDIS_ReceivePacket>
		ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
 8002248:	e7ce      	b.n	80021e8 <prvEMACHandlerTask+0xc>
 800224a:	bf00      	nop
 800224c:	20000c04 	.word	0x20000c04
 8002250:	20005778 	.word	0x20005778
 8002254:	20000bc4 	.word	0x20000bc4
 8002258:	200003f0 	.word	0x200003f0

0800225c <RNDIS_Receive_FS>:
	if(*Len>64){
 800225c:	680b      	ldr	r3, [r1, #0]
{
 800225e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	memcpy(UserRxBufferFS+len, UserRxBufferFS_Temp, *Len);
 8002260:	4e1c      	ldr	r6, [pc, #112]	; (80022d4 <RNDIS_Receive_FS+0x78>)
 8002262:	481d      	ldr	r0, [pc, #116]	; (80022d8 <RNDIS_Receive_FS+0x7c>)
 8002264:	8834      	ldrh	r4, [r6, #0]
	if(*Len>64){
 8002266:	2b40      	cmp	r3, #64	; 0x40
		*Len=64;
 8002268:	bf84      	itt	hi
 800226a:	2340      	movhi	r3, #64	; 0x40
 800226c:	600b      	strhi	r3, [r1, #0]
{
 800226e:	460d      	mov	r5, r1
	memcpy(UserRxBufferFS+len, UserRxBufferFS_Temp, *Len);
 8002270:	680a      	ldr	r2, [r1, #0]
 8002272:	491a      	ldr	r1, [pc, #104]	; (80022dc <RNDIS_Receive_FS+0x80>)
 8002274:	4420      	add	r0, r4
 8002276:	f006 fb44 	bl	8008902 <memcpy>
	len+=(*Len);
 800227a:	682b      	ldr	r3, [r5, #0]
 800227c:	441c      	add	r4, r3
 800227e:	b2a4      	uxth	r4, r4
	if(*Len!=64 && xEMACTaskHandle!=0){
 8002280:	2b40      	cmp	r3, #64	; 0x40
	len+=(*Len);
 8002282:	8034      	strh	r4, [r6, #0]
	if(*Len!=64 && xEMACTaskHandle!=0){
 8002284:	d01e      	beq.n	80022c4 <RNDIS_Receive_FS+0x68>
 8002286:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <RNDIS_Receive_FS+0x84>)
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	b1d8      	cbz	r0, 80022c4 <RNDIS_Receive_FS+0x68>
		UserRxSize=len;
 800228c:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <RNDIS_Receive_FS+0x88>)
		vTaskNotifyGiveFromISR(xEMACTaskHandle, &xHigherPriorityTaskWoken);
 800228e:	a901      	add	r1, sp, #4
		UserRxSize=len;
 8002290:	801c      	strh	r4, [r3, #0]
		len=0;
 8002292:	2300      	movs	r3, #0
 8002294:	8033      	strh	r3, [r6, #0]
		vTaskNotifyGiveFromISR(xEMACTaskHandle, &xHigherPriorityTaskWoken);
 8002296:	f002 ff55 	bl	8005144 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800229a:	9b01      	ldr	r3, [sp, #4]
 800229c:	b13b      	cbz	r3, 80022ae <RNDIS_Receive_FS+0x52>
 800229e:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <RNDIS_Receive_FS+0x8c>)
 80022a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	f3bf 8f4f 	dsb	sy
 80022aa:	f3bf 8f6f 	isb	sy
		rndis_oid_gen_rcv_ok++;
 80022ae:	490f      	ldr	r1, [pc, #60]	; (80022ec <RNDIS_Receive_FS+0x90>)
 80022b0:	e9d1 2300 	ldrd	r2, r3, [r1]
 80022b4:	3201      	adds	r2, #1
 80022b6:	f143 0300 	adc.w	r3, r3, #0
 80022ba:	e9c1 2300 	strd	r2, r3, [r1]
}
 80022be:	2000      	movs	r0, #0
 80022c0:	b002      	add	sp, #8
 80022c2:	bd70      	pop	{r4, r5, r6, pc}
		USBD_RNDIS_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS_Temp);
 80022c4:	4905      	ldr	r1, [pc, #20]	; (80022dc <RNDIS_Receive_FS+0x80>)
 80022c6:	480a      	ldr	r0, [pc, #40]	; (80022f0 <RNDIS_Receive_FS+0x94>)
 80022c8:	f000 feda 	bl	8003080 <USBD_RNDIS_SetRxBuffer>
		USBD_RNDIS_ReceivePacket(&hUsbDeviceFS);
 80022cc:	4808      	ldr	r0, [pc, #32]	; (80022f0 <RNDIS_Receive_FS+0x94>)
 80022ce:	f000 fef4 	bl	80030ba <USBD_RNDIS_ReceivePacket>
 80022d2:	e7f4      	b.n	80022be <RNDIS_Receive_FS+0x62>
 80022d4:	20000c06 	.word	0x20000c06
 80022d8:	200003c4 	.word	0x200003c4
 80022dc:	20000bc4 	.word	0x20000bc4
 80022e0:	20000c40 	.word	0x20000c40
 80022e4:	20000c04 	.word	0x20000c04
 80022e8:	e000ed04 	.word	0xe000ed04
 80022ec:	20000c30 	.word	0x20000c30
 80022f0:	20005778 	.word	0x20005778

080022f4 <RNDIS_Disconnect>:
	rndis_oid_gen_xmit_ok=0;
 80022f4:	4906      	ldr	r1, [pc, #24]	; (8002310 <RNDIS_Disconnect+0x1c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	2300      	movs	r3, #0
 80022fa:	e9c1 2300 	strd	r2, r3, [r1]
	rndis_oid_gen_rcv_ok=0;
 80022fe:	4905      	ldr	r1, [pc, #20]	; (8002314 <RNDIS_Disconnect+0x20>)
 8002300:	e9c1 2300 	strd	r2, r3, [r1]
	rndis_state=RNDIS_STATE_HALTED;
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <RNDIS_Disconnect+0x24>)
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]
	FreeRTOS_NetworkDownFromISR();
 800230a:	f003 bb0f 	b.w	800592c <FreeRTOS_NetworkDownFromISR>
 800230e:	bf00      	nop
 8002310:	20000c38 	.word	0x20000c38
 8002314:	20000c30 	.word	0x20000c30
 8002318:	2000004c 	.word	0x2000004c

0800231c <RNDIS_Control_FS>:
{ 
 800231c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002320:	460c      	mov	r4, r1
	switch (cmd)
 8002322:	4606      	mov	r6, r0
 8002324:	b120      	cbz	r0, 8002330 <RNDIS_Control_FS+0x14>
 8002326:	2801      	cmp	r0, #1
 8002328:	d03d      	beq.n	80023a6 <RNDIS_Control_FS+0x8a>
}
 800232a:	2000      	movs	r0, #0
 800232c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rndis_data.MessageType=buf32[0];
 8002330:	680b      	ldr	r3, [r1, #0]
 8002332:	4d99      	ldr	r5, [pc, #612]	; (8002598 <RNDIS_Control_FS+0x27c>)
	USBD_RNDIS_HandleTypeDef *hrndis = (USBD_RNDIS_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002334:	4f99      	ldr	r7, [pc, #612]	; (800259c <RNDIS_Control_FS+0x280>)
		rndis_data.RequestId=buf32[2];
 8002336:	688a      	ldr	r2, [r1, #8]
	USBD_RNDIS_HandleTypeDef *hrndis = (USBD_RNDIS_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002338:	f8d7 8218 	ldr.w	r8, [r7, #536]	; 0x218
		rndis_data.MessageType=buf32[0];
 800233c:	602b      	str	r3, [r5, #0]
		if(buf32[0]==RNDIS_MSG_INIT){
 800233e:	2b02      	cmp	r3, #2
		rndis_data.RequestId=buf32[2];
 8002340:	606a      	str	r2, [r5, #4]
		if(buf32[0]==RNDIS_MSG_INIT){
 8002342:	d111      	bne.n	8002368 <RNDIS_Control_FS+0x4c>
			RNDIS_Disconnect();
 8002344:	f7ff ffd6 	bl	80022f4 <RNDIS_Disconnect>
			rndis_data.MajorVersion=buf32[3];
 8002348:	68e3      	ldr	r3, [r4, #12]
 800234a:	60ab      	str	r3, [r5, #8]
			rndis_data.MinorVersion=buf32[4];
 800234c:	6923      	ldr	r3, [r4, #16]
 800234e:	60eb      	str	r3, [r5, #12]
			rndis_data.MaxTransferSize=buf32[5];
 8002350:	6963      	ldr	r3, [r4, #20]
 8002352:	612b      	str	r3, [r5, #16]
			rndis_state=RNDIS_STATE_NORMAL;
 8002354:	4b92      	ldr	r3, [pc, #584]	; (80025a0 <RNDIS_Control_FS+0x284>)
			hrndis->TxState=0;
 8002356:	f8c8 6214 	str.w	r6, [r8, #532]	; 0x214
			rndis_state=RNDIS_STATE_NORMAL;
 800235a:	701e      	strb	r6, [r3, #0]
			USBD_RNDIS_TransmitControl(&hUsbDeviceFS, (uint8_t*)response, 8);
 800235c:	4991      	ldr	r1, [pc, #580]	; (80025a4 <RNDIS_Control_FS+0x288>)
 800235e:	2208      	movs	r2, #8
 8002360:	4638      	mov	r0, r7
			USBD_RNDIS_TransmitControl(&hUsbDeviceFS, (uint8_t*)response, 8);
 8002362:	f000 febd 	bl	80030e0 <USBD_RNDIS_TransmitControl>
 8002366:	e7e0      	b.n	800232a <RNDIS_Control_FS+0xe>
		} else if(buf32[0]==RNDIS_MSG_HALT){
 8002368:	2b03      	cmp	r3, #3
 800236a:	d107      	bne.n	800237c <RNDIS_Control_FS+0x60>
			hrndis->TxState=1;
 800236c:	2401      	movs	r4, #1
 800236e:	f8c8 4214 	str.w	r4, [r8, #532]	; 0x214
			RNDIS_Disconnect();
 8002372:	f7ff ffbf 	bl	80022f4 <RNDIS_Disconnect>
			rndis_state=RNDIS_STATE_HALTED;
 8002376:	4b8a      	ldr	r3, [pc, #552]	; (80025a0 <RNDIS_Control_FS+0x284>)
 8002378:	701c      	strb	r4, [r3, #0]
 800237a:	e7d6      	b.n	800232a <RNDIS_Control_FS+0xe>
		} else if(buf32[0]==RNDIS_MSG_QUERY){
 800237c:	2b04      	cmp	r3, #4
 800237e:	d108      	bne.n	8002392 <RNDIS_Control_FS+0x76>
			rndis_data.Oid=buf32[3];
 8002380:	68cb      	ldr	r3, [r1, #12]
 8002382:	616b      	str	r3, [r5, #20]
			rndis_data.InformationBufferLength=buf32[4];
 8002384:	690b      	ldr	r3, [r1, #16]
 8002386:	61ab      	str	r3, [r5, #24]
			rndis_data.InformationBufferOffset=buf32[5];
 8002388:	694b      	ldr	r3, [r1, #20]
 800238a:	61eb      	str	r3, [r5, #28]
			rndis_data.DeviceVcHandle=buf32[6];
 800238c:	698b      	ldr	r3, [r1, #24]
 800238e:	622b      	str	r3, [r5, #32]
 8002390:	e7e4      	b.n	800235c <RNDIS_Control_FS+0x40>
		} else if(buf32[0]==RNDIS_MSG_SET){
 8002392:	1f5a      	subs	r2, r3, #5
 8002394:	2a01      	cmp	r2, #1
 8002396:	d803      	bhi.n	80023a0 <RNDIS_Control_FS+0x84>
			USBD_RNDIS_TransmitControl(&hUsbDeviceFS, (uint8_t*)response, 8);
 8002398:	2208      	movs	r2, #8
 800239a:	4982      	ldr	r1, [pc, #520]	; (80025a4 <RNDIS_Control_FS+0x288>)
 800239c:	487f      	ldr	r0, [pc, #508]	; (800259c <RNDIS_Control_FS+0x280>)
 800239e:	e7e0      	b.n	8002362 <RNDIS_Control_FS+0x46>
		} else if(buf32[0]==RNDIS_MSG_KEEPALIVE){
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d1c2      	bne.n	800232a <RNDIS_Control_FS+0xe>
 80023a4:	e7f8      	b.n	8002398 <RNDIS_Control_FS+0x7c>
		if(rndis_data.MessageType==RNDIS_MSG_INIT){
 80023a6:	4b7c      	ldr	r3, [pc, #496]	; (8002598 <RNDIS_Control_FS+0x27c>)
 80023a8:	6819      	ldr	r1, [r3, #0]
 80023aa:	2902      	cmp	r1, #2
 80023ac:	d115      	bne.n	80023da <RNDIS_Control_FS+0xbe>
			buf32[pos++]=RNDIS_MSG_INIT_C;							//MessageType			Specifies the type of message being sent. Set to 0x80000002.
 80023ae:	4a7e      	ldr	r2, [pc, #504]	; (80025a8 <RNDIS_Control_FS+0x28c>)
			buf32[pos++]=rndis_data.RequestId;						//RequestId				Specifies the Remote NDIS message ID value. This value is used to match messages sent by the host with device responses.
 80023b0:	685b      	ldr	r3, [r3, #4]
			buf32[pos++]=RNDIS_MSG_INIT_C;							//MessageType			Specifies the type of message being sent. Set to 0x80000002.
 80023b2:	6022      	str	r2, [r4, #0]
			buf32[pos++]=rndis_data.RequestId;						//RequestId				Specifies the Remote NDIS message ID value. This value is used to match messages sent by the host with device responses.
 80023b4:	60a3      	str	r3, [r4, #8]
			buf32[pos++]=1580;										//MaxTransferSize		Specifies the maximum size in bytes of any single bus data transfer that the device expects to receive from the host.
 80023b6:	f240 622c 	movw	r2, #1580	; 0x62c
			buf32[pos++]=RNDIS_STATUS_SUCCESS;						//Status				Specifies RNDIS_STATUS_SUCCESS if the device initialized successfully; otherwise, it specifies an error code that indicates the failure.
 80023ba:	2300      	movs	r3, #0
			buf32[pos++]=1580;										//MaxTransferSize		Specifies the maximum size in bytes of any single bus data transfer that the device expects to receive from the host.
 80023bc:	6262      	str	r2, [r4, #36]	; 0x24
			buf32[pos++]=RNDIS_STATUS_SUCCESS;						//Status				Specifies RNDIS_STATUS_SUCCESS if the device initialized successfully; otherwise, it specifies an error code that indicates the failure.
 80023be:	60e3      	str	r3, [r4, #12]
			buf32[pos++]=1;											//MajorVersion			Specifies the highest Remote NDIS major protocol version supported by the device.
 80023c0:	6120      	str	r0, [r4, #16]
			buf32[pos++]=0;											//MinorVersion			Specifies the highest Remote NDIS minor protocol version supported by the device.
 80023c2:	6163      	str	r3, [r4, #20]
			buf32[pos++]=RNDIS_DF_CONNECTIONLESS;					//DeviceFlags			Specifies the miniport driver type as either connectionless or connection-oriented. This value can be one of the following:
 80023c4:	61a0      	str	r0, [r4, #24]
			buf32[pos++]=RNDIS_MEDIUM_802_3;						//Medium				Specifies the medium supported by the device. Set to RNDIS_MEDIUM_802_3 (0x00000000)
 80023c6:	61e3      	str	r3, [r4, #28]
			buf32[pos++]=1;											//MaxPacketsPerMessage	Specifies the maximum number of Remote NDIS data messages that the device can handle in a single transfer to it. This value should be at least one.
 80023c8:	6220      	str	r0, [r4, #32]
			buf32[pos++]=0;											//PacketAlignmentFactor	Specifies the byte alignment that the device expects for each Remote NDIS message that is part of a multimessage transfer to it. This value is specified in powers of 2. For example, this value is set to three to indicate 8-byte alignment. This value has a maximum setting of seven, which specifies 128-byte alignment.
 80023ca:	62a3      	str	r3, [r4, #40]	; 0x28
			buf32[pos++]=0;											//AFListOffset			Reserved for connection-oriented devices. Set value to zero.
 80023cc:	62e3      	str	r3, [r4, #44]	; 0x2c
			buf32[pos++]=0;											//AFListSize			Reserved for connection-oriented devices. Set value to zero.
 80023ce:	6323      	str	r3, [r4, #48]	; 0x30
 80023d0:	220d      	movs	r2, #13
		if(!len) len=buf32[1]=pos*4;
 80023d2:	0092      	lsls	r2, r2, #2
 80023d4:	6062      	str	r2, [r4, #4]
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	e095      	b.n	8002506 <RNDIS_Control_FS+0x1ea>
		} else if(rndis_data.MessageType==RNDIS_MSG_QUERY){
 80023da:	2904      	cmp	r1, #4
 80023dc:	f040 80c0 	bne.w	8002560 <RNDIS_Control_FS+0x244>
			buf32[pos++]=RNDIS_MSG_QUERY_C;
 80023e0:	4a72      	ldr	r2, [pc, #456]	; (80025ac <RNDIS_Control_FS+0x290>)
 80023e2:	6022      	str	r2, [r4, #0]
			switch(rndis_data.Oid){
 80023e4:	4872      	ldr	r0, [pc, #456]	; (80025b0 <RNDIS_Control_FS+0x294>)
			buf32[pos++]=rndis_data.RequestId;
 80023e6:	685a      	ldr	r2, [r3, #4]
			switch(rndis_data.Oid){
 80023e8:	695b      	ldr	r3, [r3, #20]
			buf32[pos++]=rndis_data.RequestId;
 80023ea:	60a2      	str	r2, [r4, #8]
			switch(rndis_data.Oid){
 80023ec:	4283      	cmp	r3, r0
			buf32[pos++]=RNDIS_STATUS_SUCCESS;
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	60e2      	str	r2, [r4, #12]
			switch(rndis_data.Oid){
 80023f4:	f000 80a7 	beq.w	8002546 <RNDIS_Control_FS+0x22a>
 80023f8:	d836      	bhi.n	8002468 <RNDIS_Control_FS+0x14c>
 80023fa:	4a6e      	ldr	r2, [pc, #440]	; (80025b4 <RNDIS_Control_FS+0x298>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	f000 80a7 	beq.w	8002550 <RNDIS_Control_FS+0x234>
 8002402:	d813      	bhi.n	800242c <RNDIS_Control_FS+0x110>
 8002404:	3a06      	subs	r2, #6
 8002406:	4293      	cmp	r3, r2
 8002408:	d058      	beq.n	80024bc <RNDIS_Control_FS+0x1a0>
 800240a:	3201      	adds	r2, #1
 800240c:	4293      	cmp	r3, r2
 800240e:	d05d      	beq.n	80024cc <RNDIS_Control_FS+0x1b0>
 8002410:	3a06      	subs	r2, #6
 8002412:	4293      	cmp	r3, r2
 8002414:	d133      	bne.n	800247e <RNDIS_Control_FS+0x162>
				buf32[pos++]=temp;
 8002416:	2264      	movs	r2, #100	; 0x64
				buf32[pos++]=16;
 8002418:	2310      	movs	r3, #16
				buf32[pos++]=temp;
 800241a:	6122      	str	r2, [r4, #16]
				buf32[pos++]=16;
 800241c:	6163      	str	r3, [r4, #20]
				USBD_memcpy(buf32+pos, OID_GEN_SUPPORTED, temp);
 800241e:	4966      	ldr	r1, [pc, #408]	; (80025b8 <RNDIS_Control_FS+0x29c>)
 8002420:	f104 0018 	add.w	r0, r4, #24
 8002424:	f006 fa6d 	bl	8008902 <memcpy>
				pos+=temp;
 8002428:	226a      	movs	r2, #106	; 0x6a
				break;
 800242a:	e7d2      	b.n	80023d2 <RNDIS_Control_FS+0xb6>
			switch(rndis_data.Oid){
 800242c:	4a63      	ldr	r2, [pc, #396]	; (80025bc <RNDIS_Control_FS+0x2a0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d077      	beq.n	8002522 <RNDIS_Control_FS+0x206>
 8002432:	3203      	adds	r2, #3
 8002434:	4293      	cmp	r3, r2
 8002436:	d02f      	beq.n	8002498 <RNDIS_Control_FS+0x17c>
 8002438:	3a07      	subs	r2, #7
 800243a:	4293      	cmp	r3, r2
 800243c:	d11f      	bne.n	800247e <RNDIS_Control_FS+0x162>
				buf32[pos++]=sizeof(nome);
 800243e:	230f      	movs	r3, #15
 8002440:	6123      	str	r3, [r4, #16]
				buf32[pos++]=16;
 8002442:	2310      	movs	r3, #16
 8002444:	6163      	str	r3, [r4, #20]
				USBD_memcpy((char*)&buf32[pos++], nome, sizeof(nome));
 8002446:	4b5e      	ldr	r3, [pc, #376]	; (80025c0 <RNDIS_Control_FS+0x2a4>)
 8002448:	f104 0218 	add.w	r2, r4, #24
 800244c:	f103 010c 	add.w	r1, r3, #12
 8002450:	f853 0b04 	ldr.w	r0, [r3], #4
 8002454:	f842 0b04 	str.w	r0, [r2], #4
 8002458:	428b      	cmp	r3, r1
 800245a:	d1f9      	bne.n	8002450 <RNDIS_Control_FS+0x134>
 800245c:	8819      	ldrh	r1, [r3, #0]
 800245e:	789b      	ldrb	r3, [r3, #2]
 8002460:	8011      	strh	r1, [r2, #0]
 8002462:	7093      	strb	r3, [r2, #2]
				len=buf32[1]=pos*4+sizeof(nome);
 8002464:	222b      	movs	r2, #43	; 0x2b
 8002466:	e04d      	b.n	8002504 <RNDIS_Control_FS+0x1e8>
			switch(rndis_data.Oid){
 8002468:	4856      	ldr	r0, [pc, #344]	; (80025c4 <RNDIS_Control_FS+0x2a8>)
 800246a:	4283      	cmp	r3, r0
 800246c:	d06b      	beq.n	8002546 <RNDIS_Control_FS+0x22a>
 800246e:	d80c      	bhi.n	800248a <RNDIS_Control_FS+0x16e>
 8002470:	4a55      	ldr	r2, [pc, #340]	; (80025c8 <RNDIS_Control_FS+0x2ac>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d062      	beq.n	800253c <RNDIS_Control_FS+0x220>
 8002476:	d80f      	bhi.n	8002498 <RNDIS_Control_FS+0x17c>
 8002478:	3a01      	subs	r2, #1
 800247a:	4293      	cmp	r3, r2
 800247c:	d057      	beq.n	800252e <RNDIS_Control_FS+0x212>
				buf32[pos++]=0;
 800247e:	2300      	movs	r3, #0
 8002480:	6123      	str	r3, [r4, #16]
				buf32[pos++]=20;
 8002482:	2314      	movs	r3, #20
 8002484:	6163      	str	r3, [r4, #20]
 8002486:	2206      	movs	r2, #6
				break;
 8002488:	e7a3      	b.n	80023d2 <RNDIS_Control_FS+0xb6>
			switch(rndis_data.Oid){
 800248a:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 800248e:	d03f      	beq.n	8002510 <RNDIS_Control_FS+0x1f4>
 8002490:	d808      	bhi.n	80024a4 <RNDIS_Control_FS+0x188>
 8002492:	4a4e      	ldr	r2, [pc, #312]	; (80025cc <RNDIS_Control_FS+0x2b0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d1f2      	bne.n	800247e <RNDIS_Control_FS+0x162>
				buf32[pos++]=4;
 8002498:	2304      	movs	r3, #4
 800249a:	6123      	str	r3, [r4, #16]
				buf32[pos++]=16;
 800249c:	2310      	movs	r3, #16
 800249e:	6163      	str	r3, [r4, #20]
				buf32[pos++]=0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	e010      	b.n	80024c6 <RNDIS_Control_FS+0x1aa>
			switch(rndis_data.Oid){
 80024a4:	f113 3ffe 	cmn.w	r3, #4278124286	; 0xfefefefe
 80024a8:	d017      	beq.n	80024da <RNDIS_Control_FS+0x1be>
 80024aa:	4a49      	ldr	r2, [pc, #292]	; (80025d0 <RNDIS_Control_FS+0x2b4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d1e6      	bne.n	800247e <RNDIS_Control_FS+0x162>
				buf32[pos++]=4;
 80024b0:	2304      	movs	r3, #4
 80024b2:	6123      	str	r3, [r4, #16]
				buf32[pos++]=16;
 80024b4:	2310      	movs	r3, #16
 80024b6:	6163      	str	r3, [r4, #20]
				buf32[pos++]=1;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e004      	b.n	80024c6 <RNDIS_Control_FS+0x1aa>
				buf32[pos++]=16;
 80024bc:	2310      	movs	r3, #16
 80024be:	6163      	str	r3, [r4, #20]
				buf32[pos++]=4;
 80024c0:	6121      	str	r1, [r4, #16]
				buf32[pos++]=1500;
 80024c2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80024c6:	61a3      	str	r3, [r4, #24]
 80024c8:	2207      	movs	r2, #7
				break;
 80024ca:	e782      	b.n	80023d2 <RNDIS_Control_FS+0xb6>
				buf32[pos++]=4;
 80024cc:	2304      	movs	r3, #4
 80024ce:	6123      	str	r3, [r4, #16]
				buf32[pos++]=16;
 80024d0:	2310      	movs	r3, #16
 80024d2:	6163      	str	r3, [r4, #20]
				buf32[pos++]=100000/100;
 80024d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d8:	e7f5      	b.n	80024c6 <RNDIS_Control_FS+0x1aa>
				buf32[pos++]=6;
 80024da:	2306      	movs	r3, #6
 80024dc:	6123      	str	r3, [r4, #16]
				buf32[pos++]=16;
 80024de:	2310      	movs	r3, #16
 80024e0:	6163      	str	r3, [r4, #20]
				buf32[pos++]=0x00757840 | (DeviceID_8[0]<<24);
 80024e2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80024e6:	f5a3 4306 	sub.w	r3, r3, #34304	; 0x8600
 80024ea:	781a      	ldrb	r2, [r3, #0]
 80024ec:	4b39      	ldr	r3, [pc, #228]	; (80025d4 <RNDIS_Control_FS+0x2b8>)
 80024ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80024f2:	61a3      	str	r3, [r4, #24]
				buf32[pos++]=DeviceID_8[2]<<8 | DeviceID_8[1];
 80024f4:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <RNDIS_Control_FS+0x2bc>)
 80024f6:	781a      	ldrb	r2, [r3, #0]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				buf32[pos++]=0xFFEE;
 8002500:	61e3      	str	r3, [r4, #28]
				len=buf32[1]=pos*4-2;
 8002502:	221e      	movs	r2, #30
				len=buf32[1]=pos*4+sizeof(nome);
 8002504:	6062      	str	r2, [r4, #4]
		USBD_CtlSendData(&hUsbDeviceFS, pbuf, len);
 8002506:	4621      	mov	r1, r4
 8002508:	4824      	ldr	r0, [pc, #144]	; (800259c <RNDIS_Control_FS+0x280>)
 800250a:	f001 f8d0 	bl	80036ae <USBD_CtlSendData>
	return (USBD_OK);
 800250e:	e70c      	b.n	800232a <RNDIS_Control_FS+0xe>
				buf32[pos++]=6;
 8002510:	2306      	movs	r3, #6
 8002512:	6123      	str	r3, [r4, #16]
				buf32[pos++]=16;
 8002514:	2310      	movs	r3, #16
 8002516:	6163      	str	r3, [r4, #20]
				buf32[pos++]=0xDD757840;
 8002518:	4b30      	ldr	r3, [pc, #192]	; (80025dc <RNDIS_Control_FS+0x2c0>)
 800251a:	61a3      	str	r3, [r4, #24]
				buf32[pos++]=0xFFEE;
 800251c:	f64f 73ee 	movw	r3, #65518	; 0xffee
 8002520:	e7ee      	b.n	8002500 <RNDIS_Control_FS+0x1e4>
				buf32[pos++]=16;
 8002522:	2310      	movs	r3, #16
 8002524:	6163      	str	r3, [r4, #20]
				buf32[pos++]=4;
 8002526:	6121      	str	r1, [r4, #16]
				buf32[pos++]=1558;
 8002528:	f240 6316 	movw	r3, #1558	; 0x616
 800252c:	e7cb      	b.n	80024c6 <RNDIS_Control_FS+0x1aa>
				buf32[pos++]=4;
 800252e:	2304      	movs	r3, #4
 8002530:	6123      	str	r3, [r4, #16]
				buf32[pos++]=16;
 8002532:	2310      	movs	r3, #16
 8002534:	6163      	str	r3, [r4, #20]
				buf32[pos++]=rndis_oid_gen_xmit_ok & 0xffffffff;
 8002536:	4b2a      	ldr	r3, [pc, #168]	; (80025e0 <RNDIS_Control_FS+0x2c4>)
				buf32[pos++]=rndis_oid_gen_rcv_ok & 0xffffffff;
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	e7c4      	b.n	80024c6 <RNDIS_Control_FS+0x1aa>
				buf32[pos++]=16;
 800253c:	2310      	movs	r3, #16
 800253e:	6163      	str	r3, [r4, #20]
				buf32[pos++]=4;
 8002540:	6121      	str	r1, [r4, #16]
				buf32[pos++]=rndis_oid_gen_rcv_ok & 0xffffffff;
 8002542:	4b28      	ldr	r3, [pc, #160]	; (80025e4 <RNDIS_Control_FS+0x2c8>)
 8002544:	e7f8      	b.n	8002538 <RNDIS_Control_FS+0x21c>
				buf32[pos++]=16;
 8002546:	2310      	movs	r3, #16
				buf32[pos++]=4;
 8002548:	6121      	str	r1, [r4, #16]
				buf32[pos++]=16;
 800254a:	6163      	str	r3, [r4, #20]
				buf32[pos++]=0;
 800254c:	61a2      	str	r2, [r4, #24]
 800254e:	e7bb      	b.n	80024c8 <RNDIS_Control_FS+0x1ac>
				buf32[pos++]=3;
 8002550:	2303      	movs	r3, #3
 8002552:	6123      	str	r3, [r4, #16]
				buf32[pos++]=20;
 8002554:	2314      	movs	r3, #20
 8002556:	6163      	str	r3, [r4, #20]
				buf32[pos++]=0x00757840;
 8002558:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <RNDIS_Control_FS+0x2b8>)
 800255a:	61a3      	str	r3, [r4, #24]
				len=buf32[1]=pos*4-1;
 800255c:	221b      	movs	r2, #27
 800255e:	e7d1      	b.n	8002504 <RNDIS_Control_FS+0x1e8>
		} else if(rndis_data.MessageType==RNDIS_MSG_SET){
 8002560:	2905      	cmp	r1, #5
 8002562:	d107      	bne.n	8002574 <RNDIS_Control_FS+0x258>
			buf32[pos++]=rndis_data.RequestId;
 8002564:	685b      	ldr	r3, [r3, #4]
			buf32[pos++]=RNDIS_MSG_SET_C;
 8002566:	4a20      	ldr	r2, [pc, #128]	; (80025e8 <RNDIS_Control_FS+0x2cc>)
			buf32[pos++]=rndis_data.RequestId;
 8002568:	60a3      	str	r3, [r4, #8]
			buf32[pos++]=RNDIS_STATUS_SUCCESS;
 800256a:	2300      	movs	r3, #0
			buf32[pos++]=RNDIS_MSG_SET_C;
 800256c:	6022      	str	r2, [r4, #0]
			buf32[pos++]=RNDIS_STATUS_SUCCESS;
 800256e:	60e3      	str	r3, [r4, #12]
			buf32[pos++]=RNDIS_STATUS_SUCCESS;
 8002570:	2204      	movs	r2, #4
 8002572:	e72e      	b.n	80023d2 <RNDIS_Control_FS+0xb6>
		} else if(rndis_data.MessageType==RNDIS_MSG_RESET){
 8002574:	2906      	cmp	r1, #6
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	d104      	bne.n	8002586 <RNDIS_Control_FS+0x26a>
			buf32[pos++]=RNDIS_MSG_RESET_C;
 800257c:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <RNDIS_Control_FS+0x2d0>)
 800257e:	6023      	str	r3, [r4, #0]
			buf32[pos++]=RNDIS_STATUS_SUCCESS;
 8002580:	60a2      	str	r2, [r4, #8]
			buf32[pos++]=RNDIS_STATUS_SUCCESS;
 8002582:	60e2      	str	r2, [r4, #12]
 8002584:	e7f4      	b.n	8002570 <RNDIS_Control_FS+0x254>
		} else if(rndis_data.MessageType==RNDIS_MSG_KEEPALIVE){
 8002586:	2908      	cmp	r1, #8
 8002588:	f47f af23 	bne.w	80023d2 <RNDIS_Control_FS+0xb6>
			buf32[pos++]=RNDIS_MSG_KEEPALIVE_C;
 800258c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
			buf32[pos++]=rndis_data.RequestId;
 8002590:	685b      	ldr	r3, [r3, #4]
			buf32[pos++]=RNDIS_MSG_KEEPALIVE_C;
 8002592:	6021      	str	r1, [r4, #0]
			buf32[pos++]=rndis_data.RequestId;
 8002594:	60a3      	str	r3, [r4, #8]
 8002596:	e7f4      	b.n	8002582 <RNDIS_Control_FS+0x266>
 8002598:	20000c08 	.word	0x20000c08
 800259c:	20005778 	.word	0x20005778
 80025a0:	2000004c 	.word	0x2000004c
 80025a4:	08008d38 	.word	0x08008d38
 80025a8:	80000002 	.word	0x80000002
 80025ac:	80000004 	.word	0x80000004
 80025b0:	00010202 	.word	0x00010202
 80025b4:	0001010c 	.word	0x0001010c
 80025b8:	08008cc4 	.word	0x08008cc4
 80025bc:	00010111 	.word	0x00010111
 80025c0:	08008d28 	.word	0x08008d28
 80025c4:	00020104 	.word	0x00020104
 80025c8:	00020102 	.word	0x00020102
 80025cc:	00020105 	.word	0x00020105
 80025d0:	01010104 	.word	0x01010104
 80025d4:	00757840 	.word	0x00757840
 80025d8:	1fff7a12 	.word	0x1fff7a12
 80025dc:	dd757840 	.word	0xdd757840
 80025e0:	20000c38 	.word	0x20000c38
 80025e4:	20000c30 	.word	0x20000c30
 80025e8:	80000005 	.word	0x80000005
 80025ec:	80000006 	.word	0x80000006

080025f0 <RNDIS_DeInit_FS>:
{
 80025f0:	b508      	push	{r3, lr}
	RNDIS_Disconnect();
 80025f2:	f7ff fe7f 	bl	80022f4 <RNDIS_Disconnect>
}
 80025f6:	2000      	movs	r0, #0
 80025f8:	bd08      	pop	{r3, pc}
	...

080025fc <RNDIS_Init_FS>:
{ 
 80025fc:	b510      	push	{r4, lr}
	USBD_RNDIS_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80025fe:	4c07      	ldr	r4, [pc, #28]	; (800261c <RNDIS_Init_FS+0x20>)
 8002600:	4907      	ldr	r1, [pc, #28]	; (8002620 <RNDIS_Init_FS+0x24>)
 8002602:	2200      	movs	r2, #0
 8002604:	4620      	mov	r0, r4
 8002606:	f000 fd33 	bl	8003070 <USBD_RNDIS_SetTxBuffer>
	USBD_RNDIS_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS_Temp);
 800260a:	4906      	ldr	r1, [pc, #24]	; (8002624 <RNDIS_Init_FS+0x28>)
 800260c:	4620      	mov	r0, r4
 800260e:	f000 fd37 	bl	8003080 <USBD_RNDIS_SetRxBuffer>
	RNDIS_Disconnect();
 8002612:	f7ff fe6f 	bl	80022f4 <RNDIS_Disconnect>
}
 8002616:	2000      	movs	r0, #0
 8002618:	bd10      	pop	{r4, pc}
 800261a:	bf00      	nop
 800261c:	20005778 	.word	0x20005778
 8002620:	20005f8c 	.word	0x20005f8c
 8002624:	20000bc4 	.word	0x20000bc4

08002628 <RNDIS_Transmit_FS>:
{
 8002628:	b570      	push	{r4, r5, r6, lr}
	USBD_RNDIS_HandleTypeDef *hrndis = (USBD_RNDIS_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800262a:	4e1b      	ldr	r6, [pc, #108]	; (8002698 <RNDIS_Transmit_FS+0x70>)
 800262c:	f8d6 3218 	ldr.w	r3, [r6, #536]	; 0x218
	if (hrndis->TxState != 0 || rndis_state!=RNDIS_STATE_NORMAL){
 8002630:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002634:	bb73      	cbnz	r3, 8002694 <RNDIS_Transmit_FS+0x6c>
 8002636:	4b19      	ldr	r3, [pc, #100]	; (800269c <RNDIS_Transmit_FS+0x74>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2501      	movs	r5, #1
 800263c:	bb53      	cbnz	r3, 8002694 <RNDIS_Transmit_FS+0x6c>
	buffer[0]=0x00000001;	//MessageType
 800263e:	4c18      	ldr	r4, [pc, #96]	; (80026a0 <RNDIS_Transmit_FS+0x78>)
 8002640:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8002644:	460a      	mov	r2, r1
 8002646:	bf28      	it	cs
 8002648:	f44f 6200 	movcs.w	r2, #2048	; 0x800
 800264c:	6025      	str	r5, [r4, #0]
	buffer[2]=36;			//DataOffset
 800264e:	2124      	movs	r1, #36	; 0x24
	buffer[1]=Len+44;		//MessageLength
 8002650:	f102 052c 	add.w	r5, r2, #44	; 0x2c
	buffer[4]=0;			//OOBDataOffset
 8002654:	6123      	str	r3, [r4, #16]
	buffer[5]=0;			//OOBDataLength
 8002656:	6163      	str	r3, [r4, #20]
	buffer[6]=0;			//NumOOBDataElements
 8002658:	61a3      	str	r3, [r4, #24]
	buffer[7]=0;			//PerPacketInfoOffset
 800265a:	61e3      	str	r3, [r4, #28]
	buffer[8]=0;			//PerPacketInfoLength
 800265c:	6223      	str	r3, [r4, #32]
	buffer[9]=0;			//VcHandle
 800265e:	6263      	str	r3, [r4, #36]	; 0x24
	buffer[10]=0;			//Reserved
 8002660:	62a3      	str	r3, [r4, #40]	; 0x28
	buffer[2]=36;			//DataOffset
 8002662:	60a1      	str	r1, [r4, #8]
	buffer[3]=Len;			//DataLength
 8002664:	60e2      	str	r2, [r4, #12]
	memcpy(UserTxBufferFS+44, Buf, Len);
 8002666:	4601      	mov	r1, r0
	buffer[1]=Len+44;		//MessageLength
 8002668:	6065      	str	r5, [r4, #4]
	memcpy(UserTxBufferFS+44, Buf, Len);
 800266a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800266e:	f006 f948 	bl	8008902 <memcpy>
	USBD_RNDIS_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, Len+44);
 8002672:	b2aa      	uxth	r2, r5
 8002674:	4621      	mov	r1, r4
 8002676:	4630      	mov	r0, r6
 8002678:	f000 fcfa 	bl	8003070 <USBD_RNDIS_SetTxBuffer>
	result = USBD_RNDIS_TransmitPacket(&hUsbDeviceFS);
 800267c:	4630      	mov	r0, r6
 800267e:	f000 fd05 	bl	800308c <USBD_RNDIS_TransmitPacket>
	rndis_oid_gen_xmit_ok++;
 8002682:	4908      	ldr	r1, [pc, #32]	; (80026a4 <RNDIS_Transmit_FS+0x7c>)
 8002684:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002688:	3201      	adds	r2, #1
 800268a:	f143 0300 	adc.w	r3, r3, #0
 800268e:	e9c1 2300 	strd	r2, r3, [r1]
 8002692:	bd70      	pop	{r4, r5, r6, pc}
		return USBD_BUSY;
 8002694:	2001      	movs	r0, #1
 8002696:	bd70      	pop	{r4, r5, r6, pc}
 8002698:	20005778 	.word	0x20005778
 800269c:	2000004c 	.word	0x2000004c
 80026a0:	20005f8c 	.word	0x20005f8c
 80026a4:	20000c38 	.word	0x20000c38

080026a8 <xNetworkInterfaceInitialise>:
	if(rndis_state==RNDIS_STATE_NORMAL){
 80026a8:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <xNetworkInterfaceInitialise+0x2c>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
BaseType_t xNetworkInterfaceInitialise( void ){
 80026ac:	b507      	push	{r0, r1, r2, lr}
	if(rndis_state==RNDIS_STATE_NORMAL){
 80026ae:	b96b      	cbnz	r3, 80026cc <xNetworkInterfaceInitialise+0x24>
		if(xEMACTaskHandle==0){
 80026b0:	4a09      	ldr	r2, [pc, #36]	; (80026d8 <xNetworkInterfaceInitialise+0x30>)
 80026b2:	6813      	ldr	r3, [r2, #0]
 80026b4:	b943      	cbnz	r3, 80026c8 <xNetworkInterfaceInitialise+0x20>
			xTaskCreate( prvEMACHandlerTask, "EMAC", configEMAC_TASK_STACK_SIZE, NULL, configMAX_PRIORITIES - 1, &xEMACTaskHandle );
 80026b6:	9201      	str	r2, [sp, #4]
 80026b8:	2206      	movs	r2, #6
 80026ba:	9200      	str	r2, [sp, #0]
 80026bc:	4907      	ldr	r1, [pc, #28]	; (80026dc <xNetworkInterfaceInitialise+0x34>)
 80026be:	4808      	ldr	r0, [pc, #32]	; (80026e0 <xNetworkInterfaceInitialise+0x38>)
 80026c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026c4:	f002 f83c 	bl	8004740 <xTaskCreate>
		ret=1;
 80026c8:	2001      	movs	r0, #1
	return ret;
 80026ca:	e000      	b.n	80026ce <xNetworkInterfaceInitialise+0x26>
	BaseType_t ret=0;
 80026cc:	2000      	movs	r0, #0
}
 80026ce:	b003      	add	sp, #12
 80026d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80026d4:	2000004c 	.word	0x2000004c
 80026d8:	20000c40 	.word	0x20000c40
 80026dc:	08008d58 	.word	0x08008d58
 80026e0:	080021dd 	.word	0x080021dd

080026e4 <xNetworkInterfaceOutput>:
BaseType_t xNetworkInterfaceOutput( NetworkBufferDescriptor_t * const pxDescriptor, BaseType_t xReleaseAfterSend  ){
 80026e4:	b570      	push	{r4, r5, r6, lr}
 80026e6:	4605      	mov	r5, r0
 80026e8:	460e      	mov	r6, r1
	while(RNDIS_Transmit_FS( pxDescriptor->pucEthernetBuffer, pxDescriptor->xDataLength) ){
 80026ea:	2405      	movs	r4, #5
 80026ec:	8ba9      	ldrh	r1, [r5, #28]
 80026ee:	69a8      	ldr	r0, [r5, #24]
 80026f0:	f7ff ff9a 	bl	8002628 <RNDIS_Transmit_FS>
 80026f4:	b130      	cbz	r0, 8002704 <xNetworkInterfaceOutput+0x20>
		vTaskDelay(5);
 80026f6:	2005      	movs	r0, #5
 80026f8:	3c01      	subs	r4, #1
 80026fa:	f002 fa51 	bl	8004ba0 <vTaskDelay>
		if(retries>=5){
 80026fe:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002702:	d1f3      	bne.n	80026ec <xNetworkInterfaceOutput+0x8>
	if( xReleaseAfterSend != pdFALSE )
 8002704:	b116      	cbz	r6, 800270c <xNetworkInterfaceOutput+0x28>
		vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 8002706:	4628      	mov	r0, r5
 8002708:	f005 fed2 	bl	80084b0 <vReleaseNetworkBufferAndDescriptor>
}
 800270c:	2001      	movs	r0, #1
 800270e:	bd70      	pop	{r4, r5, r6, pc}

08002710 <USBD_COMPOSITE_Init>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8002710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t ret = 0;
	uint8_t index=0;

	for(index=0 ; index<usbd_composite_pClass_count;index++){
 8002714:	2400      	movs	r4, #0
 8002716:	4f14      	ldr	r7, [pc, #80]	; (8002768 <USBD_COMPOSITE_Init+0x58>)
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002718:	f8df a050 	ldr.w	sl, [pc, #80]	; 800276c <USBD_COMPOSITE_Init+0x5c>
{
 800271c:	4606      	mov	r6, r0
 800271e:	4689      	mov	r9, r1
	uint8_t ret = 0;
 8002720:	4625      	mov	r5, r4
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002722:	f04f 0b50 	mov.w	fp, #80	; 0x50
	for(index=0 ; index<usbd_composite_pClass_count;index++){
 8002726:	783b      	ldrb	r3, [r7, #0]
 8002728:	f104 0801 	add.w	r8, r4, #1
 800272c:	b2e4      	uxtb	r4, r4
 800272e:	42a3      	cmp	r3, r4
 8002730:	d802      	bhi.n	8002738 <USBD_COMPOSITE_Init+0x28>

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
	}
	return ret;
}
 8002732:	4628      	mov	r0, r5
 8002734:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002738:	fb0b a404 	mla	r4, fp, r4, sl
		ret|=usbd_composite_class_data[index].pClass->Init(pdev, cfgidx);
 800273c:	4649      	mov	r1, r9
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 800273e:	68a3      	ldr	r3, [r4, #8]
 8002740:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8002744:	68e3      	ldr	r3, [r4, #12]
 8002746:	f8c6 321c 	str.w	r3, [r6, #540]	; 0x21c
		ret|=usbd_composite_class_data[index].pClass->Init(pdev, cfgidx);
 800274a:	6863      	ldr	r3, [r4, #4]
 800274c:	4630      	mov	r0, r6
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4798      	blx	r3
		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8002752:	f8d6 3218 	ldr.w	r3, [r6, #536]	; 0x218
 8002756:	60a3      	str	r3, [r4, #8]
		ret|=usbd_composite_class_data[index].pClass->Init(pdev, cfgidx);
 8002758:	4305      	orrs	r5, r0
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 800275a:	f8d6 321c 	ldr.w	r3, [r6, #540]	; 0x21c
 800275e:	60e3      	str	r3, [r4, #12]
		ret|=usbd_composite_class_data[index].pClass->Init(pdev, cfgidx);
 8002760:	b2ed      	uxtb	r5, r5
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8002762:	4644      	mov	r4, r8
 8002764:	e7df      	b.n	8002726 <USBD_COMPOSITE_Init+0x16>
 8002766:	bf00      	nop
 8002768:	20001047 	.word	0x20001047
 800276c:	200067b8 	.word	0x200067b8

08002770 <USBD_COMPOSITE_DeInit>:
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_DeInit (USBD_HandleTypeDef *pdev,
		uint8_t cfgidx)
{
 8002770:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t ret = 0;

	uint8_t index=0;

	for(index=0 ; index<usbd_composite_pClass_count;index++){
 8002774:	2400      	movs	r4, #0
 8002776:	4f14      	ldr	r7, [pc, #80]	; (80027c8 <USBD_COMPOSITE_DeInit+0x58>)
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002778:	f8df a050 	ldr.w	sl, [pc, #80]	; 80027cc <USBD_COMPOSITE_DeInit+0x5c>
{
 800277c:	4606      	mov	r6, r0
 800277e:	4689      	mov	r9, r1
	uint8_t ret = 0;
 8002780:	4625      	mov	r5, r4
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002782:	f04f 0b50 	mov.w	fp, #80	; 0x50
	for(index=0 ; index<usbd_composite_pClass_count;index++){
 8002786:	783b      	ldrb	r3, [r7, #0]
 8002788:	f104 0801 	add.w	r8, r4, #1
 800278c:	b2e4      	uxtb	r4, r4
 800278e:	42a3      	cmp	r3, r4
 8002790:	d802      	bhi.n	8002798 <USBD_COMPOSITE_DeInit+0x28>
		usbd_composite_class_data[index].pClassData=pdev->pClassData;
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
	}

	return ret;
}
 8002792:	4628      	mov	r0, r5
 8002794:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002798:	fb0b a404 	mla	r4, fp, r4, sl
		ret|=usbd_composite_class_data[index].pClass->DeInit(pdev, cfgidx);
 800279c:	4649      	mov	r1, r9
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 800279e:	68a3      	ldr	r3, [r4, #8]
 80027a0:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 80027a4:	68e3      	ldr	r3, [r4, #12]
 80027a6:	f8c6 321c 	str.w	r3, [r6, #540]	; 0x21c
		ret|=usbd_composite_class_data[index].pClass->DeInit(pdev, cfgidx);
 80027aa:	6863      	ldr	r3, [r4, #4]
 80027ac:	4630      	mov	r0, r6
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4798      	blx	r3
		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 80027b2:	f8d6 3218 	ldr.w	r3, [r6, #536]	; 0x218
 80027b6:	60a3      	str	r3, [r4, #8]
		ret|=usbd_composite_class_data[index].pClass->DeInit(pdev, cfgidx);
 80027b8:	4305      	orrs	r5, r0
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 80027ba:	f8d6 321c 	ldr.w	r3, [r6, #540]	; 0x21c
 80027be:	60e3      	str	r3, [r4, #12]
		ret|=usbd_composite_class_data[index].pClass->DeInit(pdev, cfgidx);
 80027c0:	b2ed      	uxtb	r5, r5
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 80027c2:	4644      	mov	r4, r8
 80027c4:	e7df      	b.n	8002786 <USBD_COMPOSITE_DeInit+0x16>
 80027c6:	bf00      	nop
 80027c8:	20001047 	.word	0x20001047
 80027cc:	200067b8 	.word	0x200067b8

080027d0 <USBD_COMPOSITE_Setup>:
 * @param  req: usb requests
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_Setup (USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req)
{
 80027d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t status=USBD_OK;
	uint8_t itf=0;
	uint8_t index=-1;
	uint8_t i=0;

	switch(req->bmRequest & 0x1F) {
 80027d4:	780b      	ldrb	r3, [r1, #0]
 80027d6:	4f39      	ldr	r7, [pc, #228]	; (80028bc <USBD_COMPOSITE_Setup+0xec>)
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	2b01      	cmp	r3, #1
{
 80027de:	4605      	mov	r5, r0
	switch(req->bmRequest & 0x1F) {
 80027e0:	d01c      	beq.n	800281c <USBD_COMPOSITE_Setup+0x4c>
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d162      	bne.n	80028ac <USBD_COMPOSITE_Setup+0xdc>
			if(LOBYTE(req->wIndex)<itf)
				break;
		}
		break;
	case USB_REQ_RECIPIENT_ENDPOINT:
		for(index=0;index<usbd_composite_pClass_count;index++){
 80027e6:	f897 c000 	ldrb.w	ip, [r7]
 80027ea:	4a35      	ldr	r2, [pc, #212]	; (80028c0 <USBD_COMPOSITE_Setup+0xf0>)
 80027ec:	f04f 0e00 	mov.w	lr, #0
 80027f0:	fa5f f48e 	uxtb.w	r4, lr
 80027f4:	4564      	cmp	r4, ip
 80027f6:	d225      	bcs.n	8002844 <USBD_COMPOSITE_Setup+0x74>
			if(req->wIndex & 0x80){
 80027f8:	888b      	ldrh	r3, [r1, #4]
 80027fa:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80027fe:	d13e      	bne.n	800287e <USBD_COMPOSITE_Setup+0xae>
					if(usbd_composite_class_data[index].inEPa[i]==(req->wIndex & 0x7F)){
						break;
					}
				}
			} else {
				for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 8002800:	f892 8011 	ldrb.w	r8, [r2, #17]
					if(usbd_composite_class_data[index].outEPa[i]==LOBYTE(req->wIndex)){
 8002804:	b2db      	uxtb	r3, r3
 8002806:	b2c6      	uxtb	r6, r0
				for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 8002808:	4546      	cmp	r6, r8
 800280a:	d247      	bcs.n	800289c <USBD_COMPOSITE_Setup+0xcc>
					if(usbd_composite_class_data[index].outEPa[i]==LOBYTE(req->wIndex)){
 800280c:	eb02 0900 	add.w	r9, r2, r0
 8002810:	3001      	adds	r0, #1
 8002812:	f899 903f 	ldrb.w	r9, [r9, #63]	; 0x3f
 8002816:	4599      	cmp	r9, r3
 8002818:	d1f5      	bne.n	8002806 <USBD_COMPOSITE_Setup+0x36>
 800281a:	e03f      	b.n	800289c <USBD_COMPOSITE_Setup+0xcc>
		for(index=0;index<usbd_composite_pClass_count;index++){
 800281c:	2300      	movs	r3, #0
 800281e:	7838      	ldrb	r0, [r7, #0]
			itf+=usbd_composite_class_data[index].bInterfaces;
 8002820:	f8df e09c 	ldr.w	lr, [pc, #156]	; 80028c0 <USBD_COMPOSITE_Setup+0xf0>
		for(index=0;index<usbd_composite_pClass_count;index++){
 8002824:	461a      	mov	r2, r3
			itf+=usbd_composite_class_data[index].bInterfaces;
 8002826:	2650      	movs	r6, #80	; 0x50
 8002828:	b2dc      	uxtb	r4, r3
		for(index=0;index<usbd_composite_pClass_count;index++){
 800282a:	4284      	cmp	r4, r0
 800282c:	d20a      	bcs.n	8002844 <USBD_COMPOSITE_Setup+0x74>
			itf+=usbd_composite_class_data[index].bInterfaces;
 800282e:	fb06 ec03 	mla	ip, r6, r3, lr
 8002832:	3301      	adds	r3, #1
 8002834:	f89c c003 	ldrb.w	ip, [ip, #3]
 8002838:	4462      	add	r2, ip
			if(LOBYTE(req->wIndex)<itf)
 800283a:	f891 c004 	ldrb.w	ip, [r1, #4]
			itf+=usbd_composite_class_data[index].bInterfaces;
 800283e:	b2d2      	uxtb	r2, r2
			if(LOBYTE(req->wIndex)<itf)
 8002840:	4562      	cmp	r2, ip
 8002842:	d9f1      	bls.n	8002828 <USBD_COMPOSITE_Setup+0x58>
				break;
			}
		}
		break;
	}
	if(index!=-1 && index!=usbd_composite_pClass_count){
 8002844:	783b      	ldrb	r3, [r7, #0]
 8002846:	42a3      	cmp	r3, r4
 8002848:	d034      	beq.n	80028b4 <USBD_COMPOSITE_Setup+0xe4>
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 800284a:	4e1d      	ldr	r6, [pc, #116]	; (80028c0 <USBD_COMPOSITE_Setup+0xf0>)
 800284c:	2350      	movs	r3, #80	; 0x50
 800284e:	fb03 6304 	mla	r3, r3, r4, r6
 8002852:	6898      	ldr	r0, [r3, #8]
 8002854:	f8c5 0218 	str.w	r0, [r5, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8002858:	68d8      	ldr	r0, [r3, #12]

		if(usbd_composite_class_data[index].pClass->Setup){
 800285a:	685b      	ldr	r3, [r3, #4]
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 800285c:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
		if(usbd_composite_class_data[index].pClass->Setup){
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	b32b      	cbz	r3, 80028b0 <USBD_COMPOSITE_Setup+0xe0>
			status=usbd_composite_class_data[index].pClass->Setup(pdev, req);
 8002864:	4628      	mov	r0, r5
 8002866:	4798      	blx	r3
		}

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8002868:	2350      	movs	r3, #80	; 0x50
 800286a:	fb03 6404 	mla	r4, r3, r4, r6
 800286e:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8002872:	60a3      	str	r3, [r4, #8]
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8002874:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002878:	60e3      	str	r3, [r4, #12]
 800287a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 800287e:	f892 8010 	ldrb.w	r8, [r2, #16]
 8002882:	2000      	movs	r0, #0
					if(usbd_composite_class_data[index].inEPa[i]==(req->wIndex & 0x7F)){
 8002884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002888:	b2c6      	uxtb	r6, r0
				for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 800288a:	4546      	cmp	r6, r8
 800288c:	d206      	bcs.n	800289c <USBD_COMPOSITE_Setup+0xcc>
					if(usbd_composite_class_data[index].inEPa[i]==(req->wIndex & 0x7F)){
 800288e:	eb02 0900 	add.w	r9, r2, r0
 8002892:	3001      	adds	r0, #1
 8002894:	f899 9030 	ldrb.w	r9, [r9, #48]	; 0x30
 8002898:	4599      	cmp	r9, r3
 800289a:	d1f5      	bne.n	8002888 <USBD_COMPOSITE_Setup+0xb8>
			if(i!=usbd_composite_class_data[index].inEP){
 800289c:	7c13      	ldrb	r3, [r2, #16]
 800289e:	429e      	cmp	r6, r3
 80028a0:	f10e 0e01 	add.w	lr, lr, #1
 80028a4:	f102 0250 	add.w	r2, r2, #80	; 0x50
 80028a8:	d0a2      	beq.n	80027f0 <USBD_COMPOSITE_Setup+0x20>
 80028aa:	e7cb      	b.n	8002844 <USBD_COMPOSITE_Setup+0x74>
	uint8_t index=-1;
 80028ac:	24ff      	movs	r4, #255	; 0xff
 80028ae:	e7c9      	b.n	8002844 <USBD_COMPOSITE_Setup+0x74>
	uint8_t status=USBD_OK;
 80028b0:	4618      	mov	r0, r3
 80028b2:	e7d9      	b.n	8002868 <USBD_COMPOSITE_Setup+0x98>
 80028b4:	2000      	movs	r0, #0
	}

	return status;
}
 80028b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028ba:	bf00      	nop
 80028bc:	20001047 	.word	0x20001047
 80028c0:	200067b8 	.word	0x200067b8

080028c4 <USBD_COMPOSITE_DataIn>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80028c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t status=USBD_OK;
	uint8_t index=0;
	uint8_t i=0;

	for(index=0;index<usbd_composite_pClass_count;index++){
 80028c6:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <USBD_COMPOSITE_DataIn+0x70>)
{
 80028c8:	4605      	mov	r5, r0
 80028ca:	481b      	ldr	r0, [pc, #108]	; (8002938 <USBD_COMPOSITE_DataIn+0x74>)
	for(index=0;index<usbd_composite_pClass_count;index++){
 80028cc:	f893 e000 	ldrb.w	lr, [r3]
 80028d0:	2400      	movs	r4, #0
 80028d2:	4606      	mov	r6, r0
 80028d4:	b2e3      	uxtb	r3, r4
 80028d6:	459e      	cmp	lr, r3
 80028d8:	d929      	bls.n	800292e <USBD_COMPOSITE_DataIn+0x6a>
		for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 80028da:	7c07      	ldrb	r7, [r0, #16]
 80028dc:	2200      	movs	r2, #0
 80028de:	b2d3      	uxtb	r3, r2
 80028e0:	429f      	cmp	r7, r3
 80028e2:	d802      	bhi.n	80028ea <USBD_COMPOSITE_DataIn+0x26>
 80028e4:	3401      	adds	r4, #1
 80028e6:	3050      	adds	r0, #80	; 0x50
 80028e8:	e7f4      	b.n	80028d4 <USBD_COMPOSITE_DataIn+0x10>
			if(usbd_composite_class_data[index].inEPa[i]==epnum){
 80028ea:	4694      	mov	ip, r2
 80028ec:	3201      	adds	r2, #1
 80028ee:	1883      	adds	r3, r0, r2
 80028f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80028f4:	428b      	cmp	r3, r1
 80028f6:	d1f2      	bne.n	80028de <USBD_COMPOSITE_DataIn+0x1a>
				pdev->pClassData=usbd_composite_class_data[index].pClassData;
 80028f8:	2350      	movs	r3, #80	; 0x50
 80028fa:	fb03 6304 	mla	r3, r3, r4, r6
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	f8c5 2218 	str.w	r2, [r5, #536]	; 0x218
				pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c

				if(usbd_composite_class_data[index].pClass->DataOut){
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	6990      	ldr	r0, [r2, #24]
 800290e:	b120      	cbz	r0, 800291a <USBD_COMPOSITE_DataIn+0x56>
					status|=usbd_composite_class_data[index].pClass->DataIn(pdev, usbd_composite_class_data[index].inEPn[i]);
 8002910:	4463      	add	r3, ip
 8002912:	6952      	ldr	r2, [r2, #20]
 8002914:	7c99      	ldrb	r1, [r3, #18]
 8002916:	4628      	mov	r0, r5
 8002918:	4790      	blx	r2
				}

				usbd_composite_class_data[index].pClassData=pdev->pClassData;
 800291a:	2350      	movs	r3, #80	; 0x50
 800291c:	fb03 6404 	mla	r4, r3, r4, r6
 8002920:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8002924:	60a3      	str	r3, [r4, #8]
				usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8002926:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800292a:	60e3      	str	r3, [r4, #12]
				return status;
 800292c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
		}
	}
	return status;
 800292e:	2000      	movs	r0, #0
}
 8002930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002932:	bf00      	nop
 8002934:	20001047 	.word	0x20001047
 8002938:	200067b8 	.word	0x200067b8

0800293c <USBD_COMPOSITE_DataOut>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t status=USBD_OK;
	uint8_t index=0;
	for(index=0;index<usbd_composite_pClass_count;index++){
 800293e:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <USBD_COMPOSITE_DataOut+0x74>)
{      
 8002940:	4605      	mov	r5, r0
 8002942:	481c      	ldr	r0, [pc, #112]	; (80029b4 <USBD_COMPOSITE_DataOut+0x78>)
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002944:	f893 e000 	ldrb.w	lr, [r3]
 8002948:	2400      	movs	r4, #0
 800294a:	4606      	mov	r6, r0
 800294c:	b2e3      	uxtb	r3, r4
 800294e:	459e      	cmp	lr, r3
 8002950:	d92b      	bls.n	80029aa <USBD_COMPOSITE_DataOut+0x6e>
		uint8_t i=0;
		for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 8002952:	7c47      	ldrb	r7, [r0, #17]
 8002954:	2200      	movs	r2, #0
 8002956:	b2d3      	uxtb	r3, r2
 8002958:	429f      	cmp	r7, r3
 800295a:	d802      	bhi.n	8002962 <USBD_COMPOSITE_DataOut+0x26>
 800295c:	3401      	adds	r4, #1
 800295e:	3050      	adds	r0, #80	; 0x50
 8002960:	e7f4      	b.n	800294c <USBD_COMPOSITE_DataOut+0x10>
			if(usbd_composite_class_data[index].outEPa[i]==epnum){
 8002962:	4694      	mov	ip, r2
 8002964:	3201      	adds	r2, #1
 8002966:	1883      	adds	r3, r0, r2
 8002968:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800296c:	428b      	cmp	r3, r1
 800296e:	d1f2      	bne.n	8002956 <USBD_COMPOSITE_DataOut+0x1a>
				pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002970:	2350      	movs	r3, #80	; 0x50
 8002972:	fb03 6304 	mla	r3, r3, r4, r6
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	f8c5 2218 	str.w	r2, [r5, #536]	; 0x218
				pdev->pUserData=usbd_composite_class_data[index].pUserData;
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c

				if(usbd_composite_class_data[index].pClass->DataOut){
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	6992      	ldr	r2, [r2, #24]
 8002986:	b172      	cbz	r2, 80029a6 <USBD_COMPOSITE_DataOut+0x6a>
					status|=usbd_composite_class_data[index].pClass->DataOut(pdev, usbd_composite_class_data[index].outEPn[i]);
 8002988:	4463      	add	r3, ip
 800298a:	4628      	mov	r0, r5
 800298c:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8002990:	4790      	blx	r2
				}

				usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8002992:	2350      	movs	r3, #80	; 0x50
 8002994:	fb03 6404 	mla	r4, r3, r4, r6
 8002998:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 800299c:	60a3      	str	r3, [r4, #8]
				usbd_composite_class_data[index].pUserData=pdev->pUserData;
 800299e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 80029a2:	60e3      	str	r3, [r4, #12]
				return status;
 80029a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t status=USBD_OK;
 80029a6:	4610      	mov	r0, r2
 80029a8:	e7f3      	b.n	8002992 <USBD_COMPOSITE_DataOut+0x56>
			}
		}
	}
	return status;
 80029aa:	2000      	movs	r0, #0
}
 80029ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20001047 	.word	0x20001047
 80029b4:	200067b8 	.word	0x200067b8

080029b8 <USBD_COMPOSITE_EP0_RxReady>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 80029b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t status=USBD_OK;
	uint8_t index;
	for(index=0;index<usbd_composite_pClass_count;index++){
 80029bc:	2600      	movs	r6, #0
 80029be:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8002a10 <USBD_COMPOSITE_EP0_RxReady+0x58>
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 80029c2:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8002a14 <USBD_COMPOSITE_EP0_RxReady+0x5c>
{ 
 80029c6:	4605      	mov	r5, r0
	uint8_t status=USBD_OK;
 80029c8:	4634      	mov	r4, r6
	for(index=0;index<usbd_composite_pClass_count;index++){
 80029ca:	f899 3000 	ldrb.w	r3, [r9]
 80029ce:	b2f7      	uxtb	r7, r6
 80029d0:	42bb      	cmp	r3, r7
 80029d2:	d802      	bhi.n	80029da <USBD_COMPOSITE_EP0_RxReady+0x22>

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
	}
	return status;
}
 80029d4:	4620      	mov	r0, r4
 80029d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 80029da:	2350      	movs	r3, #80	; 0x50
 80029dc:	fb03 8307 	mla	r3, r3, r7, r8
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	f8c5 2218 	str.w	r2, [r5, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 80029e6:	68da      	ldr	r2, [r3, #12]
		if(usbd_composite_class_data[index].pClass->EP0_RxReady){
 80029e8:	685b      	ldr	r3, [r3, #4]
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 80029ea:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c
		if(usbd_composite_class_data[index].pClass->EP0_RxReady){
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	b11b      	cbz	r3, 80029fa <USBD_COMPOSITE_EP0_RxReady+0x42>
			status|=usbd_composite_class_data[index].pClass->EP0_RxReady(pdev);
 80029f2:	4628      	mov	r0, r5
 80029f4:	4798      	blx	r3
 80029f6:	4304      	orrs	r4, r0
 80029f8:	b2e4      	uxtb	r4, r4
		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 80029fa:	2350      	movs	r3, #80	; 0x50
 80029fc:	fb03 8307 	mla	r3, r3, r7, r8
 8002a00:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 8002a04:	609a      	str	r2, [r3, #8]
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8002a06:	f8d5 221c 	ldr.w	r2, [r5, #540]	; 0x21c
 8002a0a:	60da      	str	r2, [r3, #12]
 8002a0c:	3601      	adds	r6, #1
 8002a0e:	e7dc      	b.n	80029ca <USBD_COMPOSITE_EP0_RxReady+0x12>
 8002a10:	20001047 	.word	0x20001047
 8002a14:	200067b8 	.word	0x200067b8

08002a18 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_COMPOSITE_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8002a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t status=USBD_OK;
	uint8_t index;
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002a1c:	2600      	movs	r6, #0
 8002a1e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8002a70 <USBD_COMPOSITE_EP0_TxReady+0x58>
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002a22:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8002a74 <USBD_COMPOSITE_EP0_TxReady+0x5c>
{
 8002a26:	4605      	mov	r5, r0
	uint8_t status=USBD_OK;
 8002a28:	4634      	mov	r4, r6
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002a2a:	f899 3000 	ldrb.w	r3, [r9]
 8002a2e:	b2f7      	uxtb	r7, r6
 8002a30:	42bb      	cmp	r3, r7
 8002a32:	d802      	bhi.n	8002a3a <USBD_COMPOSITE_EP0_TxReady+0x22>

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
	}
	return status;
}
 8002a34:	4620      	mov	r0, r4
 8002a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002a3a:	2350      	movs	r3, #80	; 0x50
 8002a3c:	fb03 8307 	mla	r3, r3, r7, r8
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	f8c5 2218 	str.w	r2, [r5, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8002a46:	68da      	ldr	r2, [r3, #12]
		if(usbd_composite_class_data[index].pClass->EP0_TxSent){
 8002a48:	685b      	ldr	r3, [r3, #4]
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8002a4a:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c
		if(usbd_composite_class_data[index].pClass->EP0_TxSent){
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	b11b      	cbz	r3, 8002a5a <USBD_COMPOSITE_EP0_TxReady+0x42>
			status|=usbd_composite_class_data[index].pClass->EP0_TxSent(pdev);
 8002a52:	4628      	mov	r0, r5
 8002a54:	4798      	blx	r3
 8002a56:	4304      	orrs	r4, r0
 8002a58:	b2e4      	uxtb	r4, r4
		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8002a5a:	2350      	movs	r3, #80	; 0x50
 8002a5c:	fb03 8307 	mla	r3, r3, r7, r8
 8002a60:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 8002a64:	609a      	str	r2, [r3, #8]
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8002a66:	f8d5 221c 	ldr.w	r2, [r5, #540]	; 0x21c
 8002a6a:	60da      	str	r2, [r3, #12]
 8002a6c:	3601      	adds	r6, #1
 8002a6e:	e7dc      	b.n	8002a2a <USBD_COMPOSITE_EP0_TxReady+0x12>
 8002a70:	20001047 	.word	0x20001047
 8002a74:	200067b8 	.word	0x200067b8

08002a78 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_COMPOSITE_SOF (USBD_HandleTypeDef *pdev)
{
 8002a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t status=USBD_OK;
	uint8_t index;
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002a7c:	2600      	movs	r6, #0
 8002a7e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8002ad0 <USBD_COMPOSITE_SOF+0x58>
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002a82:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8002ad4 <USBD_COMPOSITE_SOF+0x5c>
{
 8002a86:	4605      	mov	r5, r0
	uint8_t status=USBD_OK;
 8002a88:	4634      	mov	r4, r6
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002a8a:	f899 3000 	ldrb.w	r3, [r9]
 8002a8e:	b2f7      	uxtb	r7, r6
 8002a90:	42bb      	cmp	r3, r7
 8002a92:	d802      	bhi.n	8002a9a <USBD_COMPOSITE_SOF+0x22>

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
	}
	return status;
}
 8002a94:	4620      	mov	r0, r4
 8002a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002a9a:	2350      	movs	r3, #80	; 0x50
 8002a9c:	fb03 8307 	mla	r3, r3, r7, r8
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	f8c5 2218 	str.w	r2, [r5, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8002aa6:	68da      	ldr	r2, [r3, #12]
		if(usbd_composite_class_data[index].pClass->SOF){
 8002aa8:	685b      	ldr	r3, [r3, #4]
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8002aaa:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c
		if(usbd_composite_class_data[index].pClass->SOF){
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	b11b      	cbz	r3, 8002aba <USBD_COMPOSITE_SOF+0x42>
			status|=usbd_composite_class_data[index].pClass->SOF(pdev);
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	4798      	blx	r3
 8002ab6:	4304      	orrs	r4, r0
 8002ab8:	b2e4      	uxtb	r4, r4
		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8002aba:	2350      	movs	r3, #80	; 0x50
 8002abc:	fb03 8307 	mla	r3, r3, r7, r8
 8002ac0:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 8002ac4:	609a      	str	r2, [r3, #8]
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8002ac6:	f8d5 221c 	ldr.w	r2, [r5, #540]	; 0x21c
 8002aca:	60da      	str	r2, [r3, #12]
 8002acc:	3601      	adds	r6, #1
 8002ace:	e7dc      	b.n	8002a8a <USBD_COMPOSITE_SOF+0x12>
 8002ad0:	20001047 	.word	0x20001047
 8002ad4:	200067b8 	.word	0x200067b8

08002ad8 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_COMPOSITE_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8002ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t status=USBD_OK;
	uint8_t index=0;
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002ada:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <USBD_COMPOSITE_IsoINIncomplete+0x70>)
{
 8002adc:	4605      	mov	r5, r0
 8002ade:	481b      	ldr	r0, [pc, #108]	; (8002b4c <USBD_COMPOSITE_IsoINIncomplete+0x74>)
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002ae0:	f893 e000 	ldrb.w	lr, [r3]
 8002ae4:	2400      	movs	r4, #0
 8002ae6:	4606      	mov	r6, r0
 8002ae8:	b2e3      	uxtb	r3, r4
 8002aea:	459e      	cmp	lr, r3
 8002aec:	d92a      	bls.n	8002b44 <USBD_COMPOSITE_IsoINIncomplete+0x6c>
		uint8_t i=0;
		for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 8002aee:	7c07      	ldrb	r7, [r0, #16]
 8002af0:	2200      	movs	r2, #0
 8002af2:	b2d3      	uxtb	r3, r2
 8002af4:	429f      	cmp	r7, r3
 8002af6:	d802      	bhi.n	8002afe <USBD_COMPOSITE_IsoINIncomplete+0x26>
 8002af8:	3401      	adds	r4, #1
 8002afa:	3050      	adds	r0, #80	; 0x50
 8002afc:	e7f4      	b.n	8002ae8 <USBD_COMPOSITE_IsoINIncomplete+0x10>
			if(usbd_composite_class_data[index].inEPa[i]==epnum){
 8002afe:	4694      	mov	ip, r2
 8002b00:	3201      	adds	r2, #1
 8002b02:	1883      	adds	r3, r0, r2
 8002b04:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002b08:	428b      	cmp	r3, r1
 8002b0a:	d1f2      	bne.n	8002af2 <USBD_COMPOSITE_IsoINIncomplete+0x1a>
				pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002b0c:	2350      	movs	r3, #80	; 0x50
 8002b0e:	fb03 6304 	mla	r3, r3, r4, r6
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	f8c5 2218 	str.w	r2, [r5, #536]	; 0x218
				pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c

				if(usbd_composite_class_data[index].pClass->IsoINIncomplete){
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	6a12      	ldr	r2, [r2, #32]
 8002b22:	b16a      	cbz	r2, 8002b40 <USBD_COMPOSITE_IsoINIncomplete+0x68>
					status|=usbd_composite_class_data[index].pClass->IsoINIncomplete(pdev, usbd_composite_class_data[index].inEPn[i]);
 8002b24:	4463      	add	r3, ip
 8002b26:	4628      	mov	r0, r5
 8002b28:	7c99      	ldrb	r1, [r3, #18]
 8002b2a:	4790      	blx	r2
				}

				usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8002b2c:	2350      	movs	r3, #80	; 0x50
 8002b2e:	fb03 6404 	mla	r4, r3, r4, r6
 8002b32:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8002b36:	60a3      	str	r3, [r4, #8]
				usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8002b38:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002b3c:	60e3      	str	r3, [r4, #12]
				return status;
 8002b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t status=USBD_OK;
 8002b40:	4610      	mov	r0, r2
 8002b42:	e7f3      	b.n	8002b2c <USBD_COMPOSITE_IsoINIncomplete+0x54>
			}
		}
	}
	return status;
 8002b44:	2000      	movs	r0, #0
}
 8002b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b48:	20001047 	.word	0x20001047
 8002b4c:	200067b8 	.word	0x200067b8

08002b50 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_COMPOSITE_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8002b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	uint8_t status=USBD_OK;
	uint8_t index=0;
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002b52:	4b1c      	ldr	r3, [pc, #112]	; (8002bc4 <USBD_COMPOSITE_IsoOutIncomplete+0x74>)
{
 8002b54:	4605      	mov	r5, r0
 8002b56:	481c      	ldr	r0, [pc, #112]	; (8002bc8 <USBD_COMPOSITE_IsoOutIncomplete+0x78>)
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002b58:	f893 e000 	ldrb.w	lr, [r3]
 8002b5c:	2400      	movs	r4, #0
 8002b5e:	4606      	mov	r6, r0
 8002b60:	b2e3      	uxtb	r3, r4
 8002b62:	459e      	cmp	lr, r3
 8002b64:	d92b      	bls.n	8002bbe <USBD_COMPOSITE_IsoOutIncomplete+0x6e>
		uint8_t i=0;
		for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 8002b66:	7c47      	ldrb	r7, [r0, #17]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	b2d3      	uxtb	r3, r2
 8002b6c:	429f      	cmp	r7, r3
 8002b6e:	d802      	bhi.n	8002b76 <USBD_COMPOSITE_IsoOutIncomplete+0x26>
 8002b70:	3401      	adds	r4, #1
 8002b72:	3050      	adds	r0, #80	; 0x50
 8002b74:	e7f4      	b.n	8002b60 <USBD_COMPOSITE_IsoOutIncomplete+0x10>
			if(usbd_composite_class_data[index].outEPa[i]==epnum){
 8002b76:	4694      	mov	ip, r2
 8002b78:	3201      	adds	r2, #1
 8002b7a:	1883      	adds	r3, r0, r2
 8002b7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b80:	428b      	cmp	r3, r1
 8002b82:	d1f2      	bne.n	8002b6a <USBD_COMPOSITE_IsoOutIncomplete+0x1a>
				pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002b84:	2350      	movs	r3, #80	; 0x50
 8002b86:	fb03 6304 	mla	r3, r3, r4, r6
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	f8c5 2218 	str.w	r2, [r5, #536]	; 0x218
				pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c

				if(usbd_composite_class_data[index].pClass->IsoOUTIncomplete){
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b9a:	b172      	cbz	r2, 8002bba <USBD_COMPOSITE_IsoOutIncomplete+0x6a>
					status|=usbd_composite_class_data[index].pClass->IsoOUTIncomplete(pdev, usbd_composite_class_data[index].outEPn[i]);
 8002b9c:	4463      	add	r3, ip
 8002b9e:	4628      	mov	r0, r5
 8002ba0:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8002ba4:	4790      	blx	r2
				}

				usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8002ba6:	2350      	movs	r3, #80	; 0x50
 8002ba8:	fb03 6404 	mla	r4, r3, r4, r6
 8002bac:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8002bb0:	60a3      	str	r3, [r4, #8]
				usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8002bb2:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002bb6:	60e3      	str	r3, [r4, #12]
				return status;
 8002bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t status=USBD_OK;
 8002bba:	4610      	mov	r0, r2
 8002bbc:	e7f3      	b.n	8002ba6 <USBD_COMPOSITE_IsoOutIncomplete+0x56>
			}
		}
	}
	return status;
 8002bbe:	2000      	movs	r0, #0
}
 8002bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20001047 	.word	0x20001047
 8002bc8:	200067b8 	.word	0x200067b8

08002bcc <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_COMPOSITE_GetFSCfgDesc (uint16_t *length)
{
	*length=descriptor_size;
 8002bcc:	4b02      	ldr	r3, [pc, #8]	; (8002bd8 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0xc>)
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	8003      	strh	r3, [r0, #0]
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_COMPOSITE_GetOtherSpeedCfgDesc (uint16_t *length)
{
	return USBD_COMPOSITE_GetFSCfgDesc(length);
}
 8002bd2:	4802      	ldr	r0, [pc, #8]	; (8002bdc <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x10>)
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20001044 	.word	0x20001044
 8002bdc:	20000c44 	.word	0x20000c44

08002be0 <USBD_COMPOSITE_GetDeviceQualifierDescriptor>:
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
uint8_t  *USBD_COMPOSITE_GetDeviceQualifierDescriptor (uint16_t *length)
{
	*length = sizeof (USBD_COMPOSITE_DeviceQualifierDesc);
 8002be0:	230a      	movs	r3, #10
 8002be2:	8003      	strh	r3, [r0, #0]
	return USBD_COMPOSITE_DeviceQualifierDesc;
}
 8002be4:	4800      	ldr	r0, [pc, #0]	; (8002be8 <USBD_COMPOSITE_GetDeviceQualifierDescriptor+0x8>)
 8002be6:	4770      	bx	lr
 8002be8:	20000094 	.word	0x20000094

08002bec <USBD_COMPOSITE_GetHSCfgDesc>:
 8002bec:	4b02      	ldr	r3, [pc, #8]	; (8002bf8 <USBD_COMPOSITE_GetHSCfgDesc+0xc>)
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	8003      	strh	r3, [r0, #0]
 8002bf2:	4802      	ldr	r0, [pc, #8]	; (8002bfc <USBD_COMPOSITE_GetHSCfgDesc+0x10>)
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20001044 	.word	0x20001044
 8002bfc:	20000c44 	.word	0x20000c44

08002c00 <USBD_COMPOSITE_GetFSCfgDesc>:
 8002c00:	4b02      	ldr	r3, [pc, #8]	; (8002c0c <USBD_COMPOSITE_GetFSCfgDesc+0xc>)
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	8003      	strh	r3, [r0, #0]
 8002c06:	4802      	ldr	r0, [pc, #8]	; (8002c10 <USBD_COMPOSITE_GetFSCfgDesc+0x10>)
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	20001044 	.word	0x20001044
 8002c10:	20000c44 	.word	0x20000c44

08002c14 <USBD_COMPOSITE_RegisterClass>:

USBD_StatusTypeDef  USBD_COMPOSITE_RegisterClass(USBD_HandleTypeDef *pdev, uint8_t bFunctionClass, uint8_t bFunctionSubClass, uint8_t bFunctionProtocol){
 8002c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	USBD_StatusTypeDef   status = USBD_OK;
	uint8_t lastIfc=-1;
	if(descriptor_size==0){
 8002c18:	4c72      	ldr	r4, [pc, #456]	; (8002de4 <USBD_COMPOSITE_RegisterClass+0x1d0>)
USBD_StatusTypeDef  USBD_COMPOSITE_RegisterClass(USBD_HandleTypeDef *pdev, uint8_t bFunctionClass, uint8_t bFunctionSubClass, uint8_t bFunctionProtocol){
 8002c1a:	b089      	sub	sp, #36	; 0x24
 8002c1c:	4681      	mov	r9, r0
 8002c1e:	9303      	str	r3, [sp, #12]
	if(descriptor_size==0){
 8002c20:	8823      	ldrh	r3, [r4, #0]
USBD_StatusTypeDef  USBD_COMPOSITE_RegisterClass(USBD_HandleTypeDef *pdev, uint8_t bFunctionClass, uint8_t bFunctionSubClass, uint8_t bFunctionProtocol){
 8002c22:	9101      	str	r1, [sp, #4]
 8002c24:	9202      	str	r2, [sp, #8]
	if(descriptor_size==0){
 8002c26:	b943      	cbnz	r3, 8002c3a <USBD_COMPOSITE_RegisterClass+0x26>
		USBD_memcpy(descriptor, USBD_COMPOSITE_CfgFSDesc, USB_COMPOSITE_CONFIG_DESC_SIZ);
 8002c28:	4b6f      	ldr	r3, [pc, #444]	; (8002de8 <USBD_COMPOSITE_RegisterClass+0x1d4>)
 8002c2a:	4a70      	ldr	r2, [pc, #448]	; (8002dec <USBD_COMPOSITE_RegisterClass+0x1d8>)
 8002c2c:	cb03      	ldmia	r3!, {r0, r1}
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	7213      	strb	r3, [r2, #8]
		descriptor_size+=USB_COMPOSITE_CONFIG_DESC_SIZ;
 8002c32:	2309      	movs	r3, #9
		USBD_memcpy(descriptor, USBD_COMPOSITE_CfgFSDesc, USB_COMPOSITE_CONFIG_DESC_SIZ);
 8002c34:	6010      	str	r0, [r2, #0]
 8002c36:	6051      	str	r1, [r2, #4]
		descriptor_size+=USB_COMPOSITE_CONFIG_DESC_SIZ;
 8002c38:	8023      	strh	r3, [r4, #0]
	}

	if(pdev->pClass != 0 && pdev->pClass != &USBD_COMPOSITE && usbd_composite_pClass_count<USB_COMPOSITE_MAX_CLASSES)
 8002c3a:	f8d9 1214 	ldr.w	r1, [r9, #532]	; 0x214
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	f000 80ce 	beq.w	8002de0 <USBD_COMPOSITE_RegisterClass+0x1cc>
 8002c44:	4b6a      	ldr	r3, [pc, #424]	; (8002df0 <USBD_COMPOSITE_RegisterClass+0x1dc>)
 8002c46:	4299      	cmp	r1, r3
 8002c48:	f000 80ca 	beq.w	8002de0 <USBD_COMPOSITE_RegisterClass+0x1cc>
 8002c4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8002dfc <USBD_COMPOSITE_RegisterClass+0x1e8>
 8002c50:	f898 3000 	ldrb.w	r3, [r8]
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	f200 80c3 	bhi.w	8002de0 <USBD_COMPOSITE_RegisterClass+0x1cc>
	{
		/* link the class to the USB Device handle */
		usbd_composite_class_data[usbd_composite_pClass_count].bFunctionClass=bFunctionClass;
 8002c5a:	4866      	ldr	r0, [pc, #408]	; (8002df4 <USBD_COMPOSITE_RegisterClass+0x1e0>)
 8002c5c:	f89d 5004 	ldrb.w	r5, [sp, #4]
 8002c60:	4e62      	ldr	r6, [pc, #392]	; (8002dec <USBD_COMPOSITE_RegisterClass+0x1d8>)
 8002c62:	4f65      	ldr	r7, [pc, #404]	; (8002df8 <USBD_COMPOSITE_RegisterClass+0x1e4>)
 8002c64:	2250      	movs	r2, #80	; 0x50
 8002c66:	435a      	muls	r2, r3
 8002c68:	1883      	adds	r3, r0, r2
 8002c6a:	5485      	strb	r5, [r0, r2]
		usbd_composite_class_data[usbd_composite_pClass_count].bFunctionSubClass=bFunctionSubClass;
 8002c6c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002c70:	705a      	strb	r2, [r3, #1]
		usbd_composite_class_data[usbd_composite_pClass_count].bFunctionProtocol=bFunctionProtocol;
 8002c72:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8002c76:	709a      	strb	r2, [r3, #2]
		usbd_composite_class_data[usbd_composite_pClass_count].pClass=pdev->pClass;
		usbd_composite_class_data[usbd_composite_pClass_count].pClassData=pdev->pClassData;
 8002c78:	f8d9 2218 	ldr.w	r2, [r9, #536]	; 0x218
 8002c7c:	609a      	str	r2, [r3, #8]
		usbd_composite_class_data[usbd_composite_pClass_count].pUserData=pdev->pUserData;
 8002c7e:	f8d9 221c 	ldr.w	r2, [r9, #540]	; 0x21c
		usbd_composite_class_data[usbd_composite_pClass_count].pClass=pdev->pClass;
 8002c82:	6059      	str	r1, [r3, #4]
		usbd_composite_class_data[usbd_composite_pClass_count].pUserData=pdev->pUserData;
 8002c84:	60da      	str	r2, [r3, #12]

		uint16_t length_temp;
		uint8_t *descriptor_temp=usbd_composite_class_data[usbd_composite_pClass_count].pClass->GetFSConfigDescriptor(&length_temp);
 8002c86:	f10d 001e 	add.w	r0, sp, #30
 8002c8a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002c8c:	4798      	blx	r3
		uint8_t *descriptor_end=descriptor_temp+length_temp;
 8002c8e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8002c92:	18c3      	adds	r3, r0, r3
		uint8_t *descriptor_temp=usbd_composite_class_data[usbd_composite_pClass_count].pClass->GetFSConfigDescriptor(&length_temp);
 8002c94:	4605      	mov	r5, r0
		uint8_t *descriptor_end=descriptor_temp+length_temp;
 8002c96:	9304      	str	r3, [sp, #16]
	uint8_t lastIfc=-1;
 8002c98:	f04f 0bff 	mov.w	fp, #255	; 0xff
		USBD_COMPOSITE_ItfAssocDescriptor *itfAssocDescriptor;

		while(descriptor_temp<descriptor_end){
 8002c9c:	9b04      	ldr	r3, [sp, #16]
 8002c9e:	429d      	cmp	r5, r3
 8002ca0:	d311      	bcc.n	8002cc6 <USBD_COMPOSITE_RegisterClass+0xb2>
			default:
				break;
			}
		}

		descriptor[2]=LOBYTE(descriptor_size);		//Update Config Descritor Total Size
 8002ca2:	8823      	ldrh	r3, [r4, #0]
 8002ca4:	70b3      	strb	r3, [r6, #2]
		descriptor[3]=HIBYTE(descriptor_size);	//Update Config Descritor Total Size
 8002ca6:	0a1b      	lsrs	r3, r3, #8
 8002ca8:	70f3      	strb	r3, [r6, #3]
		descriptor[4]=itf_num;			//Update the total interface count
 8002caa:	4b53      	ldr	r3, [pc, #332]	; (8002df8 <USBD_COMPOSITE_RegisterClass+0x1e4>)

		usbd_composite_pClass_count++;
 8002cac:	4a53      	ldr	r2, [pc, #332]	; (8002dfc <USBD_COMPOSITE_RegisterClass+0x1e8>)
		descriptor[4]=itf_num;			//Update the total interface count
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	7133      	strb	r3, [r6, #4]
		usbd_composite_pClass_count++;
 8002cb2:	7813      	ldrb	r3, [r2, #0]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	7013      	strb	r3, [r2, #0]
		pdev->pClass = &USBD_COMPOSITE;
 8002cb8:	4b4d      	ldr	r3, [pc, #308]	; (8002df0 <USBD_COMPOSITE_RegisterClass+0x1dc>)
 8002cba:	f8c9 3214 	str.w	r3, [r9, #532]	; 0x214

		status = USBD_OK;
 8002cbe:	2000      	movs	r0, #0
		USBD_ErrLog("Invalid Class handle");
		status = USBD_FAIL;
	}

	return status;
}
 8002cc0:	b009      	add	sp, #36	; 0x24
 8002cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *descriptor_current=descriptor+descriptor_size;
 8002cc6:	f8b4 a000 	ldrh.w	sl, [r4]
			USBD_memcpy(descriptor_current, descriptor_temp, descriptor_temp[0]);
 8002cca:	782a      	ldrb	r2, [r5, #0]
			uint8_t *descriptor_current=descriptor+descriptor_size;
 8002ccc:	eb06 030a 	add.w	r3, r6, sl
			USBD_memcpy(descriptor_current, descriptor_temp, descriptor_temp[0]);
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f005 fe15 	bl	8008902 <memcpy>
			descriptor_size+=descriptor_temp[0];
 8002cd8:	7829      	ldrb	r1, [r5, #0]
			switch(descriptor_current[1]){
 8002cda:	7842      	ldrb	r2, [r0, #1]
			descriptor_size+=descriptor_temp[0];
 8002cdc:	eb0a 0e01 	add.w	lr, sl, r1
 8002ce0:	fa1f fe8e 	uxth.w	lr, lr
			switch(descriptor_current[1]){
 8002ce4:	2a04      	cmp	r2, #4
			USBD_memcpy(descriptor_current, descriptor_temp, descriptor_temp[0]);
 8002ce6:	4603      	mov	r3, r0
			descriptor_size+=descriptor_temp[0];
 8002ce8:	f8a4 e000 	strh.w	lr, [r4]
			descriptor_temp+=descriptor_temp[0];
 8002cec:	440d      	add	r5, r1
			switch(descriptor_current[1]){
 8002cee:	d031      	beq.n	8002d54 <USBD_COMPOSITE_RegisterClass+0x140>
 8002cf0:	d820      	bhi.n	8002d34 <USBD_COMPOSITE_RegisterClass+0x120>
 8002cf2:	2a02      	cmp	r2, #2
 8002cf4:	d1d2      	bne.n	8002c9c <USBD_COMPOSITE_RegisterClass+0x88>
				itf_num_temp=descriptor_current[4];
 8002cf6:	7902      	ldrb	r2, [r0, #4]
 8002cf8:	9205      	str	r2, [sp, #20]
				USBD_memcpy(descriptor_current, USBD_COMPOSITE_IfcAssocDesc, USB_COMPOSITE_IFC_ASSOC_DESC_SIZ);
 8002cfa:	f8df c10c 	ldr.w	ip, [pc, #268]	; 8002e08 <USBD_COMPOSITE_RegisterClass+0x1f4>
				descriptor_size-=descriptor_current[0];
 8002cfe:	f816 200a 	ldrb.w	r2, [r6, sl]
				USBD_memcpy(descriptor_current, USBD_COMPOSITE_IfcAssocDesc, USB_COMPOSITE_IFC_ASSOC_DESC_SIZ);
 8002d02:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8002d06:	f1c2 0208 	rsb	r2, r2, #8
				descriptor_size+=USB_COMPOSITE_IFC_ASSOC_DESC_SIZ;
 8002d0a:	fa1e f282 	uxtah	r2, lr, r2
 8002d0e:	8022      	strh	r2, [r4, #0]
				itfAssocDescriptor->bFirstInterface=itf_num;													//Use next available interface
 8002d10:	783a      	ldrb	r2, [r7, #0]
				USBD_memcpy(descriptor_current, USBD_COMPOSITE_IfcAssocDesc, USB_COMPOSITE_IFC_ASSOC_DESC_SIZ);
 8002d12:	f846 000a 	str.w	r0, [r6, sl]
				itfAssocDescriptor->bFirstInterface=itf_num;													//Use next available interface
 8002d16:	709a      	strb	r2, [r3, #2]
				itfAssocDescriptor->bInterfaceCount=itf_num_temp;
 8002d18:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002d1c:	70da      	strb	r2, [r3, #3]
				itfAssocDescriptor->bFunctionClass=bFunctionClass;
 8002d1e:	f89d 2004 	ldrb.w	r2, [sp, #4]
				USBD_memcpy(descriptor_current, USBD_COMPOSITE_IfcAssocDesc, USB_COMPOSITE_IFC_ASSOC_DESC_SIZ);
 8002d22:	6059      	str	r1, [r3, #4]
				itfAssocDescriptor->bFunctionClass=bFunctionClass;
 8002d24:	711a      	strb	r2, [r3, #4]
				itfAssocDescriptor->bFunctionSubClass=bFunctionSubClass;
 8002d26:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002d2a:	715a      	strb	r2, [r3, #5]
				itfAssocDescriptor->bFunctionProtocol=bFunctionProtocol;
 8002d2c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8002d30:	719a      	strb	r2, [r3, #6]
				break;
 8002d32:	e7b3      	b.n	8002c9c <USBD_COMPOSITE_RegisterClass+0x88>
			switch(descriptor_current[1]){
 8002d34:	2a05      	cmp	r2, #5
 8002d36:	d022      	beq.n	8002d7e <USBD_COMPOSITE_RegisterClass+0x16a>
 8002d38:	2a24      	cmp	r2, #36	; 0x24
 8002d3a:	d1af      	bne.n	8002c9c <USBD_COMPOSITE_RegisterClass+0x88>
				switch(descriptor_current[2]){
 8002d3c:	7882      	ldrb	r2, [r0, #2]
 8002d3e:	2a01      	cmp	r2, #1
 8002d40:	d048      	beq.n	8002dd4 <USBD_COMPOSITE_RegisterClass+0x1c0>
 8002d42:	2a06      	cmp	r2, #6
 8002d44:	d1aa      	bne.n	8002c9c <USBD_COMPOSITE_RegisterClass+0x88>
 8002d46:	783a      	ldrb	r2, [r7, #0]
					descriptor_current[3]=itf_num-1+descriptor_current[3];
 8002d48:	78c1      	ldrb	r1, [r0, #3]
 8002d4a:	3a01      	subs	r2, #1
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	4411      	add	r1, r2
 8002d50:	70c1      	strb	r1, [r0, #3]
 8002d52:	e041      	b.n	8002dd8 <USBD_COMPOSITE_RegisterClass+0x1c4>
				if(descriptor_current[2]!=lastIfc){ // Check if same interface different configuration.
 8002d54:	7881      	ldrb	r1, [r0, #2]
					descriptor_current[2]=itf_num++;
 8002d56:	783a      	ldrb	r2, [r7, #0]
				if(descriptor_current[2]!=lastIfc){ // Check if same interface different configuration.
 8002d58:	458b      	cmp	fp, r1
 8002d5a:	d00d      	beq.n	8002d78 <USBD_COMPOSITE_RegisterClass+0x164>
					descriptor_current[2]=itf_num++;
 8002d5c:	1c50      	adds	r0, r2, #1
 8002d5e:	709a      	strb	r2, [r3, #2]
					usbd_composite_class_data[usbd_composite_pClass_count].bInterfaces++;
 8002d60:	4a24      	ldr	r2, [pc, #144]	; (8002df4 <USBD_COMPOSITE_RegisterClass+0x1e0>)
 8002d62:	f898 3000 	ldrb.w	r3, [r8]
					descriptor_current[2]=itf_num++;
 8002d66:	7038      	strb	r0, [r7, #0]
					usbd_composite_class_data[usbd_composite_pClass_count].bInterfaces++;
 8002d68:	2050      	movs	r0, #80	; 0x50
 8002d6a:	fb00 2303 	mla	r3, r0, r3, r2
 8002d6e:	468b      	mov	fp, r1
 8002d70:	78da      	ldrb	r2, [r3, #3]
 8002d72:	3201      	adds	r2, #1
 8002d74:	70da      	strb	r2, [r3, #3]
 8002d76:	e791      	b.n	8002c9c <USBD_COMPOSITE_RegisterClass+0x88>
					descriptor_current[2]=itf_num-1;
 8002d78:	3a01      	subs	r2, #1
					descriptor_current[2]=inEP++ | 0x80;
 8002d7a:	709a      	strb	r2, [r3, #2]
 8002d7c:	e78e      	b.n	8002c9c <USBD_COMPOSITE_RegisterClass+0x88>
				if(descriptor_current[2] & 0x80) // Check if IN EP
 8002d7e:	7880      	ldrb	r0, [r0, #2]
 8002d80:	f8df e070 	ldr.w	lr, [pc, #112]	; 8002df4 <USBD_COMPOSITE_RegisterClass+0x1e0>
					usbd_composite_class_data[usbd_composite_pClass_count].inEPn[usbd_composite_class_data[usbd_composite_pClass_count].inEP]=descriptor_current[2] & 0x7F;
 8002d84:	f898 1000 	ldrb.w	r1, [r8]
 8002d88:	2250      	movs	r2, #80	; 0x50
				if(descriptor_current[2] & 0x80) // Check if IN EP
 8002d8a:	f010 0f80 	tst.w	r0, #128	; 0x80
					usbd_composite_class_data[usbd_composite_pClass_count].inEPn[usbd_composite_class_data[usbd_composite_pClass_count].inEP]=descriptor_current[2] & 0x7F;
 8002d8e:	fb02 e201 	mla	r2, r2, r1, lr
				if(descriptor_current[2] & 0x80) // Check if IN EP
 8002d92:	d011      	beq.n	8002db8 <USBD_COMPOSITE_RegisterClass+0x1a4>
					usbd_composite_class_data[usbd_composite_pClass_count].inEPn[usbd_composite_class_data[usbd_composite_pClass_count].inEP]=descriptor_current[2] & 0x7F;
 8002d94:	7c11      	ldrb	r1, [r2, #16]
 8002d96:	eb02 0e01 	add.w	lr, r2, r1
					usbd_composite_class_data[usbd_composite_pClass_count].inEPa[usbd_composite_class_data[usbd_composite_pClass_count].inEP++]=inEP;
 8002d9a:	3101      	adds	r1, #1
 8002d9c:	7411      	strb	r1, [r2, #16]
 8002d9e:	4918      	ldr	r1, [pc, #96]	; (8002e00 <USBD_COMPOSITE_RegisterClass+0x1ec>)
 8002da0:	780a      	ldrb	r2, [r1, #0]
 8002da2:	f88e 2030 	strb.w	r2, [lr, #48]	; 0x30
					usbd_composite_class_data[usbd_composite_pClass_count].inEPn[usbd_composite_class_data[usbd_composite_pClass_count].inEP]=descriptor_current[2] & 0x7F;
 8002da6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8002daa:	f88e 0012 	strb.w	r0, [lr, #18]
					descriptor_current[2]=inEP++ | 0x80;
 8002dae:	1c50      	adds	r0, r2, #1
 8002db0:	7008      	strb	r0, [r1, #0]
 8002db2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002db6:	e7e0      	b.n	8002d7a <USBD_COMPOSITE_RegisterClass+0x166>
					usbd_composite_class_data[usbd_composite_pClass_count].outEPn[usbd_composite_class_data[usbd_composite_pClass_count].outEP]=descriptor_current[2] & 0x7F;
 8002db8:	7c51      	ldrb	r1, [r2, #17]
 8002dba:	eb02 0e01 	add.w	lr, r2, r1
					usbd_composite_class_data[usbd_composite_pClass_count].outEPa[usbd_composite_class_data[usbd_composite_pClass_count].outEP++]=outEP;
 8002dbe:	3101      	adds	r1, #1
 8002dc0:	7451      	strb	r1, [r2, #17]
 8002dc2:	4910      	ldr	r1, [pc, #64]	; (8002e04 <USBD_COMPOSITE_RegisterClass+0x1f0>)
					usbd_composite_class_data[usbd_composite_pClass_count].outEPn[usbd_composite_class_data[usbd_composite_pClass_count].outEP]=descriptor_current[2] & 0x7F;
 8002dc4:	f88e 0021 	strb.w	r0, [lr, #33]	; 0x21
					usbd_composite_class_data[usbd_composite_pClass_count].outEPa[usbd_composite_class_data[usbd_composite_pClass_count].outEP++]=outEP;
 8002dc8:	780a      	ldrb	r2, [r1, #0]
 8002dca:	f88e 203f 	strb.w	r2, [lr, #63]	; 0x3f
					descriptor_current[2]=outEP++;
 8002dce:	1c50      	adds	r0, r2, #1
 8002dd0:	7008      	strb	r0, [r1, #0]
 8002dd2:	e7d2      	b.n	8002d7a <USBD_COMPOSITE_RegisterClass+0x166>
					descriptor_current[4]=itf_num-1+descriptor_current[4];
 8002dd4:	783a      	ldrb	r2, [r7, #0]
 8002dd6:	3a01      	subs	r2, #1
					descriptor_current[4]=itf_num-1+descriptor_current[4];
 8002dd8:	7919      	ldrb	r1, [r3, #4]
 8002dda:	440a      	add	r2, r1
 8002ddc:	711a      	strb	r2, [r3, #4]
					break;
 8002dde:	e75d      	b.n	8002c9c <USBD_COMPOSITE_RegisterClass+0x88>
		status = USBD_FAIL;
 8002de0:	2002      	movs	r0, #2
 8002de2:	e76d      	b.n	8002cc0 <USBD_COMPOSITE_RegisterClass+0xac>
 8002de4:	20001044 	.word	0x20001044
 8002de8:	20000088 	.word	0x20000088
 8002dec:	20000c44 	.word	0x20000c44
 8002df0:	20000050 	.word	0x20000050
 8002df4:	200067b8 	.word	0x200067b8
 8002df8:	20001046 	.word	0x20001046
 8002dfc:	20001047 	.word	0x20001047
 8002e00:	200000a8 	.word	0x200000a8
 8002e04:	200000a9 	.word	0x200000a9
 8002e08:	200000a0 	.word	0x200000a0

08002e0c <USBD_COMPOSITE_LL_EP_Conversion>:

uint8_t  USBD_COMPOSITE_LL_EP_Conversion  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr){
 8002e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t index=0;
	uint8_t i=0;
	if((ep_addr & 0x7f)==0){
 8002e10:	f011 0e7f 	ands.w	lr, r1, #127	; 0x7f
 8002e14:	d044      	beq.n	8002ea0 <USBD_COMPOSITE_LL_EP_Conversion+0x94>
		return ep_addr;
	}
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002e16:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <USBD_COMPOSITE_LL_EP_Conversion+0x9c>)
 8002e18:	781e      	ldrb	r6, [r3, #0]
 8002e1a:	4b24      	ldr	r3, [pc, #144]	; (8002eac <USBD_COMPOSITE_LL_EP_Conversion+0xa0>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	461d      	mov	r5, r3
		if(pdev->pClassData==usbd_composite_class_data[index].pClassData && pdev->pUserData==usbd_composite_class_data[index].pUserData){
			if(ep_addr & 0x80){
 8002e20:	fa4f fc81 	sxtb.w	ip, r1
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002e24:	b2d4      	uxtb	r4, r2
 8002e26:	42a6      	cmp	r6, r4
 8002e28:	d93a      	bls.n	8002ea0 <USBD_COMPOSITE_LL_EP_Conversion+0x94>
		if(pdev->pClassData==usbd_composite_class_data[index].pClassData && pdev->pUserData==usbd_composite_class_data[index].pUserData){
 8002e2a:	f8d0 7218 	ldr.w	r7, [r0, #536]	; 0x218
 8002e2e:	689c      	ldr	r4, [r3, #8]
 8002e30:	42a7      	cmp	r7, r4
 8002e32:	d122      	bne.n	8002e7a <USBD_COMPOSITE_LL_EP_Conversion+0x6e>
 8002e34:	f8d0 721c 	ldr.w	r7, [r0, #540]	; 0x21c
 8002e38:	68dc      	ldr	r4, [r3, #12]
 8002e3a:	42a7      	cmp	r7, r4
 8002e3c:	d11d      	bne.n	8002e7a <USBD_COMPOSITE_LL_EP_Conversion+0x6e>
			if(ep_addr & 0x80){
 8002e3e:	f1bc 0f00 	cmp.w	ip, #0
 8002e42:	db14      	blt.n	8002e6e <USBD_COMPOSITE_LL_EP_Conversion+0x62>
					if(usbd_composite_class_data[index].inEPn[i]==(ep_addr & 0x7f)){
						return usbd_composite_class_data[index].inEPa[i] | 0x80;
					}
				}
			} else {
				for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 8002e44:	f893 8011 	ldrb.w	r8, [r3, #17]
 8002e48:	2400      	movs	r4, #0
 8002e4a:	b2e7      	uxtb	r7, r4
 8002e4c:	45b8      	cmp	r8, r7
 8002e4e:	d914      	bls.n	8002e7a <USBD_COMPOSITE_LL_EP_Conversion+0x6e>
					if(usbd_composite_class_data[index].outEPn[i]==ep_addr){
 8002e50:	4627      	mov	r7, r4
 8002e52:	3401      	adds	r4, #1
 8002e54:	eb03 0904 	add.w	r9, r3, r4
 8002e58:	f899 9020 	ldrb.w	r9, [r9, #32]
 8002e5c:	4589      	cmp	r9, r1
 8002e5e:	d1f4      	bne.n	8002e4a <USBD_COMPOSITE_LL_EP_Conversion+0x3e>
						return usbd_composite_class_data[index].outEPa[i];
 8002e60:	2350      	movs	r3, #80	; 0x50
 8002e62:	fb03 5202 	mla	r2, r3, r2, r5
 8002e66:	443a      	add	r2, r7
 8002e68:	f892 103f 	ldrb.w	r1, [r2, #63]	; 0x3f
 8002e6c:	e018      	b.n	8002ea0 <USBD_COMPOSITE_LL_EP_Conversion+0x94>
				for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 8002e6e:	f893 8010 	ldrb.w	r8, [r3, #16]
 8002e72:	2400      	movs	r4, #0
 8002e74:	b2e7      	uxtb	r7, r4
 8002e76:	45b8      	cmp	r8, r7
 8002e78:	d802      	bhi.n	8002e80 <USBD_COMPOSITE_LL_EP_Conversion+0x74>
 8002e7a:	3201      	adds	r2, #1
 8002e7c:	3350      	adds	r3, #80	; 0x50
 8002e7e:	e7d1      	b.n	8002e24 <USBD_COMPOSITE_LL_EP_Conversion+0x18>
					if(usbd_composite_class_data[index].inEPn[i]==(ep_addr & 0x7f)){
 8002e80:	4627      	mov	r7, r4
 8002e82:	3401      	adds	r4, #1
 8002e84:	eb03 0904 	add.w	r9, r3, r4
 8002e88:	f899 9011 	ldrb.w	r9, [r9, #17]
 8002e8c:	45f1      	cmp	r9, lr
 8002e8e:	d1f1      	bne.n	8002e74 <USBD_COMPOSITE_LL_EP_Conversion+0x68>
						return usbd_composite_class_data[index].inEPa[i] | 0x80;
 8002e90:	2350      	movs	r3, #80	; 0x50
 8002e92:	fb03 5202 	mla	r2, r3, r2, r5
 8002e96:	443a      	add	r2, r7
 8002e98:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
 8002e9c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
				}
			}
		}
	}
	return ep_addr;
}
 8002ea0:	4608      	mov	r0, r1
 8002ea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20001047 	.word	0x20001047
 8002eac:	200067b8 	.word	0x200067b8

08002eb0 <USBD_RNDIS_DataIn>:
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t  USBD_RNDIS_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 8002eb0:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218

	if(pdev->pClassData != NULL)
 8002eb4:	b11b      	cbz	r3, 8002ebe <USBD_RNDIS_DataIn+0xe>
	{

		hrndis->TxState = 0;
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

		return USBD_OK;
 8002ebc:	4770      	bx	lr
	}
	else
	{
		return USBD_FAIL;
 8002ebe:	2002      	movs	r0, #2
	}
}
 8002ec0:	4770      	bx	lr

08002ec2 <USBD_RNDIS_EP0_RxReady>:
 */
static uint8_t  USBD_RNDIS_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;

	if((pdev->pUserData != NULL) && (hrndis->CmdOpCode != 0xFF))
 8002ec2:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{
 8002ec6:	b510      	push	{r4, lr}
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 8002ec8:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
	if((pdev->pUserData != NULL) && (hrndis->CmdOpCode != 0xFF))
 8002ecc:	b15b      	cbz	r3, 8002ee6 <USBD_RNDIS_EP0_RxReady+0x24>
 8002ece:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002ed2:	28ff      	cmp	r0, #255	; 0xff
 8002ed4:	d007      	beq.n	8002ee6 <USBD_RNDIS_EP0_RxReady+0x24>
	{
		((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->Control(hrndis->CmdOpCode,
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002edc:	4621      	mov	r1, r4
 8002ede:	4798      	blx	r3
				(uint8_t *)hrndis->data,
				hrndis->CmdLength);
		hrndis->CmdOpCode = 0xFF;
 8002ee0:	23ff      	movs	r3, #255	; 0xff
 8002ee2:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

	}
	return USBD_OK;
}
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	bd10      	pop	{r4, pc}
	...

08002eec <USBD_RNDIS_GetFSCfgDesc>:
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_RNDIS_GetFSCfgDesc (uint16_t *length)
{
	*length = sizeof (USBD_RNDIS_CfgFSDesc);
 8002eec:	233e      	movs	r3, #62	; 0x3e
 8002eee:	8003      	strh	r3, [r0, #0]
	return USBD_RNDIS_CfgFSDesc;
}
 8002ef0:	4800      	ldr	r0, [pc, #0]	; (8002ef4 <USBD_RNDIS_GetFSCfgDesc+0x8>)
 8002ef2:	4770      	bx	lr
 8002ef4:	200000e4 	.word	0x200000e4

08002ef8 <USBD_RNDIS_GetHSCfgDesc>:
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_RNDIS_GetHSCfgDesc (uint16_t *length)
{
	*length = sizeof (USBD_RNDIS_CfgHSDesc);
 8002ef8:	233e      	movs	r3, #62	; 0x3e
 8002efa:	8003      	strh	r3, [r0, #0]
	return USBD_RNDIS_CfgHSDesc;
}
 8002efc:	4800      	ldr	r0, [pc, #0]	; (8002f00 <USBD_RNDIS_GetHSCfgDesc+0x8>)
 8002efe:	4770      	bx	lr
 8002f00:	20000124 	.word	0x20000124

08002f04 <USBD_RNDIS_GetOtherSpeedCfgDesc>:
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_RNDIS_GetOtherSpeedCfgDesc (uint16_t *length)
{
	*length = sizeof (USBD_RNDIS_OtherSpeedCfgDesc);
 8002f04:	233e      	movs	r3, #62	; 0x3e
 8002f06:	8003      	strh	r3, [r0, #0]
	return USBD_RNDIS_OtherSpeedCfgDesc;
}
 8002f08:	4800      	ldr	r0, [pc, #0]	; (8002f0c <USBD_RNDIS_GetOtherSpeedCfgDesc+0x8>)
 8002f0a:	4770      	bx	lr
 8002f0c:	20000170 	.word	0x20000170

08002f10 <USBD_RNDIS_GetDeviceQualifierDescriptor>:
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
uint8_t  *USBD_RNDIS_GetDeviceQualifierDescriptor (uint16_t *length)
{
	*length = sizeof (USBD_RNDIS_DeviceQualifierDesc);
 8002f10:	230a      	movs	r3, #10
 8002f12:	8003      	strh	r3, [r0, #0]
	return USBD_RNDIS_DeviceQualifierDesc;
}
 8002f14:	4800      	ldr	r0, [pc, #0]	; (8002f18 <USBD_RNDIS_GetDeviceQualifierDescriptor+0x8>)
 8002f16:	4770      	bx	lr
 8002f18:	20000164 	.word	0x20000164

08002f1c <USBD_RNDIS_DataOut>:
{
 8002f1c:	b538      	push	{r3, r4, r5, lr}
 8002f1e:	4605      	mov	r5, r0
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 8002f20:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
	hrndis->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002f24:	f7ff f8f8 	bl	8002118 <USBD_LL_GetRxDataSize>
	if(pdev->pClassData != NULL)
 8002f28:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
	hrndis->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002f2c:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
	if(pdev->pClassData != NULL)
 8002f30:	b14b      	cbz	r3, 8002f46 <USBD_RNDIS_DataOut+0x2a>
		((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->Receive(hrndis->RxBuffer, &hrndis->RxLength);
 8002f32:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002f36:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8002f40:	4798      	blx	r3
		return USBD_OK;
 8002f42:	2000      	movs	r0, #0
 8002f44:	bd38      	pop	{r3, r4, r5, pc}
		return USBD_FAIL;
 8002f46:	2002      	movs	r0, #2
}
 8002f48:	bd38      	pop	{r3, r4, r5, pc}
	...

08002f4c <USBD_RNDIS_Setup>:
{
 8002f4c:	b538      	push	{r3, r4, r5, lr}
	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002f4e:	780d      	ldrb	r5, [r1, #0]
 8002f50:	f015 0260 	ands.w	r2, r5, #96	; 0x60
{
 8002f54:	4604      	mov	r4, r0
	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002f56:	d016      	beq.n	8002f86 <USBD_RNDIS_Setup+0x3a>
 8002f58:	2a20      	cmp	r2, #32
 8002f5a:	d112      	bne.n	8002f82 <USBD_RNDIS_Setup+0x36>
		if (req->wLength)
 8002f5c:	88ca      	ldrh	r2, [r1, #6]
 8002f5e:	784b      	ldrb	r3, [r1, #1]
 8002f60:	b11a      	cbz	r2, 8002f6a <USBD_RNDIS_Setup+0x1e>
			if (req->bmRequest & 0x80)
 8002f62:	062d      	lsls	r5, r5, #24
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 8002f64:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
			if (req->bmRequest & 0x80)
 8002f68:	d505      	bpl.n	8002f76 <USBD_RNDIS_Setup+0x2a>
			((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest, (uint8_t*)req, 0);
 8002f6a:	f8d4 021c 	ldr.w	r0, [r4, #540]	; 0x21c
 8002f6e:	6884      	ldr	r4, [r0, #8]
 8002f70:	4618      	mov	r0, r3
 8002f72:	47a0      	blx	r4
 8002f74:	e005      	b.n	8002f82 <USBD_RNDIS_Setup+0x36>
				hrndis->CmdOpCode = req->bRequest;
 8002f76:	f881 3200 	strb.w	r3, [r1, #512]	; 0x200
				hrndis->CmdLength = req->wLength;
 8002f7a:	f881 2201 	strb.w	r2, [r1, #513]	; 0x201
				USBD_CtlPrepareRx (pdev, (uint8_t *)hrndis->data, req->wLength);
 8002f7e:	f000 fbab 	bl	80036d8 <USBD_CtlPrepareRx>
}
 8002f82:	2000      	movs	r0, #0
 8002f84:	bd38      	pop	{r3, r4, r5, pc}
		switch (req->bRequest)
 8002f86:	784b      	ldrb	r3, [r1, #1]
 8002f88:	2b0a      	cmp	r3, #10
 8002f8a:	d1fa      	bne.n	8002f82 <USBD_RNDIS_Setup+0x36>
			USBD_CtlSendData (pdev, &ifalt, 1);
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	4902      	ldr	r1, [pc, #8]	; (8002f98 <USBD_RNDIS_Setup+0x4c>)
 8002f90:	f000 fb8d 	bl	80036ae <USBD_CtlSendData>
			break;
 8002f94:	e7f5      	b.n	8002f82 <USBD_RNDIS_Setup+0x36>
 8002f96:	bf00      	nop
 8002f98:	20001048 	.word	0x20001048

08002f9c <USBD_RNDIS_DeInit>:
{
 8002f9c:	b510      	push	{r4, lr}
	USBD_LL_CloseEP(pdev,
 8002f9e:	2181      	movs	r1, #129	; 0x81
{
 8002fa0:	4604      	mov	r4, r0
	USBD_LL_CloseEP(pdev,
 8002fa2:	f7ff f83d 	bl	8002020 <USBD_LL_CloseEP>
	USBD_LL_CloseEP(pdev,
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	4620      	mov	r0, r4
 8002faa:	f7ff f839 	bl	8002020 <USBD_LL_CloseEP>
	USBD_LL_CloseEP(pdev,
 8002fae:	2182      	movs	r1, #130	; 0x82
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	f7ff f835 	bl	8002020 <USBD_LL_CloseEP>
	if(pdev->pClassData != NULL)
 8002fb6:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002fba:	b153      	cbz	r3, 8002fd2 <USBD_RNDIS_DeInit+0x36>
		((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002fbc:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4798      	blx	r3
		USBD_free(pdev->pClassData);
 8002fc4:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002fc8:	f005 fc84 	bl	80088d4 <free>
		pdev->pClassData = NULL;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	bd10      	pop	{r4, pc}

08002fd6 <USBD_RNDIS_Init>:
{
 8002fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8002fd8:	7c03      	ldrb	r3, [r0, #16]
{
 8002fda:	4604      	mov	r4, r0
	if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8002fdc:	bb7b      	cbnz	r3, 800303e <USBD_RNDIS_Init+0x68>
		USBD_LL_OpenEP(pdev,
 8002fde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	2181      	movs	r1, #129	; 0x81
 8002fe6:	f7ff f805 	bl	8001ff4 <USBD_LL_OpenEP>
		USBD_LL_OpenEP(pdev,
 8002fea:	f44f 7300 	mov.w	r3, #512	; 0x200
		USBD_LL_OpenEP(pdev,
 8002fee:	2202      	movs	r2, #2
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f7fe fffe 	bl	8001ff4 <USBD_LL_OpenEP>
	USBD_LL_OpenEP(pdev,
 8002ff8:	2308      	movs	r3, #8
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	2182      	movs	r1, #130	; 0x82
 8002ffe:	4620      	mov	r0, r4
 8003000:	f7fe fff8 	bl	8001ff4 <USBD_LL_OpenEP>
	pdev->pClassData = USBD_malloc(sizeof (USBD_RNDIS_HandleTypeDef));
 8003004:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003008:	f005 fc5c 	bl	80088c4 <malloc>
 800300c:	4606      	mov	r6, r0
 800300e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
	if(pdev->pClassData == NULL)
 8003012:	b320      	cbz	r0, 800305e <USBD_RNDIS_Init+0x88>
		((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->Init();
 8003014:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4798      	blx	r3
		if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800301c:	7c27      	ldrb	r7, [r4, #16]
		hrndis->TxState =0;
 800301e:	2500      	movs	r5, #0
 8003020:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
		hrndis->RxState =0;
 8003024:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
		if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003028:	b987      	cbnz	r7, 800304c <USBD_RNDIS_Init+0x76>
			USBD_LL_PrepareReceive(pdev,
 800302a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800302e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003032:	2101      	movs	r1, #1
 8003034:	4620      	mov	r0, r4
 8003036:	f7ff f859 	bl	80020ec <USBD_LL_PrepareReceive>
	uint8_t ret = 0;
 800303a:	4638      	mov	r0, r7
 800303c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		USBD_LL_OpenEP(pdev,
 800303e:	2340      	movs	r3, #64	; 0x40
 8003040:	2202      	movs	r2, #2
 8003042:	2181      	movs	r1, #129	; 0x81
 8003044:	f7fe ffd6 	bl	8001ff4 <USBD_LL_OpenEP>
		USBD_LL_OpenEP(pdev,
 8003048:	2340      	movs	r3, #64	; 0x40
 800304a:	e7d0      	b.n	8002fee <USBD_RNDIS_Init+0x18>
			USBD_LL_PrepareReceive(pdev,
 800304c:	2340      	movs	r3, #64	; 0x40
 800304e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003052:	2101      	movs	r1, #1
 8003054:	4620      	mov	r0, r4
 8003056:	f7ff f849 	bl	80020ec <USBD_LL_PrepareReceive>
	uint8_t ret = 0;
 800305a:	4628      	mov	r0, r5
 800305c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = 1;
 800305e:	2001      	movs	r0, #1
}
 8003060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003062 <USBD_RNDIS_RegisterInterface>:
uint8_t  USBD_RNDIS_RegisterInterface  (USBD_HandleTypeDef   *pdev,
		USBD_RNDIS_ItfTypeDef *fops)
{
	uint8_t  ret = USBD_FAIL;

	if(fops != NULL)
 8003062:	b119      	cbz	r1, 800306c <USBD_RNDIS_RegisterInterface+0xa>
	{
		pdev->pUserData= fops;
 8003064:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
		ret = USBD_OK;
 8003068:	2000      	movs	r0, #0
 800306a:	4770      	bx	lr
	uint8_t  ret = USBD_FAIL;
 800306c:	2002      	movs	r0, #2
	}

	return ret;
}
 800306e:	4770      	bx	lr

08003070 <USBD_RNDIS_SetTxBuffer>:
 */
uint8_t  USBD_RNDIS_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
		uint8_t  *pbuff,
		uint16_t length)
{
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 8003070:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218

	hrndis->TxBuffer = pbuff;
	hrndis->TxLength = length;

	return USBD_OK;
}
 8003074:	2000      	movs	r0, #0
	hrndis->TxBuffer = pbuff;
 8003076:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
	hrndis->TxLength = length;
 800307a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800307e:	4770      	bx	lr

08003080 <USBD_RNDIS_SetRxBuffer>:
uint8_t  USBD_RNDIS_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
		uint8_t  *pbuff)
{
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;

	hrndis->RxBuffer = pbuff;
 8003080:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218

	return USBD_OK;
}
 8003084:	2000      	movs	r0, #0
	hrndis->RxBuffer = pbuff;
 8003086:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800308a:	4770      	bx	lr

0800308c <USBD_RNDIS_TransmitPacket>:
 * @param  epnum: endpoint number
 * @retval status
 */
uint8_t  USBD_RNDIS_TransmitPacket(USBD_HandleTypeDef *pdev)
{
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 800308c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 8003090:	b510      	push	{r4, lr}

	if(pdev->pClassData != NULL)
 8003092:	b172      	cbz	r2, 80030b2 <USBD_RNDIS_TransmitPacket+0x26>
	{
		if(hrndis->TxState == 0)
 8003094:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8003098:	2301      	movs	r3, #1
 800309a:	b964      	cbnz	r4, 80030b6 <USBD_RNDIS_TransmitPacket+0x2a>
		{
			/* Tx Transfer in progress */
			hrndis->TxState = 1;
 800309c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

			/* Transmit next packet */
			USBD_LL_Transmit(pdev,
 80030a0:	2181      	movs	r1, #129	; 0x81
 80030a2:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 80030a6:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80030aa:	f7ff f809 	bl	80020c0 <USBD_LL_Transmit>
					RNDIS_IN_EP,
					hrndis->TxBuffer,
					hrndis->TxLength);

			return USBD_OK;
 80030ae:	4620      	mov	r0, r4
 80030b0:	bd10      	pop	{r4, pc}
			return USBD_BUSY;
		}
	}
	else
	{
		return USBD_FAIL;
 80030b2:	2002      	movs	r0, #2
 80030b4:	bd10      	pop	{r4, pc}
			return USBD_BUSY;
 80030b6:	4618      	mov	r0, r3
	}
}
 80030b8:	bd10      	pop	{r4, pc}

080030ba <USBD_RNDIS_ReceivePacket>:
 * @param  pdev: device instance
 * @retval status
 */
uint8_t  USBD_RNDIS_ReceivePacket(USBD_HandleTypeDef *pdev)
{
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 80030ba:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 80030be:	b510      	push	{r4, lr}

	/* Suspend or Resume USB Out process */
	if(pdev->pClassData != NULL)
 80030c0:	b162      	cbz	r2, 80030dc <USBD_RNDIS_ReceivePacket+0x22>
	{
		if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80030c2:	7c04      	ldrb	r4, [r0, #16]
 80030c4:	b944      	cbnz	r4, 80030d8 <USBD_RNDIS_ReceivePacket+0x1e>
		{
			/* Prepare Out endpoint to receive next packet */
			USBD_LL_PrepareReceive(pdev,
 80030c6:	f44f 7300 	mov.w	r3, #512	; 0x200
					RNDIS_DATA_HS_OUT_PACKET_SIZE);
		}
		else
		{
			/* Prepare Out endpoint to receive next packet */
			USBD_LL_PrepareReceive(pdev,
 80030ca:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80030ce:	2101      	movs	r1, #1
 80030d0:	f7ff f80c 	bl	80020ec <USBD_LL_PrepareReceive>
					RNDIS_OUT_EP,
					hrndis->RxBuffer,
					RNDIS_DATA_FS_OUT_PACKET_SIZE);
		}
		return USBD_OK;
 80030d4:	2000      	movs	r0, #0
 80030d6:	bd10      	pop	{r4, pc}
			USBD_LL_PrepareReceive(pdev,
 80030d8:	2340      	movs	r3, #64	; 0x40
 80030da:	e7f6      	b.n	80030ca <USBD_RNDIS_ReceivePacket+0x10>
	}
	else
	{
		return USBD_FAIL;
 80030dc:	2002      	movs	r0, #2
	}
}
 80030de:	bd10      	pop	{r4, pc}

080030e0 <USBD_RNDIS_TransmitControl>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
uint8_t  USBD_RNDIS_TransmitControl(USBD_HandleTypeDef *pdev, uint8_t *buff, uint16_t length)
{
 80030e0:	b508      	push	{r3, lr}
//		{
//			/* Tx Transfer in progress */
//			hrndis->TxState = 1;
//
//			/* Transmit next packet */
			USBD_LL_Transmit(pdev, RNDIS_CMD_EP, buff, length);
 80030e2:	4613      	mov	r3, r2
 80030e4:	460a      	mov	r2, r1
 80030e6:	2182      	movs	r1, #130	; 0x82
 80030e8:	f7fe ffea 	bl	80020c0 <USBD_LL_Transmit>
//	}
//	else
//	{
//		return USBD_FAIL;
//	}
}
 80030ec:	2000      	movs	r0, #0
 80030ee:	bd08      	pop	{r3, pc}

080030f0 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80030f0:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80030f2:	b180      	cbz	r0, 8003116 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80030f4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80030f8:	b113      	cbz	r3, 8003100 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8003100:	b109      	cbz	r1, 8003106 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003102:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003106:	2301      	movs	r3, #1
 8003108:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 800310c:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800310e:	f7fe ff23 	bl	8001f58 <USBD_LL_Init>
  
  return USBD_OK; 
 8003112:	2000      	movs	r0, #0
 8003114:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8003116:	2002      	movs	r0, #2
}
 8003118:	bd08      	pop	{r3, pc}

0800311a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800311a:	b119      	cbz	r1, 8003124 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800311c:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8003120:	2000      	movs	r0, #0
 8003122:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8003124:	2002      	movs	r0, #2
  }
  
  return status;
}
 8003126:	4770      	bx	lr

08003128 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003128:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800312a:	f7fe ff55 	bl	8001fd8 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800312e:	2000      	movs	r0, #0
 8003130:	bd08      	pop	{r3, pc}

08003132 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003132:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8003134:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003138:	b90b      	cbnz	r3, 800313e <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800313a:	2002      	movs	r0, #2
 800313c:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4798      	blx	r3
 8003142:	2800      	cmp	r0, #0
 8003144:	d1f9      	bne.n	800313a <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8003146:	bd08      	pop	{r3, pc}

08003148 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003148:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800314a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	4798      	blx	r3
  return USBD_OK;
}
 8003152:	2000      	movs	r0, #0
 8003154:	bd08      	pop	{r3, pc}

08003156 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003156:	b538      	push	{r3, r4, r5, lr}
 8003158:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800315a:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800315e:	4628      	mov	r0, r5
 8003160:	f000 fa75 	bl	800364e <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8003164:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8003166:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 800316a:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800316e:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8003172:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8003176:	f001 031f 	and.w	r3, r1, #31
 800317a:	2b01      	cmp	r3, #1
 800317c:	d00e      	beq.n	800319c <USBD_LL_SetupStage+0x46>
 800317e:	d307      	bcc.n	8003190 <USBD_LL_SetupStage+0x3a>
 8003180:	2b02      	cmp	r3, #2
 8003182:	d010      	beq.n	80031a6 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8003184:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003188:	4620      	mov	r0, r4
 800318a:	f7fe ff5b 	bl	8002044 <USBD_LL_StallEP>
    break;
 800318e:	e003      	b.n	8003198 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8003190:	4629      	mov	r1, r5
 8003192:	4620      	mov	r0, r4
 8003194:	f000 f8e6 	bl	8003364 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8003198:	2000      	movs	r0, #0
 800319a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800319c:	4629      	mov	r1, r5
 800319e:	4620      	mov	r0, r4
 80031a0:	f000 f9da 	bl	8003558 <USBD_StdItfReq>
    break;
 80031a4:	e7f8      	b.n	8003198 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 80031a6:	4629      	mov	r1, r5
 80031a8:	4620      	mov	r0, r4
 80031aa:	f000 f9ed 	bl	8003588 <USBD_StdEPReq>
    break;
 80031ae:	e7f3      	b.n	8003198 <USBD_LL_SetupStage+0x42>

080031b0 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80031b0:	b538      	push	{r3, r4, r5, lr}
 80031b2:	4604      	mov	r4, r0
 80031b4:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80031b6:	bb11      	cbnz	r1, 80031fe <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80031b8:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d10f      	bne.n	80031e0 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 80031c0:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80031c4:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d90b      	bls.n	80031e4 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80031cc:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80031ce:	429a      	cmp	r2, r3
 80031d0:	bf28      	it	cs
 80031d2:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80031d4:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 80031d8:	b292      	uxth	r2, r2
 80031da:	4629      	mov	r1, r5
 80031dc:	f000 fa8b 	bl	80036f6 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80031e0:	2000      	movs	r0, #0
 80031e2:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80031e4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	b123      	cbz	r3, 80031f6 <USBD_LL_DataOutStage+0x46>
 80031ec:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80031f0:	2a03      	cmp	r2, #3
 80031f2:	d100      	bne.n	80031f6 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 80031f4:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80031f6:	4620      	mov	r0, r4
 80031f8:	f000 fa85 	bl	8003706 <USBD_CtlSendStatus>
 80031fc:	e7f0      	b.n	80031e0 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 80031fe:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0eb      	beq.n	80031e0 <USBD_LL_DataOutStage+0x30>
 8003208:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800320c:	2a03      	cmp	r2, #3
 800320e:	d1e7      	bne.n	80031e0 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8003210:	4798      	blx	r3
 8003212:	e7e5      	b.n	80031e0 <USBD_LL_DataOutStage+0x30>

08003214 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8003214:	b570      	push	{r4, r5, r6, lr}
 8003216:	4613      	mov	r3, r2
 8003218:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800321a:	460e      	mov	r6, r1
 800321c:	2900      	cmp	r1, #0
 800321e:	d13d      	bne.n	800329c <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003220:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8003224:	2a02      	cmp	r2, #2
 8003226:	d10f      	bne.n	8003248 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8003228:	69c5      	ldr	r5, [r0, #28]
 800322a:	6a02      	ldr	r2, [r0, #32]
 800322c:	4295      	cmp	r5, r2
 800322e:	d914      	bls.n	800325a <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8003230:	1aaa      	subs	r2, r5, r2
 8003232:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8003234:	4619      	mov	r1, r3
 8003236:	b292      	uxth	r2, r2
 8003238:	f000 fa46 	bl	80036c8 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800323c:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800323e:	461a      	mov	r2, r3
 8003240:	4619      	mov	r1, r3
 8003242:	4620      	mov	r0, r4
 8003244:	f7fe ff52 	bl	80020ec <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8003248:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800324c:	2b01      	cmp	r3, #1
 800324e:	d102      	bne.n	8003256 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003256:	2000      	movs	r0, #0
 8003258:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 800325a:	6983      	ldr	r3, [r0, #24]
 800325c:	fbb3 f5f2 	udiv	r5, r3, r2
 8003260:	fb02 3515 	mls	r5, r2, r5, r3
 8003264:	b965      	cbnz	r5, 8003280 <USBD_LL_DataInStage+0x6c>
 8003266:	429a      	cmp	r2, r3
 8003268:	d80a      	bhi.n	8003280 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 800326a:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 800326e:	4293      	cmp	r3, r2
 8003270:	d206      	bcs.n	8003280 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8003272:	462a      	mov	r2, r5
 8003274:	f000 fa28 	bl	80036c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8003278:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 800327c:	462b      	mov	r3, r5
 800327e:	e7de      	b.n	800323e <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003280:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	b12b      	cbz	r3, 8003294 <USBD_LL_DataInStage+0x80>
 8003288:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 800328c:	2a03      	cmp	r2, #3
 800328e:	d101      	bne.n	8003294 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8003290:	4620      	mov	r0, r4
 8003292:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8003294:	4620      	mov	r0, r4
 8003296:	f000 fa41 	bl	800371c <USBD_CtlReceiveStatus>
 800329a:	e7d5      	b.n	8003248 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 800329c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0d7      	beq.n	8003256 <USBD_LL_DataInStage+0x42>
 80032a6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80032aa:	2a03      	cmp	r2, #3
 80032ac:	d1d3      	bne.n	8003256 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 80032ae:	4798      	blx	r3
 80032b0:	e7d1      	b.n	8003256 <USBD_LL_DataInStage+0x42>

080032b2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80032b2:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80032b4:	2200      	movs	r2, #0
{
 80032b6:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 80032b8:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80032ba:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 80032bc:	2340      	movs	r3, #64	; 0x40
 80032be:	f7fe fe99 	bl	8001ff4 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80032c2:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80032c4:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 80032c8:	2200      	movs	r2, #0
 80032ca:	2180      	movs	r1, #128	; 0x80
 80032cc:	4620      	mov	r0, r4
 80032ce:	f7fe fe91 	bl	8001ff4 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80032d2:	2301      	movs	r3, #1
 80032d4:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80032d8:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80032dc:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 80032de:	b12b      	cbz	r3, 80032ec <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80032e0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80032e4:	7921      	ldrb	r1, [r4, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	4620      	mov	r0, r4
 80032ea:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80032ec:	2000      	movs	r0, #0
 80032ee:	bd38      	pop	{r3, r4, r5, pc}

080032f0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80032f0:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80032f2:	2000      	movs	r0, #0
 80032f4:	4770      	bx	lr

080032f6 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80032f6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80032fa:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80032fe:	2304      	movs	r3, #4
 8003300:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003304:	2000      	movs	r0, #0
 8003306:	4770      	bx	lr

08003308 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8003308:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 800330c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003310:	2000      	movs	r0, #0
 8003312:	4770      	bx	lr

08003314 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8003314:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003316:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800331a:	2a03      	cmp	r2, #3
 800331c:	d104      	bne.n	8003328 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800331e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	b103      	cbz	r3, 8003328 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003326:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8003328:	2000      	movs	r0, #0
 800332a:	bd08      	pop	{r3, pc}

0800332c <USBD_LL_IsoINIncomplete>:
 800332c:	2000      	movs	r0, #0
 800332e:	4770      	bx	lr

08003330 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8003330:	2000      	movs	r0, #0
 8003332:	4770      	bx	lr

08003334 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8003334:	2000      	movs	r0, #0
 8003336:	4770      	bx	lr

08003338 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8003338:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800333a:	2201      	movs	r2, #1
 800333c:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003340:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8003344:	7901      	ldrb	r1, [r0, #4]
 8003346:	6852      	ldr	r2, [r2, #4]
 8003348:	4790      	blx	r2
   
  return USBD_OK;
}
 800334a:	2000      	movs	r0, #0
 800334c:	bd08      	pop	{r3, pc}

0800334e <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800334e:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8003350:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8003352:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8003354:	f7fe fe76 	bl	8002044 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8003358:	4620      	mov	r0, r4
 800335a:	2100      	movs	r1, #0
}
 800335c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8003360:	f7fe be70 	b.w	8002044 <USBD_LL_StallEP>

08003364 <USBD_StdDevReq>:
{
 8003364:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8003366:	784b      	ldrb	r3, [r1, #1]
{
 8003368:	4604      	mov	r4, r0
 800336a:	460d      	mov	r5, r1
  switch (req->bRequest) 
 800336c:	2b09      	cmp	r3, #9
 800336e:	d879      	bhi.n	8003464 <USBD_StdDevReq+0x100>
 8003370:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003374:	00e500c9 	.word	0x00e500c9
 8003378:	00d90078 	.word	0x00d90078
 800337c:	006d0078 	.word	0x006d0078
 8003380:	0078000a 	.word	0x0078000a
 8003384:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8003388:	884b      	ldrh	r3, [r1, #2]
 800338a:	0a1a      	lsrs	r2, r3, #8
 800338c:	3a01      	subs	r2, #1
 800338e:	2a06      	cmp	r2, #6
 8003390:	d868      	bhi.n	8003464 <USBD_StdDevReq+0x100>
 8003392:	e8df f002 	tbb	[pc, r2]
 8003396:	1c04      	.short	0x1c04
 8003398:	49676729 	.word	0x49676729
 800339c:	52          	.byte	0x52
 800339d:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800339e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80033a2:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80033a4:	7c20      	ldrb	r0, [r4, #16]
 80033a6:	f10d 0106 	add.w	r1, sp, #6
 80033aa:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80033ac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80033b0:	2a00      	cmp	r2, #0
 80033b2:	d067      	beq.n	8003484 <USBD_StdDevReq+0x120>
 80033b4:	88eb      	ldrh	r3, [r5, #6]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d064      	beq.n	8003484 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 80033ba:	429a      	cmp	r2, r3
 80033bc:	bf28      	it	cs
 80033be:	461a      	movcs	r2, r3
 80033c0:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80033c4:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 80033c6:	4620      	mov	r0, r4
 80033c8:	f000 f971 	bl	80036ae <USBD_CtlSendData>
 80033cc:	e05a      	b.n	8003484 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80033ce:	7c02      	ldrb	r2, [r0, #16]
 80033d0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80033d4:	b932      	cbnz	r2, 80033e4 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80033d8:	f10d 0006 	add.w	r0, sp, #6
 80033dc:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80033de:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80033e0:	7043      	strb	r3, [r0, #1]
 80033e2:	e7e3      	b.n	80033ac <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	e7f7      	b.n	80033d8 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b05      	cmp	r3, #5
 80033ec:	d83a      	bhi.n	8003464 <USBD_StdDevReq+0x100>
 80033ee:	e8df f003 	tbb	[pc, r3]
 80033f2:	0703      	.short	0x0703
 80033f4:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80033f8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	e7d1      	b.n	80033a4 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003400:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	e7cd      	b.n	80033a4 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003408:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	e7c9      	b.n	80033a4 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003410:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	e7c5      	b.n	80033a4 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003418:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	e7c1      	b.n	80033a4 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003420:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	e7bd      	b.n	80033a4 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003428:	7c03      	ldrb	r3, [r0, #16]
 800342a:	b9db      	cbnz	r3, 8003464 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800342c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003430:	f10d 0006 	add.w	r0, sp, #6
 8003434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003436:	4798      	blx	r3
 8003438:	e7b8      	b.n	80033ac <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800343a:	7c03      	ldrb	r3, [r0, #16]
 800343c:	b993      	cbnz	r3, 8003464 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800343e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003442:	f10d 0006 	add.w	r0, sp, #6
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800344a:	2307      	movs	r3, #7
 800344c:	e7c8      	b.n	80033e0 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800344e:	888b      	ldrh	r3, [r1, #4]
 8003450:	b943      	cbnz	r3, 8003464 <USBD_StdDevReq+0x100>
 8003452:	88cb      	ldrh	r3, [r1, #6]
 8003454:	b933      	cbnz	r3, 8003464 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003456:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800345a:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800345c:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800345e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003462:	d103      	bne.n	800346c <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8003464:	4620      	mov	r0, r4
 8003466:	f7ff ff72 	bl	800334e <USBD_CtlError.constprop.0>
    break;
 800346a:	e00b      	b.n	8003484 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 800346c:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8003470:	4629      	mov	r1, r5
 8003472:	f7fe fe17 	bl	80020a4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8003476:	4620      	mov	r0, r4
 8003478:	f000 f945 	bl	8003706 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 800347c:	b12d      	cbz	r5, 800348a <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800347e:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003480:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8003484:	2000      	movs	r0, #0
 8003486:	b003      	add	sp, #12
 8003488:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800348a:	2301      	movs	r3, #1
 800348c:	e7f8      	b.n	8003480 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 800348e:	7889      	ldrb	r1, [r1, #2]
 8003490:	4d30      	ldr	r5, [pc, #192]	; (8003554 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003492:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8003494:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003496:	d8e5      	bhi.n	8003464 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8003498:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800349c:	2b02      	cmp	r3, #2
 800349e:	d00c      	beq.n	80034ba <USBD_StdDevReq+0x156>
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d1df      	bne.n	8003464 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 80034a4:	b9b1      	cbnz	r1, 80034d4 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80034a6:	2302      	movs	r3, #2
 80034a8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80034ac:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80034ae:	f7ff fe4b 	bl	8003148 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80034b2:	4620      	mov	r0, r4
 80034b4:	f000 f927 	bl	8003706 <USBD_CtlSendStatus>
 80034b8:	e7e4      	b.n	8003484 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 80034ba:	2900      	cmp	r1, #0
 80034bc:	d0f9      	beq.n	80034b2 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 80034be:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80034c0:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80034c2:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80034c4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80034c8:	4620      	mov	r0, r4
 80034ca:	f7ff fe32 	bl	8003132 <USBD_SetClassConfig>
 80034ce:	2802      	cmp	r0, #2
 80034d0:	d1ef      	bne.n	80034b2 <USBD_StdDevReq+0x14e>
 80034d2:	e7c7      	b.n	8003464 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 80034d4:	6841      	ldr	r1, [r0, #4]
 80034d6:	2901      	cmp	r1, #1
 80034d8:	d0eb      	beq.n	80034b2 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80034da:	b2c9      	uxtb	r1, r1
 80034dc:	f7ff fe34 	bl	8003148 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80034e0:	7829      	ldrb	r1, [r5, #0]
 80034e2:	6061      	str	r1, [r4, #4]
 80034e4:	e7f0      	b.n	80034c8 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 80034e6:	88ca      	ldrh	r2, [r1, #6]
 80034e8:	2a01      	cmp	r2, #1
 80034ea:	d1bb      	bne.n	8003464 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 80034ec:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d003      	beq.n	80034fc <USBD_StdDevReq+0x198>
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d1b5      	bne.n	8003464 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 80034f8:	1d01      	adds	r1, r0, #4
 80034fa:	e764      	b.n	80033c6 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 80034fc:	4601      	mov	r1, r0
 80034fe:	2300      	movs	r3, #0
 8003500:	f841 3f08 	str.w	r3, [r1, #8]!
 8003504:	e75f      	b.n	80033c6 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8003506:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800350a:	3b02      	subs	r3, #2
 800350c:	2b01      	cmp	r3, #1
 800350e:	d8a9      	bhi.n	8003464 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = 0;                                   
 8003510:	2300      	movs	r3, #0
 8003512:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8003514:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003518:	b10b      	cbz	r3, 800351e <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800351a:	2302      	movs	r3, #2
 800351c:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800351e:	2202      	movs	r2, #2
 8003520:	f104 010c 	add.w	r1, r4, #12
 8003524:	e74f      	b.n	80033c6 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003526:	884b      	ldrh	r3, [r1, #2]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d1ab      	bne.n	8003484 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800352c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8003530:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003534:	4629      	mov	r1, r5
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4620      	mov	r0, r4
 800353a:	4798      	blx	r3
 800353c:	e7b9      	b.n	80034b2 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 800353e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003542:	3b02      	subs	r3, #2
 8003544:	2b01      	cmp	r3, #1
 8003546:	d88d      	bhi.n	8003464 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8003548:	884b      	ldrh	r3, [r1, #2]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d19a      	bne.n	8003484 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800354e:	2300      	movs	r3, #0
 8003550:	e7ec      	b.n	800352c <USBD_StdDevReq+0x1c8>
 8003552:	bf00      	nop
 8003554:	20001049 	.word	0x20001049

08003558 <USBD_StdItfReq>:
{
 8003558:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800355a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800355e:	2b03      	cmp	r3, #3
{
 8003560:	4604      	mov	r4, r0
 8003562:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8003564:	d10d      	bne.n	8003582 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8003566:	790b      	ldrb	r3, [r1, #4]
 8003568:	2b04      	cmp	r3, #4
 800356a:	d80a      	bhi.n	8003582 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 800356c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003574:	88eb      	ldrh	r3, [r5, #6]
 8003576:	b913      	cbnz	r3, 800357e <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8003578:	4620      	mov	r0, r4
 800357a:	f000 f8c4 	bl	8003706 <USBD_CtlSendStatus>
}
 800357e:	2000      	movs	r0, #0
 8003580:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8003582:	f7ff fee4 	bl	800334e <USBD_CtlError.constprop.0>
    break;
 8003586:	e7fa      	b.n	800357e <USBD_StdItfReq+0x26>

08003588 <USBD_StdEPReq>:
{
 8003588:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 800358a:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 800358c:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 800358e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003592:	2a20      	cmp	r2, #32
{
 8003594:	4604      	mov	r4, r0
 8003596:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8003598:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 800359a:	d105      	bne.n	80035a8 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 800359c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	4798      	blx	r3
}
 80035a4:	2000      	movs	r0, #0
 80035a6:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 80035a8:	784a      	ldrb	r2, [r1, #1]
 80035aa:	2a01      	cmp	r2, #1
 80035ac:	d01c      	beq.n	80035e8 <USBD_StdEPReq+0x60>
 80035ae:	d32a      	bcc.n	8003606 <USBD_StdEPReq+0x7e>
 80035b0:	2a03      	cmp	r2, #3
 80035b2:	d1f7      	bne.n	80035a4 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80035b4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80035b8:	2a02      	cmp	r2, #2
 80035ba:	d040      	beq.n	800363e <USBD_StdEPReq+0xb6>
 80035bc:	2a03      	cmp	r2, #3
 80035be:	d002      	beq.n	80035c6 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 80035c0:	f7ff fec5 	bl	800334e <USBD_CtlError.constprop.0>
      break;
 80035c4:	e7ee      	b.n	80035a4 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80035c6:	884a      	ldrh	r2, [r1, #2]
 80035c8:	b922      	cbnz	r2, 80035d4 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80035ca:	065e      	lsls	r6, r3, #25
 80035cc:	d002      	beq.n	80035d4 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 80035ce:	4619      	mov	r1, r3
 80035d0:	f7fe fd38 	bl	8002044 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 80035d4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80035d8:	4629      	mov	r1, r5
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4620      	mov	r0, r4
 80035de:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80035e0:	4620      	mov	r0, r4
 80035e2:	f000 f890 	bl	8003706 <USBD_CtlSendStatus>
 80035e6:	e7dd      	b.n	80035a4 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80035e8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80035ec:	2a02      	cmp	r2, #2
 80035ee:	d026      	beq.n	800363e <USBD_StdEPReq+0xb6>
 80035f0:	2a03      	cmp	r2, #3
 80035f2:	d1e5      	bne.n	80035c0 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80035f4:	884a      	ldrh	r2, [r1, #2]
 80035f6:	2a00      	cmp	r2, #0
 80035f8:	d1d4      	bne.n	80035a4 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 80035fa:	0659      	lsls	r1, r3, #25
 80035fc:	d0f0      	beq.n	80035e0 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80035fe:	4619      	mov	r1, r3
 8003600:	f7fe fd2e 	bl	8002060 <USBD_LL_ClearStallEP>
 8003604:	e7e6      	b.n	80035d4 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8003606:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800360a:	2a02      	cmp	r2, #2
 800360c:	d017      	beq.n	800363e <USBD_StdEPReq+0xb6>
 800360e:	2a03      	cmp	r2, #3
 8003610:	d1d6      	bne.n	80035c0 <USBD_StdEPReq+0x38>
 8003612:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003616:	f016 0f80 	tst.w	r6, #128	; 0x80
 800361a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800361e:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003620:	bf14      	ite	ne
 8003622:	3514      	addne	r5, #20
 8003624:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003628:	f7fe fd28 	bl	800207c <USBD_LL_IsStallEP>
 800362c:	b168      	cbz	r0, 800364a <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 800362e:	2301      	movs	r3, #1
 8003630:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8003632:	2202      	movs	r2, #2
 8003634:	4629      	mov	r1, r5
 8003636:	4620      	mov	r0, r4
 8003638:	f000 f839 	bl	80036ae <USBD_CtlSendData>
      break;
 800363c:	e7b2      	b.n	80035a4 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 800363e:	065a      	lsls	r2, r3, #25
 8003640:	d0b0      	beq.n	80035a4 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8003642:	4619      	mov	r1, r3
 8003644:	f7fe fcfe 	bl	8002044 <USBD_LL_StallEP>
 8003648:	e7ac      	b.n	80035a4 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 800364a:	6028      	str	r0, [r5, #0]
 800364c:	e7f1      	b.n	8003632 <USBD_StdEPReq+0xaa>

0800364e <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800364e:	780b      	ldrb	r3, [r1, #0]
 8003650:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003652:	784b      	ldrb	r3, [r1, #1]
 8003654:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003656:	78ca      	ldrb	r2, [r1, #3]
 8003658:	788b      	ldrb	r3, [r1, #2]
 800365a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800365e:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003660:	794a      	ldrb	r2, [r1, #5]
 8003662:	790b      	ldrb	r3, [r1, #4]
 8003664:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003668:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800366a:	79ca      	ldrb	r2, [r1, #7]
 800366c:	798b      	ldrb	r3, [r1, #6]
 800366e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003672:	80c3      	strh	r3, [r0, #6]
 8003674:	4770      	bx	lr

08003676 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003676:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8003678:	b188      	cbz	r0, 800369e <USBD_GetString+0x28>
 800367a:	4605      	mov	r5, r0
 800367c:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800367e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2c00      	cmp	r4, #0
 8003686:	d1f9      	bne.n	800367c <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	3302      	adds	r3, #2
 800368c:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800368e:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003690:	2303      	movs	r3, #3
 8003692:	704b      	strb	r3, [r1, #1]
 8003694:	3801      	subs	r0, #1
 8003696:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8003698:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800369c:	b905      	cbnz	r5, 80036a0 <USBD_GetString+0x2a>
 800369e:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 80036a6:	3302      	adds	r3, #2
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	548c      	strb	r4, [r1, r2]
 80036ac:	e7f4      	b.n	8003698 <USBD_GetString+0x22>

080036ae <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80036ae:	b510      	push	{r4, lr}
 80036b0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80036b2:	2202      	movs	r2, #2
 80036b4:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80036b8:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80036ba:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80036bc:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80036be:	2100      	movs	r1, #0
 80036c0:	f7fe fcfe 	bl	80020c0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80036c4:	2000      	movs	r0, #0
 80036c6:	bd10      	pop	{r4, pc}

080036c8 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80036c8:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80036ca:	4613      	mov	r3, r2
 80036cc:	460a      	mov	r2, r1
 80036ce:	2100      	movs	r1, #0
 80036d0:	f7fe fcf6 	bl	80020c0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80036d4:	2000      	movs	r0, #0
 80036d6:	bd08      	pop	{r3, pc}

080036d8 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80036d8:	b510      	push	{r4, lr}
 80036da:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80036dc:	2203      	movs	r2, #3
 80036de:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80036e2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80036e6:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80036e8:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 80036ec:	2100      	movs	r1, #0
 80036ee:	f7fe fcfd 	bl	80020ec <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80036f2:	2000      	movs	r0, #0
 80036f4:	bd10      	pop	{r4, pc}

080036f6 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80036f6:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80036f8:	4613      	mov	r3, r2
 80036fa:	460a      	mov	r2, r1
 80036fc:	2100      	movs	r1, #0
 80036fe:	f7fe fcf5 	bl	80020ec <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8003702:	2000      	movs	r0, #0
 8003704:	bd08      	pop	{r3, pc}

08003706 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8003706:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003708:	2304      	movs	r3, #4
 800370a:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800370e:	2300      	movs	r3, #0
 8003710:	461a      	mov	r2, r3
 8003712:	4619      	mov	r1, r3
 8003714:	f7fe fcd4 	bl	80020c0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003718:	2000      	movs	r0, #0
 800371a:	bd08      	pop	{r3, pc}

0800371c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800371c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800371e:	2305      	movs	r3, #5
 8003720:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003724:	2300      	movs	r3, #0
 8003726:	461a      	mov	r2, r3
 8003728:	4619      	mov	r1, r3
 800372a:	f7fe fcdf 	bl	80020ec <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800372e:	2000      	movs	r0, #0
 8003730:	bd08      	pop	{r3, pc}

08003732 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003732:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003734:	f001 f8e0 	bl	80048f8 <vTaskStartScheduler>
  
  return osOK;
}
 8003738:	2000      	movs	r0, #0
 800373a:	bd08      	pop	{r3, pc}

0800373c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800373c:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800373e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8003742:	8a02      	ldrh	r2, [r0, #16]
{
 8003744:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003746:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 800374a:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 800374c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800374e:	bf14      	ite	ne
 8003750:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003752:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003754:	a803      	add	r0, sp, #12
 8003756:	9001      	str	r0, [sp, #4]
 8003758:	9400      	str	r4, [sp, #0]
 800375a:	4628      	mov	r0, r5
 800375c:	f000 fff0 	bl	8004740 <xTaskCreate>
 8003760:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003762:	bf0c      	ite	eq
 8003764:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8003766:	2000      	movne	r0, #0
}
 8003768:	b005      	add	sp, #20
 800376a:	bd30      	pop	{r4, r5, pc}

0800376c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800376c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800376e:	2800      	cmp	r0, #0
 8003770:	bf08      	it	eq
 8003772:	2001      	moveq	r0, #1
 8003774:	f001 fa14 	bl	8004ba0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003778:	2000      	movs	r0, #0
 800377a:	bd08      	pop	{r3, pc}

0800377c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800377c:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800377e:	f001 fb95 	bl	8004eac <xTaskGetSchedulerState>
 8003782:	2801      	cmp	r0, #1
 8003784:	d003      	beq.n	800378e <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8003786:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800378a:	f000 b9a3 	b.w	8003ad4 <xPortSysTickHandler>
 800378e:	bd08      	pop	{r3, pc}

08003790 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8003790:	b510      	push	{r4, lr}
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8003792:	2018      	movs	r0, #24
 8003794:	f000 faa6 	bl	8003ce4 <pvPortMalloc>

		if( pxEventBits != NULL )
 8003798:	4604      	mov	r4, r0
 800379a:	b120      	cbz	r0, 80037a6 <xEventGroupCreate+0x16>
		{
			pxEventBits->uxEventBits = 0;
 800379c:	2300      	movs	r3, #0
 800379e:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80037a2:	f000 f886 	bl	80038b2 <vListInitialise>
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
	}
 80037a6:	4620      	mov	r0, r4
 80037a8:	bd10      	pop	{r4, pc}

080037aa <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80037aa:	b570      	push	{r4, r5, r6, lr}
 80037ac:	460c      	mov	r4, r1
EventGroup_t *pxEventBits = xEventGroup;
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80037ae:	4605      	mov	r5, r0
 80037b0:	b940      	cbnz	r0, 80037c4 <xEventGroupClearBits+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b6:	f383 8811 	msr	BASEPRI, r3
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	e7fe      	b.n	80037c2 <xEventGroupClearBits+0x18>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80037c4:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 80037c8:	d008      	beq.n	80037dc <xEventGroupClearBits+0x32>
 80037ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ce:	f383 8811 	msr	BASEPRI, r3
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	e7fe      	b.n	80037da <xEventGroupClearBits+0x30>

	taskENTER_CRITICAL();
 80037dc:	f000 f912 	bl	8003a04 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80037e0:	682e      	ldr	r6, [r5, #0]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80037e2:	ea26 0404 	bic.w	r4, r6, r4
 80037e6:	602c      	str	r4, [r5, #0]
	}
	taskEXIT_CRITICAL();
 80037e8:	f000 f92e 	bl	8003a48 <vPortExitCritical>

	return uxReturn;
}
 80037ec:	4630      	mov	r0, r6
 80037ee:	bd70      	pop	{r4, r5, r6, pc}

080037f0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80037f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f2:	460f      	mov	r7, r1
EventGroup_t *pxEventBits = xEventGroup;
BaseType_t xMatchFound = pdFALSE;

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80037f4:	4604      	mov	r4, r0
 80037f6:	b940      	cbnz	r0, 800380a <xEventGroupSetBits+0x1a>
 80037f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fc:	f383 8811 	msr	BASEPRI, r3
 8003800:	f3bf 8f6f 	isb	sy
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	e7fe      	b.n	8003808 <xEventGroupSetBits+0x18>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800380a:	f011 457f 	ands.w	r5, r1, #4278190080	; 0xff000000
 800380e:	d008      	beq.n	8003822 <xEventGroupSetBits+0x32>
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	e7fe      	b.n	8003820 <xEventGroupSetBits+0x30>

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003822:	f100 060c 	add.w	r6, r0, #12
	vTaskSuspendAll();
 8003826:	f001 f8a3 	bl	8004970 <vTaskSuspendAll>
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800382a:	6823      	ldr	r3, [r4, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
 800382c:	6920      	ldr	r0, [r4, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 800382e:	433b      	orrs	r3, r7
 8003830:	6023      	str	r3, [r4, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8003832:	4286      	cmp	r6, r0
 8003834:	6821      	ldr	r1, [r4, #0]
 8003836:	d106      	bne.n	8003846 <xEventGroupSetBits+0x56>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8003838:	ea21 0105 	bic.w	r1, r1, r5
 800383c:	6021      	str	r1, [r4, #0]
	}
	( void ) xTaskResumeAll();
 800383e:	f001 f937 	bl	8004ab0 <xTaskResumeAll>
 8003842:	6820      	ldr	r0, [r4, #0]

	return pxEventBits->uxEventBits;
}
 8003844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8003846:	e890 0088 	ldmia.w	r0, {r3, r7}
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800384a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800384e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003852:	d103      	bne.n	800385c <xEventGroupSetBits+0x6c>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003854:	420a      	tst	r2, r1
 8003856:	d104      	bne.n	8003862 <xEventGroupSetBits+0x72>
{
 8003858:	4638      	mov	r0, r7
 800385a:	e7ea      	b.n	8003832 <xEventGroupSetBits+0x42>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800385c:	ea32 0e01 	bics.w	lr, r2, r1
 8003860:	d1fa      	bne.n	8003858 <xEventGroupSetBits+0x68>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8003862:	01db      	lsls	r3, r3, #7
 8003864:	d500      	bpl.n	8003868 <xEventGroupSetBits+0x78>
					uxBitsToClear |= uxBitsWaitedFor;
 8003866:	4315      	orrs	r5, r2
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8003868:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800386c:	f001 fa6a 	bl	8004d44 <vTaskRemoveFromUnorderedEventList>
 8003870:	e7f2      	b.n	8003858 <xEventGroupSetBits+0x68>

08003872 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 8003872:	b538      	push	{r3, r4, r5, lr}
 8003874:	4604      	mov	r4, r0
EventGroup_t *pxEventBits = xEventGroup;
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );

	vTaskSuspendAll();
 8003876:	f001 f87b 	bl	8004970 <vTaskSuspendAll>

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 800387a:	f104 050c 	add.w	r5, r4, #12
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800387e:	6863      	ldr	r3, [r4, #4]
 8003880:	b933      	cbnz	r3, 8003890 <vEventGroupDelete+0x1e>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
 8003882:	4620      	mov	r0, r4
 8003884:	f000 fac0 	bl	8003e08 <vPortFree>
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
}
 8003888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	( void ) xTaskResumeAll();
 800388c:	f001 b910 	b.w	8004ab0 <xTaskResumeAll>
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8003890:	6920      	ldr	r0, [r4, #16]
 8003892:	42a8      	cmp	r0, r5
 8003894:	d108      	bne.n	80038a8 <vEventGroupDelete+0x36>
 8003896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	e7fe      	b.n	80038a6 <vEventGroupDelete+0x34>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 80038a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038ac:	f001 fa4a 	bl	8004d44 <vTaskRemoveFromUnorderedEventList>
 80038b0:	e7e5      	b.n	800387e <vEventGroupDelete+0xc>

080038b2 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038b2:	f100 0308 	add.w	r3, r0, #8
 80038b6:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038b8:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038bc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038be:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038c0:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038c2:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038c4:	6003      	str	r3, [r0, #0]
 80038c6:	4770      	bx	lr

080038c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	6103      	str	r3, [r0, #16]
 80038cc:	4770      	bx	lr

080038ce <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80038ce:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80038d0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80038da:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80038dc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80038de:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80038e0:	3301      	adds	r3, #1
 80038e2:	6003      	str	r3, [r0, #0]
 80038e4:	4770      	bx	lr

080038e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038e6:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038e8:	1c53      	adds	r3, r2, #1
{
 80038ea:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80038ec:	d10a      	bne.n	8003904 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038ee:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038f4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038f6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80038f8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80038fa:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80038fc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80038fe:	3301      	adds	r3, #1
 8003900:	6003      	str	r3, [r0, #0]
 8003902:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003904:	f100 0308 	add.w	r3, r0, #8
 8003908:	685c      	ldr	r4, [r3, #4]
 800390a:	6825      	ldr	r5, [r4, #0]
 800390c:	42aa      	cmp	r2, r5
 800390e:	d3ef      	bcc.n	80038f0 <vListInsert+0xa>
 8003910:	4623      	mov	r3, r4
 8003912:	e7f9      	b.n	8003908 <vListInsert+0x22>

08003914 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003914:	6841      	ldr	r1, [r0, #4]
 8003916:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = pxItemToRemove->pxContainer;
 8003918:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800391a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800391c:	6882      	ldr	r2, [r0, #8]
 800391e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003920:	6859      	ldr	r1, [r3, #4]
 8003922:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003924:	bf08      	it	eq
 8003926:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003928:	2200      	movs	r2, #0
 800392a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	3a01      	subs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003932:	6818      	ldr	r0, [r3, #0]
}
 8003934:	4770      	bx	lr
	...

08003938 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003938:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800393e:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <prvTaskExitError+0x3c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3301      	adds	r3, #1
 8003944:	d008      	beq.n	8003958 <prvTaskExitError+0x20>
 8003946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394a:	f383 8811 	msr	BASEPRI, r3
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	e7fe      	b.n	8003956 <prvTaskExitError+0x1e>
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003968:	9b01      	ldr	r3, [sp, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0fc      	beq.n	8003968 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800396e:	b002      	add	sp, #8
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	200001b0 	.word	0x200001b0

08003978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003978:	4808      	ldr	r0, [pc, #32]	; (800399c <prvPortStartFirstTask+0x24>)
 800397a:	6800      	ldr	r0, [r0, #0]
 800397c:	6800      	ldr	r0, [r0, #0]
 800397e:	f380 8808 	msr	MSP, r0
 8003982:	f04f 0000 	mov.w	r0, #0
 8003986:	f380 8814 	msr	CONTROL, r0
 800398a:	b662      	cpsie	i
 800398c:	b661      	cpsie	f
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	df00      	svc	0
 8003998:	bf00      	nop
 800399a:	0000      	.short	0x0000
 800399c:	e000ed08 	.word	0xe000ed08

080039a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80039a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80039b0 <vPortEnableVFP+0x10>
 80039a4:	6801      	ldr	r1, [r0, #0]
 80039a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80039aa:	6001      	str	r1, [r0, #0]
 80039ac:	4770      	bx	lr
 80039ae:	0000      	.short	0x0000
 80039b0:	e000ed88 	.word	0xe000ed88

080039b4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80039b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039b8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80039bc:	4b07      	ldr	r3, [pc, #28]	; (80039dc <pxPortInitialiseStack+0x28>)
 80039be:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80039c2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80039c6:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80039ca:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80039ce:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80039d2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80039d6:	3844      	subs	r0, #68	; 0x44
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	08003939 	.word	0x08003939

080039e0 <SVC_Handler>:
	__asm volatile (
 80039e0:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <pxCurrentTCBConst2>)
 80039e2:	6819      	ldr	r1, [r3, #0]
 80039e4:	6808      	ldr	r0, [r1, #0]
 80039e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ea:	f380 8809 	msr	PSP, r0
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f04f 0000 	mov.w	r0, #0
 80039f6:	f380 8811 	msr	BASEPRI, r0
 80039fa:	4770      	bx	lr
 80039fc:	f3af 8000 	nop.w

08003a00 <pxCurrentTCBConst2>:
 8003a00:	20004c68 	.word	0x20004c68

08003a04 <vPortEnterCritical>:
 8003a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003a14:	4a0a      	ldr	r2, [pc, #40]	; (8003a40 <vPortEnterCritical+0x3c>)
 8003a16:	6813      	ldr	r3, [r2, #0]
 8003a18:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8003a1a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8003a1c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8003a1e:	d10d      	bne.n	8003a3c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a20:	4b08      	ldr	r3, [pc, #32]	; (8003a44 <vPortEnterCritical+0x40>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003a28:	d008      	beq.n	8003a3c <vPortEnterCritical+0x38>
 8003a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2e:	f383 8811 	msr	BASEPRI, r3
 8003a32:	f3bf 8f6f 	isb	sy
 8003a36:	f3bf 8f4f 	dsb	sy
 8003a3a:	e7fe      	b.n	8003a3a <vPortEnterCritical+0x36>
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	200001b0 	.word	0x200001b0
 8003a44:	e000ed04 	.word	0xe000ed04

08003a48 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003a48:	4a08      	ldr	r2, [pc, #32]	; (8003a6c <vPortExitCritical+0x24>)
 8003a4a:	6813      	ldr	r3, [r2, #0]
 8003a4c:	b943      	cbnz	r3, 8003a60 <vPortExitCritical+0x18>
 8003a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a52:	f383 8811 	msr	BASEPRI, r3
 8003a56:	f3bf 8f6f 	isb	sy
 8003a5a:	f3bf 8f4f 	dsb	sy
 8003a5e:	e7fe      	b.n	8003a5e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003a60:	3b01      	subs	r3, #1
 8003a62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003a64:	b90b      	cbnz	r3, 8003a6a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	4770      	bx	lr
 8003a6c:	200001b0 	.word	0x200001b0

08003a70 <PendSV_Handler>:
	__asm volatile
 8003a70:	f3ef 8009 	mrs	r0, PSP
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <pxCurrentTCBConst>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	f01e 0f10 	tst.w	lr, #16
 8003a80:	bf08      	it	eq
 8003a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a8a:	6010      	str	r0, [r2, #0]
 8003a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a94:	f380 8811 	msr	BASEPRI, r0
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f001 f8a2 	bl	8004be8 <vTaskSwitchContext>
 8003aa4:	f04f 0000 	mov.w	r0, #0
 8003aa8:	f380 8811 	msr	BASEPRI, r0
 8003aac:	bc09      	pop	{r0, r3}
 8003aae:	6819      	ldr	r1, [r3, #0]
 8003ab0:	6808      	ldr	r0, [r1, #0]
 8003ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab6:	f01e 0f10 	tst.w	lr, #16
 8003aba:	bf08      	it	eq
 8003abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ac0:	f380 8809 	msr	PSP, r0
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	f3af 8000 	nop.w

08003ad0 <pxCurrentTCBConst>:
 8003ad0:	20004c68 	.word	0x20004c68

08003ad4 <xPortSysTickHandler>:
{
 8003ad4:	b508      	push	{r3, lr}
	__asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003ae6:	f000 ff51 	bl	800498c <xTaskIncrementTick>
 8003aea:	b118      	cbz	r0, 8003af4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003aec:	4b03      	ldr	r3, [pc, #12]	; (8003afc <xPortSysTickHandler+0x28>)
 8003aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8003af4:	2300      	movs	r3, #0
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	bd08      	pop	{r3, pc}
 8003afc:	e000ed04 	.word	0xe000ed04

08003b00 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b00:	4a08      	ldr	r2, [pc, #32]	; (8003b24 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b02:	4909      	ldr	r1, [pc, #36]	; (8003b28 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b08:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b0a:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <vPortSetupTimerInterrupt+0x2c>)
 8003b0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b16:	4906      	ldr	r1, [pc, #24]	; (8003b30 <vPortSetupTimerInterrupt+0x30>)
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b1c:	2307      	movs	r3, #7
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	e000e010 	.word	0xe000e010
 8003b28:	e000e018 	.word	0xe000e018
 8003b2c:	200001d4 	.word	0x200001d4
 8003b30:	e000e014 	.word	0xe000e014

08003b34 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b34:	4b39      	ldr	r3, [pc, #228]	; (8003c1c <xPortStartScheduler+0xe8>)
 8003b36:	4a3a      	ldr	r2, [pc, #232]	; (8003c20 <xPortStartScheduler+0xec>)
{
 8003b38:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b3a:	6819      	ldr	r1, [r3, #0]
 8003b3c:	4291      	cmp	r1, r2
 8003b3e:	d108      	bne.n	8003b52 <xPortStartScheduler+0x1e>
	__asm volatile
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	e7fe      	b.n	8003b50 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	4b33      	ldr	r3, [pc, #204]	; (8003c24 <xPortStartScheduler+0xf0>)
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d108      	bne.n	8003b6c <xPortStartScheduler+0x38>
 8003b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5e:	f383 8811 	msr	BASEPRI, r3
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	e7fe      	b.n	8003b6a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b6c:	4b2e      	ldr	r3, [pc, #184]	; (8003c28 <xPortStartScheduler+0xf4>)
 8003b6e:	781a      	ldrb	r2, [r3, #0]
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b74:	22ff      	movs	r2, #255	; 0xff
 8003b76:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b78:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b7a:	4a2c      	ldr	r2, [pc, #176]	; (8003c2c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b82:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003b86:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b8a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b8c:	4b28      	ldr	r3, [pc, #160]	; (8003c30 <xPortStartScheduler+0xfc>)
 8003b8e:	2207      	movs	r2, #7
 8003b90:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b92:	2100      	movs	r1, #0
 8003b94:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003b98:	0600      	lsls	r0, r0, #24
 8003b9a:	f102 34ff 	add.w	r4, r2, #4294967295
 8003b9e:	d40d      	bmi.n	8003bbc <xPortStartScheduler+0x88>
 8003ba0:	b101      	cbz	r1, 8003ba4 <xPortStartScheduler+0x70>
 8003ba2:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	2a03      	cmp	r2, #3
 8003ba8:	d011      	beq.n	8003bce <xPortStartScheduler+0x9a>
 8003baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	e7fe      	b.n	8003bba <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003bbc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003bc0:	0052      	lsls	r2, r2, #1
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	f88d 2003 	strb.w	r2, [sp, #3]
 8003bc8:	2101      	movs	r1, #1
 8003bca:	4622      	mov	r2, r4
 8003bcc:	e7e2      	b.n	8003b94 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bce:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003bd0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003bd4:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003bd6:	9b01      	ldr	r3, [sp, #4]
 8003bd8:	4a13      	ldr	r2, [pc, #76]	; (8003c28 <xPortStartScheduler+0xf4>)
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003bde:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <xPortStartScheduler+0x100>)
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003be6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003bee:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8003bf0:	f7ff ff86 	bl	8003b00 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003bf4:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <xPortStartScheduler+0x104>)
 8003bf6:	2400      	movs	r4, #0
 8003bf8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8003bfa:	f7ff fed1 	bl	80039a0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003bfe:	4a0f      	ldr	r2, [pc, #60]	; (8003c3c <xPortStartScheduler+0x108>)
 8003c00:	6813      	ldr	r3, [r2, #0]
 8003c02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003c06:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8003c08:	f7ff feb6 	bl	8003978 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8003c0c:	f000 ffec 	bl	8004be8 <vTaskSwitchContext>
	prvTaskExitError();
 8003c10:	f7ff fe92 	bl	8003938 <prvTaskExitError>
}
 8003c14:	4620      	mov	r0, r4
 8003c16:	b002      	add	sp, #8
 8003c18:	bd10      	pop	{r4, pc}
 8003c1a:	bf00      	nop
 8003c1c:	e000ed00 	.word	0xe000ed00
 8003c20:	410fc271 	.word	0x410fc271
 8003c24:	410fc270 	.word	0x410fc270
 8003c28:	e000e400 	.word	0xe000e400
 8003c2c:	2000104a 	.word	0x2000104a
 8003c30:	2000104c 	.word	0x2000104c
 8003c34:	e000ed20 	.word	0xe000ed20
 8003c38:	200001b0 	.word	0x200001b0
 8003c3c:	e000ef34 	.word	0xe000ef34

08003c40 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003c40:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003c44:	2b0f      	cmp	r3, #15
 8003c46:	d90e      	bls.n	8003c66 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003c48:	4a10      	ldr	r2, [pc, #64]	; (8003c8c <vPortValidateInterruptPriority+0x4c>)
 8003c4a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003c4c:	4a10      	ldr	r2, [pc, #64]	; (8003c90 <vPortValidateInterruptPriority+0x50>)
 8003c4e:	7812      	ldrb	r2, [r2, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d908      	bls.n	8003c66 <vPortValidateInterruptPriority+0x26>
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	e7fe      	b.n	8003c64 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003c66:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <vPortValidateInterruptPriority+0x54>)
 8003c68:	4a0b      	ldr	r2, [pc, #44]	; (8003c98 <vPortValidateInterruptPriority+0x58>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6812      	ldr	r2, [r2, #0]
 8003c6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d908      	bls.n	8003c88 <vPortValidateInterruptPriority+0x48>
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	e7fe      	b.n	8003c86 <vPortValidateInterruptPriority+0x46>
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	e000e3f0 	.word	0xe000e3f0
 8003c90:	2000104a 	.word	0x2000104a
 8003c94:	e000ed0c 	.word	0xe000ed0c
 8003c98:	2000104c 	.word	0x2000104c

08003c9c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003c9c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c9e:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <prvInsertBlockIntoFreeList+0x40>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	4282      	cmp	r2, r0
 8003ca4:	d318      	bcc.n	8003cd8 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003ca6:	685c      	ldr	r4, [r3, #4]
 8003ca8:	1919      	adds	r1, r3, r4
 8003caa:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003cac:	bf01      	itttt	eq
 8003cae:	6841      	ldreq	r1, [r0, #4]
 8003cb0:	4618      	moveq	r0, r3
 8003cb2:	1909      	addeq	r1, r1, r4
 8003cb4:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003cb6:	6844      	ldr	r4, [r0, #4]
 8003cb8:	1901      	adds	r1, r0, r4
 8003cba:	428a      	cmp	r2, r1
 8003cbc:	d107      	bne.n	8003cce <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003cbe:	4908      	ldr	r1, [pc, #32]	; (8003ce0 <prvInsertBlockIntoFreeList+0x44>)
 8003cc0:	6809      	ldr	r1, [r1, #0]
 8003cc2:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003cc4:	bf1f      	itttt	ne
 8003cc6:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003cc8:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003cca:	1909      	addne	r1, r1, r4
 8003ccc:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003cce:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003cd0:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003cd2:	bf18      	it	ne
 8003cd4:	6018      	strne	r0, [r3, #0]
 8003cd6:	bd10      	pop	{r4, pc}
 8003cd8:	4613      	mov	r3, r2
 8003cda:	e7e1      	b.n	8003ca0 <prvInsertBlockIntoFreeList+0x4>
 8003cdc:	20004c60 	.word	0x20004c60
 8003ce0:	20001050 	.word	0x20001050

08003ce4 <pvPortMalloc>:
{
 8003ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ce8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003cea:	f000 fe41 	bl	8004970 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003cee:	4940      	ldr	r1, [pc, #256]	; (8003df0 <pvPortMalloc+0x10c>)
 8003cf0:	4d40      	ldr	r5, [pc, #256]	; (8003df4 <pvPortMalloc+0x110>)
 8003cf2:	680b      	ldr	r3, [r1, #0]
 8003cf4:	bb0b      	cbnz	r3, 8003d3a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8003cf6:	4a40      	ldr	r2, [pc, #256]	; (8003df8 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003cf8:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003cfa:	bf1f      	itttt	ne
 8003cfc:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003cfe:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d02:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8003d06:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d08:	bf14      	ite	ne
 8003d0a:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d0c:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003d10:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8003d12:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d14:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d18:	4e38      	ldr	r6, [pc, #224]	; (8003dfc <pvPortMalloc+0x118>)
	pxEnd = ( void * ) uxAddress;
 8003d1a:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d20:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8003d22:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003d24:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d26:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d28:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d2a:	4b35      	ldr	r3, [pc, #212]	; (8003e00 <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d2c:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d2e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d30:	4b34      	ldr	r3, [pc, #208]	; (8003e04 <pvPortMalloc+0x120>)
 8003d32:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003d38:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003d3a:	682f      	ldr	r7, [r5, #0]
 8003d3c:	4227      	tst	r7, r4
 8003d3e:	d116      	bne.n	8003d6e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8003d40:	2c00      	cmp	r4, #0
 8003d42:	d041      	beq.n	8003dc8 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8003d44:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d48:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d4a:	bf1c      	itt	ne
 8003d4c:	f023 0307 	bicne.w	r3, r3, #7
 8003d50:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d52:	b163      	cbz	r3, 8003d6e <pvPortMalloc+0x8a>
 8003d54:	4a2b      	ldr	r2, [pc, #172]	; (8003e04 <pvPortMalloc+0x120>)
 8003d56:	6816      	ldr	r6, [r2, #0]
 8003d58:	42b3      	cmp	r3, r6
 8003d5a:	4690      	mov	r8, r2
 8003d5c:	d807      	bhi.n	8003d6e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8003d5e:	4a27      	ldr	r2, [pc, #156]	; (8003dfc <pvPortMalloc+0x118>)
 8003d60:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d62:	6868      	ldr	r0, [r5, #4]
 8003d64:	4283      	cmp	r3, r0
 8003d66:	d804      	bhi.n	8003d72 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8003d68:	6809      	ldr	r1, [r1, #0]
 8003d6a:	428d      	cmp	r5, r1
 8003d6c:	d107      	bne.n	8003d7e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8003d6e:	2400      	movs	r4, #0
 8003d70:	e02a      	b.n	8003dc8 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d72:	682c      	ldr	r4, [r5, #0]
 8003d74:	2c00      	cmp	r4, #0
 8003d76:	d0f7      	beq.n	8003d68 <pvPortMalloc+0x84>
 8003d78:	462a      	mov	r2, r5
 8003d7a:	4625      	mov	r5, r4
 8003d7c:	e7f1      	b.n	8003d62 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d7e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d80:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d82:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d84:	1ac2      	subs	r2, r0, r3
 8003d86:	2a10      	cmp	r2, #16
 8003d88:	d90f      	bls.n	8003daa <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d8a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d8c:	0741      	lsls	r1, r0, #29
 8003d8e:	d008      	beq.n	8003da2 <pvPortMalloc+0xbe>
 8003d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	e7fe      	b.n	8003da0 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003da2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003da4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003da6:	f7ff ff79 	bl	8003c9c <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003daa:	4915      	ldr	r1, [pc, #84]	; (8003e00 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003dac:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003dae:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003db0:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003db2:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003db4:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8003db6:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003dba:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003dbe:	bf38      	it	cc
 8003dc0:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003dc2:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003dc4:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003dc6:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8003dc8:	f000 fe72 	bl	8004ab0 <xTaskResumeAll>
		if( pvReturn == NULL )
 8003dcc:	b90c      	cbnz	r4, 8003dd2 <pvPortMalloc+0xee>
			vApplicationMallocFailedHook();
 8003dce:	f004 fbda 	bl	8008586 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dd2:	0763      	lsls	r3, r4, #29
 8003dd4:	d008      	beq.n	8003de8 <pvPortMalloc+0x104>
 8003dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	e7fe      	b.n	8003de6 <pvPortMalloc+0x102>
}
 8003de8:	4620      	mov	r0, r4
 8003dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dee:	bf00      	nop
 8003df0:	20001050 	.word	0x20001050
 8003df4:	20004c54 	.word	0x20004c54
 8003df8:	20001054 	.word	0x20001054
 8003dfc:	20004c60 	.word	0x20004c60
 8003e00:	20004c5c 	.word	0x20004c5c
 8003e04:	20004c58 	.word	0x20004c58

08003e08 <vPortFree>:
{
 8003e08:	b510      	push	{r4, lr}
	if( pv != NULL )
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	b370      	cbz	r0, 8003e6c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e0e:	4a18      	ldr	r2, [pc, #96]	; (8003e70 <vPortFree+0x68>)
 8003e10:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003e14:	6812      	ldr	r2, [r2, #0]
 8003e16:	4213      	tst	r3, r2
 8003e18:	d108      	bne.n	8003e2c <vPortFree+0x24>
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	e7fe      	b.n	8003e2a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e2c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003e30:	b141      	cbz	r1, 8003e44 <vPortFree+0x3c>
 8003e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	e7fe      	b.n	8003e42 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e44:	ea23 0302 	bic.w	r3, r3, r2
 8003e48:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003e4c:	f000 fd90 	bl	8004970 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e50:	4a08      	ldr	r2, [pc, #32]	; (8003e74 <vPortFree+0x6c>)
 8003e52:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003e56:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e58:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e5c:	440b      	add	r3, r1
 8003e5e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e60:	f7ff ff1c 	bl	8003c9c <prvInsertBlockIntoFreeList>
}
 8003e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8003e68:	f000 be22 	b.w	8004ab0 <xTaskResumeAll>
 8003e6c:	bd10      	pop	{r4, pc}
 8003e6e:	bf00      	nop
 8003e70:	20004c54 	.word	0x20004c54
 8003e74:	20004c58 	.word	0x20004c58

08003e78 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e78:	b510      	push	{r4, lr}
 8003e7a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e7c:	f7ff fdc2 	bl	8003a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e80:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003e82:	f7ff fde1 	bl	8003a48 <vPortExitCritical>

	return xReturn;
}
 8003e86:	fab4 f084 	clz	r0, r4
 8003e8a:	0940      	lsrs	r0, r0, #5
 8003e8c:	bd10      	pop	{r4, pc}

08003e8e <prvCopyDataToQueue>:
{
 8003e8e:	b570      	push	{r4, r5, r6, lr}
 8003e90:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e92:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e94:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8003e96:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e98:	b942      	cbnz	r2, 8003eac <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e9a:	6805      	ldr	r5, [r0, #0]
 8003e9c:	b99d      	cbnz	r5, 8003ec6 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e9e:	6880      	ldr	r0, [r0, #8]
 8003ea0:	f001 f868 	bl	8004f74 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ea4:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ea6:	3601      	adds	r6, #1
 8003ea8:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8003eaa:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8003eac:	b96d      	cbnz	r5, 8003eca <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003eae:	6840      	ldr	r0, [r0, #4]
 8003eb0:	f004 fd27 	bl	8008902 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003eb4:	6863      	ldr	r3, [r4, #4]
 8003eb6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003eb8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003eba:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ebc:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d301      	bcc.n	8003ec6 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	e7ed      	b.n	8003ea6 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003eca:	68c0      	ldr	r0, [r0, #12]
 8003ecc:	f004 fd19 	bl	8008902 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ed0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ed2:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ed4:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ed6:	425b      	negs	r3, r3
 8003ed8:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003eda:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003edc:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ede:	bf3e      	ittt	cc
 8003ee0:	68a2      	ldrcc	r2, [r4, #8]
 8003ee2:	189b      	addcc	r3, r3, r2
 8003ee4:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003ee6:	2d02      	cmp	r5, #2
 8003ee8:	d1ed      	bne.n	8003ec6 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003eea:	b10e      	cbz	r6, 8003ef0 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8003eec:	3e01      	subs	r6, #1
 8003eee:	e7ea      	b.n	8003ec6 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8003ef0:	4630      	mov	r0, r6
 8003ef2:	e7d8      	b.n	8003ea6 <prvCopyDataToQueue+0x18>

08003ef4 <prvCopyDataFromQueue>:
{
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8003efa:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003efc:	b162      	cbz	r2, 8003f18 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003efe:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f00:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f02:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f04:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f06:	60d9      	str	r1, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f08:	bf24      	itt	cs
 8003f0a:	6819      	ldrcs	r1, [r3, #0]
 8003f0c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f0e:	68d9      	ldr	r1, [r3, #12]
}
 8003f10:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f14:	f004 bcf5 	b.w	8008902 <memcpy>
}
 8003f18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <prvUnlockQueue>:
{
 8003f1e:	b570      	push	{r4, r5, r6, lr}
 8003f20:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003f22:	f7ff fd6f 	bl	8003a04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003f26:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f2a:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8003f2e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f30:	2d00      	cmp	r5, #0
 8003f32:	dc14      	bgt.n	8003f5e <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8003f34:	23ff      	movs	r3, #255	; 0xff
 8003f36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003f3a:	f7ff fd85 	bl	8003a48 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003f3e:	f7ff fd61 	bl	8003a04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003f42:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f46:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8003f4a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f4c:	2d00      	cmp	r5, #0
 8003f4e:	dc12      	bgt.n	8003f76 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8003f50:	23ff      	movs	r3, #255	; 0xff
 8003f52:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8003f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8003f5a:	f7ff bd75 	b.w	8003a48 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0e7      	beq.n	8003f34 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f64:	4630      	mov	r0, r6
 8003f66:	f000 feab 	bl	8004cc0 <xTaskRemoveFromEventList>
 8003f6a:	b108      	cbz	r0, 8003f70 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8003f6c:	f000 ff92 	bl	8004e94 <vTaskMissedYield>
 8003f70:	3d01      	subs	r5, #1
 8003f72:	b26d      	sxtb	r5, r5
 8003f74:	e7dc      	b.n	8003f30 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f76:	6923      	ldr	r3, [r4, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0e9      	beq.n	8003f50 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	f000 fe9f 	bl	8004cc0 <xTaskRemoveFromEventList>
 8003f82:	b108      	cbz	r0, 8003f88 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8003f84:	f000 ff86 	bl	8004e94 <vTaskMissedYield>
 8003f88:	3d01      	subs	r5, #1
 8003f8a:	b26d      	sxtb	r5, r5
 8003f8c:	e7de      	b.n	8003f4c <prvUnlockQueue+0x2e>
	...

08003f90 <xQueueGenericReset>:
{
 8003f90:	b538      	push	{r3, r4, r5, lr}
 8003f92:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003f94:	4604      	mov	r4, r0
 8003f96:	b940      	cbnz	r0, 8003faa <xQueueGenericReset+0x1a>
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	e7fe      	b.n	8003fa8 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8003faa:	f7ff fd2b 	bl	8003a04 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fae:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003fb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003fb2:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fb4:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fb6:	4343      	muls	r3, r0
 8003fb8:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fba:	1a1b      	subs	r3, r3, r0
 8003fbc:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fbe:	60a1      	str	r1, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fc0:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fc2:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8003fc4:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fc6:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8003fc8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003fcc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8003fd0:	b995      	cbnz	r5, 8003ff8 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fd2:	6923      	ldr	r3, [r4, #16]
 8003fd4:	b163      	cbz	r3, 8003ff0 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fd6:	f104 0010 	add.w	r0, r4, #16
 8003fda:	f000 fe71 	bl	8004cc0 <xTaskRemoveFromEventList>
 8003fde:	b138      	cbz	r0, 8003ff0 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	; (800400c <xQueueGenericReset+0x7c>)
 8003fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8003ff0:	f7ff fd2a 	bl	8003a48 <vPortExitCritical>
}
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ff8:	f104 0010 	add.w	r0, r4, #16
 8003ffc:	f7ff fc59 	bl	80038b2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004000:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004004:	f7ff fc55 	bl	80038b2 <vListInitialise>
 8004008:	e7f2      	b.n	8003ff0 <xQueueGenericReset+0x60>
 800400a:	bf00      	nop
 800400c:	e000ed04 	.word	0xe000ed04

08004010 <xQueueGenericCreate>:
	{
 8004010:	b570      	push	{r4, r5, r6, lr}
 8004012:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004014:	4606      	mov	r6, r0
 8004016:	b940      	cbnz	r0, 800402a <xQueueGenericCreate+0x1a>
 8004018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	e7fe      	b.n	8004028 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800402a:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800402c:	3048      	adds	r0, #72	; 0x48
 800402e:	f7ff fe59 	bl	8003ce4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004032:	4604      	mov	r4, r0
 8004034:	b138      	cbz	r0, 8004046 <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004036:	b945      	cbnz	r5, 800404a <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004038:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800403a:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800403c:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800403e:	2101      	movs	r1, #1
 8004040:	4620      	mov	r0, r4
 8004042:	f7ff ffa5 	bl	8003f90 <xQueueGenericReset>
	}
 8004046:	4620      	mov	r0, r4
 8004048:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800404a:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800404e:	6003      	str	r3, [r0, #0]
 8004050:	e7f3      	b.n	800403a <xQueueGenericCreate+0x2a>

08004052 <xQueueCreateCountingSemaphore>:
	{
 8004052:	b510      	push	{r4, lr}
 8004054:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8004056:	b940      	cbnz	r0, 800406a <xQueueCreateCountingSemaphore+0x18>
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	e7fe      	b.n	8004068 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800406a:	4288      	cmp	r0, r1
 800406c:	d208      	bcs.n	8004080 <xQueueCreateCountingSemaphore+0x2e>
 800406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	e7fe      	b.n	800407e <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004080:	2202      	movs	r2, #2
 8004082:	2100      	movs	r1, #0
 8004084:	f7ff ffc4 	bl	8004010 <xQueueGenericCreate>
		if( xHandle != NULL )
 8004088:	b100      	cbz	r0, 800408c <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800408a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800408c:	bd10      	pop	{r4, pc}
	...

08004090 <xQueueGenericSend>:
{
 8004090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004094:	4689      	mov	r9, r1
 8004096:	9201      	str	r2, [sp, #4]
 8004098:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800409a:	4604      	mov	r4, r0
 800409c:	b940      	cbnz	r0, 80040b0 <xQueueGenericSend+0x20>
 800409e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	e7fe      	b.n	80040ae <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040b0:	2900      	cmp	r1, #0
 80040b2:	f040 8088 	bne.w	80041c6 <xQueueGenericSend+0x136>
 80040b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 8084 	beq.w	80041c6 <xQueueGenericSend+0x136>
 80040be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	e7fe      	b.n	80040ce <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040d0:	9e01      	ldr	r6, [sp, #4]
 80040d2:	2e00      	cmp	r6, #0
 80040d4:	f000 8082 	beq.w	80041dc <xQueueGenericSend+0x14c>
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	e7fe      	b.n	80040e8 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 80040ea:	9d01      	ldr	r5, [sp, #4]
 80040ec:	b91d      	cbnz	r5, 80040f6 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 80040ee:	f7ff fcab 	bl	8003a48 <vPortExitCritical>
			return errQUEUE_FULL;
 80040f2:	2000      	movs	r0, #0
 80040f4:	e058      	b.n	80041a8 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 80040f6:	b916      	cbnz	r6, 80040fe <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040f8:	a802      	add	r0, sp, #8
 80040fa:	f000 fe83 	bl	8004e04 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80040fe:	f7ff fca3 	bl	8003a48 <vPortExitCritical>
		vTaskSuspendAll();
 8004102:	f000 fc35 	bl	8004970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004106:	f7ff fc7d 	bl	8003a04 <vPortEnterCritical>
 800410a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800410e:	2bff      	cmp	r3, #255	; 0xff
 8004110:	bf08      	it	eq
 8004112:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8004116:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800411a:	2bff      	cmp	r3, #255	; 0xff
 800411c:	bf08      	it	eq
 800411e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8004122:	f7ff fc91 	bl	8003a48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004126:	a901      	add	r1, sp, #4
 8004128:	a802      	add	r0, sp, #8
 800412a:	f000 fe77 	bl	8004e1c <xTaskCheckForTimeOut>
 800412e:	2800      	cmp	r0, #0
 8004130:	d143      	bne.n	80041ba <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004132:	f7ff fc67 	bl	8003a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004136:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004138:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800413a:	f7ff fc85 	bl	8003a48 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800413e:	42ae      	cmp	r6, r5
 8004140:	d135      	bne.n	80041ae <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004142:	9901      	ldr	r1, [sp, #4]
 8004144:	f104 0010 	add.w	r0, r4, #16
 8004148:	f000 fda0 	bl	8004c8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800414c:	4620      	mov	r0, r4
 800414e:	f7ff fee6 	bl	8003f1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004152:	f000 fcad 	bl	8004ab0 <xTaskResumeAll>
 8004156:	b938      	cbnz	r0, 8004168 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8004158:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800415c:	f8ca 3000 	str.w	r3, [sl]
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800416a:	f7ff fc4b 	bl	8003a04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800416e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004170:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004172:	429a      	cmp	r2, r3
 8004174:	d301      	bcc.n	800417a <xQueueGenericSend+0xea>
 8004176:	2f02      	cmp	r7, #2
 8004178:	d1b7      	bne.n	80040ea <xQueueGenericSend+0x5a>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800417a:	463a      	mov	r2, r7
 800417c:	4649      	mov	r1, r9
 800417e:	4620      	mov	r0, r4
 8004180:	f7ff fe85 	bl	8003e8e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004184:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004186:	b11b      	cbz	r3, 8004190 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004188:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800418c:	f000 fd98 	bl	8004cc0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8004190:	b138      	cbz	r0, 80041a2 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8004192:	4b19      	ldr	r3, [pc, #100]	; (80041f8 <xQueueGenericSend+0x168>)
 8004194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80041a2:	f7ff fc51 	bl	8003a48 <vPortExitCritical>
				return pdPASS;
 80041a6:	2001      	movs	r0, #1
}
 80041a8:	b004      	add	sp, #16
 80041aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80041ae:	4620      	mov	r0, r4
 80041b0:	f7ff feb5 	bl	8003f1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041b4:	f000 fc7c 	bl	8004ab0 <xTaskResumeAll>
 80041b8:	e7d6      	b.n	8004168 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 80041ba:	4620      	mov	r0, r4
 80041bc:	f7ff feaf 	bl	8003f1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041c0:	f000 fc76 	bl	8004ab0 <xTaskResumeAll>
 80041c4:	e795      	b.n	80040f2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041c6:	2f02      	cmp	r7, #2
 80041c8:	d102      	bne.n	80041d0 <xQueueGenericSend+0x140>
 80041ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d10a      	bne.n	80041e6 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041d0:	f000 fe6c 	bl	8004eac <xTaskGetSchedulerState>
 80041d4:	2800      	cmp	r0, #0
 80041d6:	f43f af7b 	beq.w	80040d0 <xQueueGenericSend+0x40>
 80041da:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80041dc:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80041e0:	f8df a014 	ldr.w	sl, [pc, #20]	; 80041f8 <xQueueGenericSend+0x168>
 80041e4:	e7c1      	b.n	800416a <xQueueGenericSend+0xda>
 80041e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	e7fe      	b.n	80041f6 <xQueueGenericSend+0x166>
 80041f8:	e000ed04 	.word	0xe000ed04

080041fc <xQueueGenericSendFromISR>:
{
 80041fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004200:	4688      	mov	r8, r1
 8004202:	4691      	mov	r9, r2
 8004204:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004206:	4604      	mov	r4, r0
 8004208:	b940      	cbnz	r0, 800421c <xQueueGenericSendFromISR+0x20>
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	e7fe      	b.n	800421a <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800421c:	bb09      	cbnz	r1, 8004262 <xQueueGenericSendFromISR+0x66>
 800421e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004220:	b1fb      	cbz	r3, 8004262 <xQueueGenericSendFromISR+0x66>
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	e7fe      	b.n	8004232 <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004234:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004238:	f000 fd42 	bl	8004cc0 <xTaskRemoveFromEventList>
 800423c:	2800      	cmp	r0, #0
 800423e:	d034      	beq.n	80042aa <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8004240:	f1b9 0f00 	cmp.w	r9, #0
 8004244:	d031      	beq.n	80042aa <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004246:	2001      	movs	r0, #1
 8004248:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 800424c:	f386 8811 	msr	BASEPRI, r6
}
 8004250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004254:	3501      	adds	r5, #1
 8004256:	b26d      	sxtb	r5, r5
 8004258:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800425c:	e025      	b.n	80042aa <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 800425e:	2000      	movs	r0, #0
 8004260:	e7f4      	b.n	800424c <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004262:	2f02      	cmp	r7, #2
 8004264:	d102      	bne.n	800426c <xQueueGenericSendFromISR+0x70>
 8004266:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004268:	2b01      	cmp	r3, #1
 800426a:	d120      	bne.n	80042ae <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800426c:	f7ff fce8 	bl	8003c40 <vPortValidateInterruptPriority>
	__asm volatile
 8004270:	f3ef 8611 	mrs	r6, BASEPRI
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004284:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004286:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004288:	429a      	cmp	r2, r3
 800428a:	d301      	bcc.n	8004290 <xQueueGenericSendFromISR+0x94>
 800428c:	2f02      	cmp	r7, #2
 800428e:	d1e6      	bne.n	800425e <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004290:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004294:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8004296:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004298:	4641      	mov	r1, r8
 800429a:	4620      	mov	r0, r4
 800429c:	f7ff fdf7 	bl	8003e8e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80042a0:	1c6b      	adds	r3, r5, #1
 80042a2:	d1d7      	bne.n	8004254 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1c4      	bne.n	8004234 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 80042aa:	2001      	movs	r0, #1
 80042ac:	e7ce      	b.n	800424c <xQueueGenericSendFromISR+0x50>
	__asm volatile
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	e7fe      	b.n	80042be <xQueueGenericSendFromISR+0xc2>

080042c0 <xQueueReceive>:
{
 80042c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042c4:	b085      	sub	sp, #20
 80042c6:	4688      	mov	r8, r1
 80042c8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80042ca:	4604      	mov	r4, r0
 80042cc:	b940      	cbnz	r0, 80042e0 <xQueueReceive+0x20>
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	e7fe      	b.n	80042de <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042e0:	2900      	cmp	r1, #0
 80042e2:	f040 8086 	bne.w	80043f2 <xQueueReceive+0x132>
 80042e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 8082 	beq.w	80043f2 <xQueueReceive+0x132>
 80042ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	e7fe      	b.n	80042fe <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004300:	9e01      	ldr	r6, [sp, #4]
 8004302:	2e00      	cmp	r6, #0
 8004304:	d07a      	beq.n	80043fc <xQueueReceive+0x13c>
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	e7fe      	b.n	8004316 <xQueueReceive+0x56>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004318:	9d01      	ldr	r5, [sp, #4]
 800431a:	b91d      	cbnz	r5, 8004324 <xQueueReceive+0x64>
					taskEXIT_CRITICAL();
 800431c:	f7ff fb94 	bl	8003a48 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8004320:	2000      	movs	r0, #0
 8004322:	e052      	b.n	80043ca <xQueueReceive+0x10a>
				else if( xEntryTimeSet == pdFALSE )
 8004324:	b916      	cbnz	r6, 800432c <xQueueReceive+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004326:	a802      	add	r0, sp, #8
 8004328:	f000 fd6c 	bl	8004e04 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800432c:	f7ff fb8c 	bl	8003a48 <vPortExitCritical>
		vTaskSuspendAll();
 8004330:	f000 fb1e 	bl	8004970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004334:	f7ff fb66 	bl	8003a04 <vPortEnterCritical>
 8004338:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800433c:	2bff      	cmp	r3, #255	; 0xff
 800433e:	bf08      	it	eq
 8004340:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8004344:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004348:	2bff      	cmp	r3, #255	; 0xff
 800434a:	bf08      	it	eq
 800434c:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8004350:	f7ff fb7a 	bl	8003a48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004354:	a901      	add	r1, sp, #4
 8004356:	a802      	add	r0, sp, #8
 8004358:	f000 fd60 	bl	8004e1c <xTaskCheckForTimeOut>
 800435c:	2800      	cmp	r0, #0
 800435e:	d13d      	bne.n	80043dc <xQueueReceive+0x11c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004360:	4620      	mov	r0, r4
 8004362:	f7ff fd89 	bl	8003e78 <prvIsQueueEmpty>
 8004366:	b398      	cbz	r0, 80043d0 <xQueueReceive+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004368:	9901      	ldr	r1, [sp, #4]
 800436a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800436e:	f000 fc8d 	bl	8004c8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004372:	4620      	mov	r0, r4
 8004374:	f7ff fdd3 	bl	8003f1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004378:	f000 fb9a 	bl	8004ab0 <xTaskResumeAll>
 800437c:	b938      	cbnz	r0, 800438e <xQueueReceive+0xce>
					portYIELD_WITHIN_API();
 800437e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004382:	f8c9 3000 	str.w	r3, [r9]
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004390:	f7ff fb38 	bl	8003a04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004394:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004396:	2d00      	cmp	r5, #0
 8004398:	d0be      	beq.n	8004318 <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800439a:	4641      	mov	r1, r8
 800439c:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800439e:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80043a0:	f7ff fda8 	bl	8003ef4 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80043a4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043a6:	6923      	ldr	r3, [r4, #16]
 80043a8:	b163      	cbz	r3, 80043c4 <xQueueReceive+0x104>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043aa:	f104 0010 	add.w	r0, r4, #16
 80043ae:	f000 fc87 	bl	8004cc0 <xTaskRemoveFromEventList>
 80043b2:	b138      	cbz	r0, 80043c4 <xQueueReceive+0x104>
						queueYIELD_IF_USING_PREEMPTION();
 80043b4:	4b13      	ldr	r3, [pc, #76]	; (8004404 <xQueueReceive+0x144>)
 80043b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80043c4:	f7ff fb40 	bl	8003a48 <vPortExitCritical>
				return pdPASS;
 80043c8:	2001      	movs	r0, #1
}
 80043ca:	b005      	add	sp, #20
 80043cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 80043d0:	4620      	mov	r0, r4
 80043d2:	f7ff fda4 	bl	8003f1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043d6:	f000 fb6b 	bl	8004ab0 <xTaskResumeAll>
 80043da:	e7d8      	b.n	800438e <xQueueReceive+0xce>
			prvUnlockQueue( pxQueue );
 80043dc:	4620      	mov	r0, r4
 80043de:	f7ff fd9e 	bl	8003f1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043e2:	f000 fb65 	bl	8004ab0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043e6:	4620      	mov	r0, r4
 80043e8:	f7ff fd46 	bl	8003e78 <prvIsQueueEmpty>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	d0ce      	beq.n	800438e <xQueueReceive+0xce>
 80043f0:	e796      	b.n	8004320 <xQueueReceive+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043f2:	f000 fd5b 	bl	8004eac <xTaskGetSchedulerState>
 80043f6:	2800      	cmp	r0, #0
 80043f8:	d082      	beq.n	8004300 <xQueueReceive+0x40>
 80043fa:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80043fc:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80043fe:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8004404 <xQueueReceive+0x144>
 8004402:	e7c5      	b.n	8004390 <xQueueReceive+0xd0>
 8004404:	e000ed04 	.word	0xe000ed04

08004408 <xQueueSemaphoreTake>:
{
 8004408:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 800440c:	4604      	mov	r4, r0
{
 800440e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004410:	b940      	cbnz	r0, 8004424 <xQueueSemaphoreTake+0x1c>
 8004412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	e7fe      	b.n	8004422 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004424:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004426:	b145      	cbz	r5, 800443a <xQueueSemaphoreTake+0x32>
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	e7fe      	b.n	8004438 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800443a:	f000 fd37 	bl	8004eac <xTaskGetSchedulerState>
 800443e:	b918      	cbnz	r0, 8004448 <xQueueSemaphoreTake+0x40>
 8004440:	9d01      	ldr	r5, [sp, #4]
 8004442:	2d00      	cmp	r5, #0
 8004444:	f040 8095 	bne.w	8004572 <xQueueSemaphoreTake+0x16a>
					portYIELD_WITHIN_API();
 8004448:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8004584 <xQueueSemaphoreTake+0x17c>
 800444c:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800444e:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8004450:	f7ff fad8 	bl	8003a04 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004454:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004456:	b1e3      	cbz	r3, 8004492 <xQueueSemaphoreTake+0x8a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004458:	3b01      	subs	r3, #1
 800445a:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	b913      	cbnz	r3, 8004466 <xQueueSemaphoreTake+0x5e>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004460:	f000 fe32 	bl	80050c8 <pvTaskIncrementMutexHeldCount>
 8004464:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004466:	6923      	ldr	r3, [r4, #16]
 8004468:	b163      	cbz	r3, 8004484 <xQueueSemaphoreTake+0x7c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800446a:	f104 0010 	add.w	r0, r4, #16
 800446e:	f000 fc27 	bl	8004cc0 <xTaskRemoveFromEventList>
 8004472:	b138      	cbz	r0, 8004484 <xQueueSemaphoreTake+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 8004474:	4b43      	ldr	r3, [pc, #268]	; (8004584 <xQueueSemaphoreTake+0x17c>)
 8004476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004484:	f7ff fae0 	bl	8003a48 <vPortExitCritical>
				return pdPASS;
 8004488:	2501      	movs	r5, #1
}
 800448a:	4628      	mov	r0, r5
 800448c:	b004      	add	sp, #16
 800448e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 8004492:	9b01      	ldr	r3, [sp, #4]
 8004494:	b963      	cbnz	r3, 80044b0 <xQueueSemaphoreTake+0xa8>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004496:	b145      	cbz	r5, 80044aa <xQueueSemaphoreTake+0xa2>
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	e7fe      	b.n	80044a8 <xQueueSemaphoreTake+0xa0>
					taskEXIT_CRITICAL();
 80044aa:	f7ff facd 	bl	8003a48 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80044ae:	e7ec      	b.n	800448a <xQueueSemaphoreTake+0x82>
				else if( xEntryTimeSet == pdFALSE )
 80044b0:	b916      	cbnz	r6, 80044b8 <xQueueSemaphoreTake+0xb0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044b2:	a802      	add	r0, sp, #8
 80044b4:	f000 fca6 	bl	8004e04 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80044b8:	f7ff fac6 	bl	8003a48 <vPortExitCritical>
		vTaskSuspendAll();
 80044bc:	f000 fa58 	bl	8004970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044c0:	f7ff faa0 	bl	8003a04 <vPortEnterCritical>
 80044c4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80044c8:	2bff      	cmp	r3, #255	; 0xff
 80044ca:	bf08      	it	eq
 80044cc:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80044d0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80044d4:	2bff      	cmp	r3, #255	; 0xff
 80044d6:	bf08      	it	eq
 80044d8:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80044dc:	f7ff fab4 	bl	8003a48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044e0:	a901      	add	r1, sp, #4
 80044e2:	a802      	add	r0, sp, #8
 80044e4:	f000 fc9a 	bl	8004e1c <xTaskCheckForTimeOut>
 80044e8:	bb40      	cbnz	r0, 800453c <xQueueSemaphoreTake+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044ea:	4620      	mov	r0, r4
 80044ec:	f7ff fcc4 	bl	8003e78 <prvIsQueueEmpty>
 80044f0:	b1f0      	cbz	r0, 8004530 <xQueueSemaphoreTake+0x128>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	b93b      	cbnz	r3, 8004506 <xQueueSemaphoreTake+0xfe>
						taskENTER_CRITICAL();
 80044f6:	f7ff fa85 	bl	8003a04 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80044fa:	68a0      	ldr	r0, [r4, #8]
 80044fc:	f000 fce6 	bl	8004ecc <xTaskPriorityInherit>
 8004500:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8004502:	f7ff faa1 	bl	8003a48 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004506:	9901      	ldr	r1, [sp, #4]
 8004508:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800450c:	f000 fbbe 	bl	8004c8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004510:	4620      	mov	r0, r4
 8004512:	f7ff fd04 	bl	8003f1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004516:	f000 facb 	bl	8004ab0 <xTaskResumeAll>
 800451a:	b938      	cbnz	r0, 800452c <xQueueSemaphoreTake+0x124>
					portYIELD_WITHIN_API();
 800451c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004520:	f8c8 3000 	str.w	r3, [r8]
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	2601      	movs	r6, #1
 800452e:	e78f      	b.n	8004450 <xQueueSemaphoreTake+0x48>
				prvUnlockQueue( pxQueue );
 8004530:	4620      	mov	r0, r4
 8004532:	f7ff fcf4 	bl	8003f1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004536:	f000 fabb 	bl	8004ab0 <xTaskResumeAll>
 800453a:	e7f7      	b.n	800452c <xQueueSemaphoreTake+0x124>
			prvUnlockQueue( pxQueue );
 800453c:	4620      	mov	r0, r4
 800453e:	f7ff fcee 	bl	8003f1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004542:	f000 fab5 	bl	8004ab0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004546:	4620      	mov	r0, r4
 8004548:	f7ff fc96 	bl	8003e78 <prvIsQueueEmpty>
 800454c:	2800      	cmp	r0, #0
 800454e:	d0ed      	beq.n	800452c <xQueueSemaphoreTake+0x124>
					if( xInheritanceOccurred != pdFALSE )
 8004550:	2d00      	cmp	r5, #0
 8004552:	d09a      	beq.n	800448a <xQueueSemaphoreTake+0x82>
						taskENTER_CRITICAL();
 8004554:	f7ff fa56 	bl	8003a04 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004558:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800455a:	b119      	cbz	r1, 8004564 <xQueueSemaphoreTake+0x15c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800455c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800455e:	6819      	ldr	r1, [r3, #0]
 8004560:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004564:	68a0      	ldr	r0, [r4, #8]
 8004566:	f000 fd55 	bl	8005014 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 800456a:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 800456c:	f7ff fa6c 	bl	8003a48 <vPortExitCritical>
 8004570:	e78b      	b.n	800448a <xQueueSemaphoreTake+0x82>
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	e7fe      	b.n	8004582 <xQueueSemaphoreTake+0x17a>
 8004584:	e000ed04 	.word	0xe000ed04

08004588 <uxQueueMessagesWaiting>:
{
 8004588:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 800458a:	4604      	mov	r4, r0
 800458c:	b940      	cbnz	r0, 80045a0 <uxQueueMessagesWaiting+0x18>
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	e7fe      	b.n	800459e <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 80045a0:	f7ff fa30 	bl	8003a04 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80045a4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80045a6:	f7ff fa4f 	bl	8003a48 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80045aa:	4620      	mov	r0, r4
 80045ac:	bd10      	pop	{r4, pc}
	...

080045b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80045b0:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80045b2:	4a07      	ldr	r2, [pc, #28]	; (80045d0 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045b4:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80045b6:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80045ba:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 80045be:	b91d      	cbnz	r5, 80045c8 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80045c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80045c4:	6060      	str	r0, [r4, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80045c6:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045c8:	3301      	adds	r3, #1
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d1f3      	bne.n	80045b6 <vQueueAddToRegistry+0x6>
 80045ce:	bd30      	pop	{r4, r5, pc}
 80045d0:	20006948 	.word	0x20006948

080045d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80045d4:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80045d6:	4a08      	ldr	r2, [pc, #32]	; (80045f8 <vQueueUnregisterQueue+0x24>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045d8:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80045da:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80045de:	684c      	ldr	r4, [r1, #4]
 80045e0:	4284      	cmp	r4, r0
 80045e2:	d104      	bne.n	80045ee <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80045e4:	2000      	movs	r0, #0
 80045e6:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80045ea:	6048      	str	r0, [r1, #4]
				break;
 80045ec:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045ee:	3301      	adds	r3, #1
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d1f2      	bne.n	80045da <vQueueUnregisterQueue+0x6>
 80045f4:	bd10      	pop	{r4, pc}
 80045f6:	bf00      	nop
 80045f8:	20006948 	.word	0x20006948

080045fc <vQueueDelete>:
{
 80045fc:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 80045fe:	4604      	mov	r4, r0
 8004600:	b940      	cbnz	r0, 8004614 <vQueueDelete+0x18>
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	e7fe      	b.n	8004612 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 8004614:	f7ff ffde 	bl	80045d4 <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 8004618:	4620      	mov	r0, r4
}
 800461a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 800461e:	f7ff bbf3 	b.w	8003e08 <vPortFree>
	...

08004624 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004624:	4a06      	ldr	r2, [pc, #24]	; (8004640 <prvResetNextTaskUnblockTime+0x1c>)
 8004626:	6813      	ldr	r3, [r2, #0]
 8004628:	6819      	ldr	r1, [r3, #0]
 800462a:	4b06      	ldr	r3, [pc, #24]	; (8004644 <prvResetNextTaskUnblockTime+0x20>)
 800462c:	b919      	cbnz	r1, 8004636 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800462e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800463a:	68d2      	ldr	r2, [r2, #12]
 800463c:	6852      	ldr	r2, [r2, #4]
 800463e:	e7f8      	b.n	8004632 <prvResetNextTaskUnblockTime+0xe>
 8004640:	20004c6c 	.word	0x20004c6c
 8004644:	20004d44 	.word	0x20004d44

08004648 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800464a:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800464c:	4e1b      	ldr	r6, [pc, #108]	; (80046bc <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800464e:	681d      	ldr	r5, [r3, #0]
{
 8004650:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004652:	6830      	ldr	r0, [r6, #0]
 8004654:	3004      	adds	r0, #4
{
 8004656:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004658:	f7ff f95c 	bl	8003914 <uxListRemove>
 800465c:	4633      	mov	r3, r6
 800465e:	b940      	cbnz	r0, 8004672 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004660:	6831      	ldr	r1, [r6, #0]
 8004662:	4e17      	ldr	r6, [pc, #92]	; (80046c0 <prvAddCurrentTaskToDelayedList+0x78>)
 8004664:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004666:	6832      	ldr	r2, [r6, #0]
 8004668:	2001      	movs	r0, #1
 800466a:	4088      	lsls	r0, r1
 800466c:	ea22 0200 	bic.w	r2, r2, r0
 8004670:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004672:	1c62      	adds	r2, r4, #1
 8004674:	d107      	bne.n	8004686 <prvAddCurrentTaskToDelayedList+0x3e>
 8004676:	b137      	cbz	r7, 8004686 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004678:	6819      	ldr	r1, [r3, #0]
 800467a:	4812      	ldr	r0, [pc, #72]	; (80046c4 <prvAddCurrentTaskToDelayedList+0x7c>)
 800467c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800467e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004682:	f7ff b924 	b.w	80038ce <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004686:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004688:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800468a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800468c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800468e:	d907      	bls.n	80046a0 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004690:	4a0d      	ldr	r2, [pc, #52]	; (80046c8 <prvAddCurrentTaskToDelayedList+0x80>)
 8004692:	6810      	ldr	r0, [r2, #0]
 8004694:	6819      	ldr	r1, [r3, #0]
}
 8004696:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800469a:	3104      	adds	r1, #4
 800469c:	f7ff b923 	b.w	80038e6 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046a0:	4a0a      	ldr	r2, [pc, #40]	; (80046cc <prvAddCurrentTaskToDelayedList+0x84>)
 80046a2:	6810      	ldr	r0, [r2, #0]
 80046a4:	6819      	ldr	r1, [r3, #0]
 80046a6:	3104      	adds	r1, #4
 80046a8:	f7ff f91d 	bl	80038e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80046ac:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <prvAddCurrentTaskToDelayedList+0x88>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80046b2:	bf38      	it	cc
 80046b4:	601c      	strcc	r4, [r3, #0]
 80046b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046b8:	20004d8c 	.word	0x20004d8c
 80046bc:	20004c68 	.word	0x20004c68
 80046c0:	20004d14 	.word	0x20004d14
 80046c4:	20004d64 	.word	0x20004d64
 80046c8:	20004c70 	.word	0x20004c70
 80046cc:	20004c6c 	.word	0x20004c6c
 80046d0:	20004d44 	.word	0x20004d44

080046d4 <prvIdleTask>:
{
 80046d4:	b580      	push	{r7, lr}
				taskYIELD();
 80046d6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800473c <prvIdleTask+0x68>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046da:	4f14      	ldr	r7, [pc, #80]	; (800472c <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046dc:	4c14      	ldr	r4, [pc, #80]	; (8004730 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 80046de:	4e15      	ldr	r6, [pc, #84]	; (8004734 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	b963      	cbnz	r3, 80046fe <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046e4:	4b14      	ldr	r3, [pc, #80]	; (8004738 <prvIdleTask+0x64>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d9f8      	bls.n	80046de <prvIdleTask+0xa>
				taskYIELD();
 80046ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80046f0:	f8c8 3000 	str.w	r3, [r8]
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	e7ee      	b.n	80046dc <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80046fe:	f7ff f981 	bl	8003a04 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004706:	1d28      	adds	r0, r5, #4
 8004708:	f7ff f904 	bl	8003914 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800470c:	6833      	ldr	r3, [r6, #0]
 800470e:	3b01      	subs	r3, #1
 8004710:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	3b01      	subs	r3, #1
 8004716:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8004718:	f7ff f996 	bl	8003a48 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800471c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800471e:	f7ff fb73 	bl	8003e08 <vPortFree>
			vPortFree( pxTCB );
 8004722:	4628      	mov	r0, r5
 8004724:	f7ff fb70 	bl	8003e08 <vPortFree>
 8004728:	e7da      	b.n	80046e0 <prvIdleTask+0xc>
 800472a:	bf00      	nop
 800472c:	20004d78 	.word	0x20004d78
 8004730:	20004d04 	.word	0x20004d04
 8004734:	20004d00 	.word	0x20004d00
 8004738:	20004c74 	.word	0x20004c74
 800473c:	e000ed04 	.word	0xe000ed04

08004740 <xTaskCreate>:
	{
 8004740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004744:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8004748:	4680      	mov	r8, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800474a:	4650      	mov	r0, sl
	{
 800474c:	460d      	mov	r5, r1
 800474e:	4699      	mov	r9, r3
 8004750:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004752:	f7ff fac7 	bl	8003ce4 <pvPortMalloc>
			if( pxStack != NULL )
 8004756:	4607      	mov	r7, r0
 8004758:	b190      	cbz	r0, 8004780 <xTaskCreate+0x40>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800475a:	2054      	movs	r0, #84	; 0x54
 800475c:	f7ff fac2 	bl	8003ce4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004760:	4604      	mov	r4, r0
 8004762:	b150      	cbz	r0, 800477a <xTaskCreate+0x3a>
					pxNewTCB->pxStack = pxStack;
 8004764:	6307      	str	r7, [r0, #48]	; 0x30
	configASSERT( pcName );
 8004766:	b975      	cbnz	r5, 8004786 <xTaskCreate+0x46>
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	e7fe      	b.n	8004778 <xTaskCreate+0x38>
					vPortFree( pxStack );
 800477a:	4638      	mov	r0, r7
 800477c:	f7ff fb44 	bl	8003e08 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004780:	f04f 35ff 	mov.w	r5, #4294967295
 8004784:	e08d      	b.n	80048a2 <xTaskCreate+0x162>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004786:	4652      	mov	r2, sl
 8004788:	21a5      	movs	r1, #165	; 0xa5
 800478a:	4638      	mov	r0, r7
 800478c:	f004 f8de 	bl	800894c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004790:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004792:	f1aa 0a04 	sub.w	sl, sl, #4
 8004796:	449a      	add	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004798:	f02a 0a07 	bic.w	sl, sl, #7
 800479c:	1e6b      	subs	r3, r5, #1
 800479e:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80047a2:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047a4:	7859      	ldrb	r1, [r3, #1]
 80047a6:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == ( char ) 0x00 )
 80047aa:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80047ae:	b109      	cbz	r1, 80047b4 <xTaskCreate+0x74>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047b0:	42ab      	cmp	r3, r5
 80047b2:	d1f7      	bne.n	80047a4 <xTaskCreate+0x64>
 80047b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80047b6:	2d06      	cmp	r5, #6
 80047b8:	bf28      	it	cs
 80047ba:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047bc:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047c0:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 80047c2:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80047c4:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047c6:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047c8:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80047cc:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047d0:	f7ff f87a 	bl	80038c8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047d4:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047d8:	f104 0018 	add.w	r0, r4, #24
 80047dc:	f7ff f874 	bl	80038c8 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80047e0:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047e4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047e6:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047e8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047ea:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047ee:	464a      	mov	r2, r9
 80047f0:	4641      	mov	r1, r8
 80047f2:	4650      	mov	r0, sl
 80047f4:	f7ff f8de 	bl	80039b4 <pxPortInitialiseStack>
 80047f8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80047fa:	b106      	cbz	r6, 80047fe <xTaskCreate+0xbe>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047fc:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80047fe:	f7ff f901 	bl	8003a04 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004802:	4b2f      	ldr	r3, [pc, #188]	; (80048c0 <xTaskCreate+0x180>)
		if( pxCurrentTCB == NULL )
 8004804:	4e2f      	ldr	r6, [pc, #188]	; (80048c4 <xTaskCreate+0x184>)
		uxCurrentNumberOfTasks++;
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80048f0 <xTaskCreate+0x1b0>
 800480c:	3201      	adds	r2, #1
 800480e:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004810:	6835      	ldr	r5, [r6, #0]
 8004812:	2d00      	cmp	r5, #0
 8004814:	d148      	bne.n	80048a8 <xTaskCreate+0x168>
			pxCurrentTCB = pxNewTCB;
 8004816:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d11d      	bne.n	800485a <xTaskCreate+0x11a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800481e:	eb08 0005 	add.w	r0, r8, r5
 8004822:	3514      	adds	r5, #20
 8004824:	f7ff f845 	bl	80038b2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004828:	2d8c      	cmp	r5, #140	; 0x8c
 800482a:	d1f8      	bne.n	800481e <xTaskCreate+0xde>
	vListInitialise( &xDelayedTaskList1 );
 800482c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80048f4 <xTaskCreate+0x1b4>
	vListInitialise( &xDelayedTaskList2 );
 8004830:	4d25      	ldr	r5, [pc, #148]	; (80048c8 <xTaskCreate+0x188>)
	vListInitialise( &xDelayedTaskList1 );
 8004832:	4648      	mov	r0, r9
 8004834:	f7ff f83d 	bl	80038b2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004838:	4628      	mov	r0, r5
 800483a:	f7ff f83a 	bl	80038b2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800483e:	4823      	ldr	r0, [pc, #140]	; (80048cc <xTaskCreate+0x18c>)
 8004840:	f7ff f837 	bl	80038b2 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004844:	4822      	ldr	r0, [pc, #136]	; (80048d0 <xTaskCreate+0x190>)
 8004846:	f7ff f834 	bl	80038b2 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800484a:	4822      	ldr	r0, [pc, #136]	; (80048d4 <xTaskCreate+0x194>)
 800484c:	f7ff f831 	bl	80038b2 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004850:	4b21      	ldr	r3, [pc, #132]	; (80048d8 <xTaskCreate+0x198>)
 8004852:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004856:	4b21      	ldr	r3, [pc, #132]	; (80048dc <xTaskCreate+0x19c>)
 8004858:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800485a:	4a21      	ldr	r2, [pc, #132]	; (80048e0 <xTaskCreate+0x1a0>)
		prvAddTaskToReadyList( pxNewTCB );
 800485c:	4921      	ldr	r1, [pc, #132]	; (80048e4 <xTaskCreate+0x1a4>)
		uxTaskNumber++;
 800485e:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004860:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8004862:	3301      	adds	r3, #1
 8004864:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004866:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004868:	2501      	movs	r5, #1
 800486a:	fa05 f302 	lsl.w	r3, r5, r2
 800486e:	4303      	orrs	r3, r0
 8004870:	2014      	movs	r0, #20
 8004872:	600b      	str	r3, [r1, #0]
 8004874:	fb00 8002 	mla	r0, r0, r2, r8
 8004878:	4639      	mov	r1, r7
 800487a:	f7ff f828 	bl	80038ce <vListInsertEnd>
	taskEXIT_CRITICAL();
 800487e:	f7ff f8e3 	bl	8003a48 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004882:	4b19      	ldr	r3, [pc, #100]	; (80048e8 <xTaskCreate+0x1a8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	b163      	cbz	r3, 80048a2 <xTaskCreate+0x162>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004888:	6833      	ldr	r3, [r6, #0]
 800488a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800488e:	429a      	cmp	r2, r3
 8004890:	d207      	bcs.n	80048a2 <xTaskCreate+0x162>
			taskYIELD_IF_USING_PREEMPTION();
 8004892:	4b16      	ldr	r3, [pc, #88]	; (80048ec <xTaskCreate+0x1ac>)
 8004894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	f3bf 8f6f 	isb	sy
	}
 80048a2:	4628      	mov	r0, r5
 80048a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 80048a8:	4b0f      	ldr	r3, [pc, #60]	; (80048e8 <xTaskCreate+0x1a8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1d4      	bne.n	800485a <xTaskCreate+0x11a>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048b0:	6833      	ldr	r3, [r6, #0]
 80048b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80048b6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80048b8:	bf98      	it	ls
 80048ba:	6034      	strls	r4, [r6, #0]
 80048bc:	e7cd      	b.n	800485a <xTaskCreate+0x11a>
 80048be:	bf00      	nop
 80048c0:	20004d00 	.word	0x20004d00
 80048c4:	20004c68 	.word	0x20004c68
 80048c8:	20004d2c 	.word	0x20004d2c
 80048cc:	20004d4c 	.word	0x20004d4c
 80048d0:	20004d78 	.word	0x20004d78
 80048d4:	20004d64 	.word	0x20004d64
 80048d8:	20004c6c 	.word	0x20004c6c
 80048dc:	20004c70 	.word	0x20004c70
 80048e0:	20004d10 	.word	0x20004d10
 80048e4:	20004d14 	.word	0x20004d14
 80048e8:	20004d60 	.word	0x20004d60
 80048ec:	e000ed04 	.word	0xe000ed04
 80048f0:	20004c74 	.word	0x20004c74
 80048f4:	20004d18 	.word	0x20004d18

080048f8 <vTaskStartScheduler>:
{
 80048f8:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80048fa:	4b17      	ldr	r3, [pc, #92]	; (8004958 <vTaskStartScheduler+0x60>)
 80048fc:	9301      	str	r3, [sp, #4]
 80048fe:	2400      	movs	r4, #0
 8004900:	9400      	str	r4, [sp, #0]
 8004902:	4623      	mov	r3, r4
 8004904:	2280      	movs	r2, #128	; 0x80
 8004906:	4915      	ldr	r1, [pc, #84]	; (800495c <vTaskStartScheduler+0x64>)
 8004908:	4815      	ldr	r0, [pc, #84]	; (8004960 <vTaskStartScheduler+0x68>)
 800490a:	f7ff ff19 	bl	8004740 <xTaskCreate>
	if( xReturn == pdPASS )
 800490e:	2801      	cmp	r0, #1
 8004910:	d114      	bne.n	800493c <vTaskStartScheduler+0x44>
 8004912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004922:	4b10      	ldr	r3, [pc, #64]	; (8004964 <vTaskStartScheduler+0x6c>)
 8004924:	f04f 32ff 	mov.w	r2, #4294967295
 8004928:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800492a:	4b0f      	ldr	r3, [pc, #60]	; (8004968 <vTaskStartScheduler+0x70>)
 800492c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800492e:	4b0f      	ldr	r3, [pc, #60]	; (800496c <vTaskStartScheduler+0x74>)
 8004930:	601c      	str	r4, [r3, #0]
}
 8004932:	b002      	add	sp, #8
 8004934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004938:	f7ff b8fc 	b.w	8003b34 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800493c:	3001      	adds	r0, #1
 800493e:	d108      	bne.n	8004952 <vTaskStartScheduler+0x5a>
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	e7fe      	b.n	8004950 <vTaskStartScheduler+0x58>
}
 8004952:	b002      	add	sp, #8
 8004954:	bd10      	pop	{r4, pc}
 8004956:	bf00      	nop
 8004958:	20004d40 	.word	0x20004d40
 800495c:	08008d5d 	.word	0x08008d5d
 8004960:	080046d5 	.word	0x080046d5
 8004964:	20004d44 	.word	0x20004d44
 8004968:	20004d60 	.word	0x20004d60
 800496c:	20004d8c 	.word	0x20004d8c

08004970 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004970:	4a02      	ldr	r2, [pc, #8]	; (800497c <vTaskSuspendAll+0xc>)
 8004972:	6813      	ldr	r3, [r2, #0]
 8004974:	3301      	adds	r3, #1
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	20004d0c 	.word	0x20004d0c

08004980 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004980:	4b01      	ldr	r3, [pc, #4]	; (8004988 <xTaskGetTickCount+0x8>)
 8004982:	6818      	ldr	r0, [r3, #0]
}
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	20004d8c 	.word	0x20004d8c

0800498c <xTaskIncrementTick>:
{
 800498c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004990:	4b3c      	ldr	r3, [pc, #240]	; (8004a84 <xTaskIncrementTick+0xf8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d16d      	bne.n	8004a74 <xTaskIncrementTick+0xe8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004998:	4b3b      	ldr	r3, [pc, #236]	; (8004a88 <xTaskIncrementTick+0xfc>)
 800499a:	681c      	ldr	r4, [r3, #0]
 800499c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800499e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049a0:	b9bc      	cbnz	r4, 80049d2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80049a2:	4b3a      	ldr	r3, [pc, #232]	; (8004a8c <xTaskIncrementTick+0x100>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	6812      	ldr	r2, [r2, #0]
 80049a8:	b142      	cbz	r2, 80049bc <xTaskIncrementTick+0x30>
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	e7fe      	b.n	80049ba <xTaskIncrementTick+0x2e>
 80049bc:	4a34      	ldr	r2, [pc, #208]	; (8004a90 <xTaskIncrementTick+0x104>)
 80049be:	6819      	ldr	r1, [r3, #0]
 80049c0:	6810      	ldr	r0, [r2, #0]
 80049c2:	6018      	str	r0, [r3, #0]
 80049c4:	6011      	str	r1, [r2, #0]
 80049c6:	4a33      	ldr	r2, [pc, #204]	; (8004a94 <xTaskIncrementTick+0x108>)
 80049c8:	6813      	ldr	r3, [r2, #0]
 80049ca:	3301      	adds	r3, #1
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	f7ff fe29 	bl	8004624 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049d2:	4d31      	ldr	r5, [pc, #196]	; (8004a98 <xTaskIncrementTick+0x10c>)
 80049d4:	4f31      	ldr	r7, [pc, #196]	; (8004a9c <xTaskIncrementTick+0x110>)
 80049d6:	682b      	ldr	r3, [r5, #0]
 80049d8:	429c      	cmp	r4, r3
 80049da:	f04f 0b00 	mov.w	fp, #0
 80049de:	d30a      	bcc.n	80049f6 <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049e0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8004a8c <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80049e4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8004aac <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049e8:	f8da 2000 	ldr.w	r2, [sl]
 80049ec:	6812      	ldr	r2, [r2, #0]
 80049ee:	b9a2      	cbnz	r2, 8004a1a <xTaskIncrementTick+0x8e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049f0:	f04f 32ff 	mov.w	r2, #4294967295
 80049f4:	602a      	str	r2, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	4b29      	ldr	r3, [pc, #164]	; (8004aa0 <xTaskIncrementTick+0x114>)
 80049fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049fc:	2214      	movs	r2, #20
 80049fe:	434a      	muls	r2, r1
 8004a00:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8004a02:	2a02      	cmp	r2, #2
 8004a04:	bf28      	it	cs
 8004a06:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8004a0a:	4a26      	ldr	r2, [pc, #152]	; (8004aa4 <xTaskIncrementTick+0x118>)
 8004a0c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8004a0e:	2a00      	cmp	r2, #0
}
 8004a10:	bf0c      	ite	eq
 8004a12:	4658      	moveq	r0, fp
 8004a14:	2001      	movne	r0, #1
 8004a16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a1a:	f8da 2000 	ldr.w	r2, [sl]
 8004a1e:	68d2      	ldr	r2, [r2, #12]
 8004a20:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a22:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8004a24:	428c      	cmp	r4, r1
 8004a26:	d201      	bcs.n	8004a2c <xTaskIncrementTick+0xa0>
						xNextTaskUnblockTime = xItemValue;
 8004a28:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a2a:	e7e4      	b.n	80049f6 <xTaskIncrementTick+0x6a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a2c:	f106 0804 	add.w	r8, r6, #4
 8004a30:	4640      	mov	r0, r8
 8004a32:	f7fe ff6f 	bl	8003914 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a36:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8004a38:	b119      	cbz	r1, 8004a42 <xTaskIncrementTick+0xb6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a3a:	f106 0018 	add.w	r0, r6, #24
 8004a3e:	f7fe ff69 	bl	8003914 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a42:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004a44:	f8d9 3000 	ldr.w	r3, [r9]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	fa02 f100 	lsl.w	r1, r2, r0
 8004a4e:	4319      	orrs	r1, r3
 8004a50:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <xTaskIncrementTick+0x114>)
 8004a52:	f8c9 1000 	str.w	r1, [r9]
 8004a56:	f04f 0e14 	mov.w	lr, #20
 8004a5a:	4641      	mov	r1, r8
 8004a5c:	fb0e 3000 	mla	r0, lr, r0, r3
 8004a60:	f7fe ff35 	bl	80038ce <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a64:	6838      	ldr	r0, [r7, #0]
 8004a66:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8004a68:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004a6a:	4291      	cmp	r1, r2
 8004a6c:	bf28      	it	cs
 8004a6e:	f04f 0b01 	movcs.w	fp, #1
 8004a72:	e7b9      	b.n	80049e8 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8004a74:	4a0c      	ldr	r2, [pc, #48]	; (8004aa8 <xTaskIncrementTick+0x11c>)
 8004a76:	6813      	ldr	r3, [r2, #0]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004a7c:	f04f 0b00 	mov.w	fp, #0
 8004a80:	e7c3      	b.n	8004a0a <xTaskIncrementTick+0x7e>
 8004a82:	bf00      	nop
 8004a84:	20004d0c 	.word	0x20004d0c
 8004a88:	20004d8c 	.word	0x20004d8c
 8004a8c:	20004c6c 	.word	0x20004c6c
 8004a90:	20004c70 	.word	0x20004c70
 8004a94:	20004d48 	.word	0x20004d48
 8004a98:	20004d44 	.word	0x20004d44
 8004a9c:	20004c68 	.word	0x20004c68
 8004aa0:	20004c74 	.word	0x20004c74
 8004aa4:	20004d90 	.word	0x20004d90
 8004aa8:	20004d08 	.word	0x20004d08
 8004aac:	20004d14 	.word	0x20004d14

08004ab0 <xTaskResumeAll>:
{
 8004ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8004ab4:	4c31      	ldr	r4, [pc, #196]	; (8004b7c <xTaskResumeAll+0xcc>)
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	b943      	cbnz	r3, 8004acc <xTaskResumeAll+0x1c>
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	e7fe      	b.n	8004aca <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8004acc:	f7fe ff9a 	bl	8003a04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ad6:	6824      	ldr	r4, [r4, #0]
 8004ad8:	b12c      	cbz	r4, 8004ae6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8004ada:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004adc:	f7fe ffb4 	bl	8003a48 <vPortExitCritical>
}
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ae6:	4b26      	ldr	r3, [pc, #152]	; (8004b80 <xTaskResumeAll+0xd0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f5      	beq.n	8004ada <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004aee:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8004b98 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8004af2:	4f24      	ldr	r7, [pc, #144]	; (8004b84 <xTaskResumeAll+0xd4>)
 8004af4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8004b9c <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004af8:	f8d9 3000 	ldr.w	r3, [r9]
 8004afc:	b9e3      	cbnz	r3, 8004b38 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8004afe:	b10c      	cbz	r4, 8004b04 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8004b00:	f7ff fd90 	bl	8004624 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b04:	4d20      	ldr	r5, [pc, #128]	; (8004b88 <xTaskResumeAll+0xd8>)
 8004b06:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b08:	b144      	cbz	r4, 8004b1c <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8004b0a:	4e20      	ldr	r6, [pc, #128]	; (8004b8c <xTaskResumeAll+0xdc>)
 8004b0c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004b0e:	f7ff ff3d 	bl	800498c <xTaskIncrementTick>
 8004b12:	b100      	cbz	r0, 8004b16 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8004b14:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b16:	3c01      	subs	r4, #1
 8004b18:	d1f9      	bne.n	8004b0e <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8004b1a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004b1c:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <xTaskResumeAll+0xdc>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0da      	beq.n	8004ada <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8004b24:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <xTaskResumeAll+0xe0>)
 8004b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004b34:	2401      	movs	r4, #1
 8004b36:	e7d1      	b.n	8004adc <xTaskResumeAll+0x2c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b38:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004b3c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b3e:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b40:	f104 0018 	add.w	r0, r4, #24
 8004b44:	f7fe fee6 	bl	8003914 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b48:	4630      	mov	r0, r6
 8004b4a:	f7fe fee3 	bl	8003914 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b4e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004b50:	6839      	ldr	r1, [r7, #0]
 8004b52:	2501      	movs	r5, #1
 8004b54:	fa05 f302 	lsl.w	r3, r5, r2
 8004b58:	2014      	movs	r0, #20
 8004b5a:	430b      	orrs	r3, r1
 8004b5c:	fb00 8002 	mla	r0, r0, r2, r8
 8004b60:	4631      	mov	r1, r6
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	f7fe feb3 	bl	80038ce <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <xTaskResumeAll+0xe4>)
 8004b6a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8004b72:	bf24      	itt	cs
 8004b74:	4b05      	ldrcs	r3, [pc, #20]	; (8004b8c <xTaskResumeAll+0xdc>)
 8004b76:	601d      	strcs	r5, [r3, #0]
 8004b78:	e7be      	b.n	8004af8 <xTaskResumeAll+0x48>
 8004b7a:	bf00      	nop
 8004b7c:	20004d0c 	.word	0x20004d0c
 8004b80:	20004d00 	.word	0x20004d00
 8004b84:	20004d14 	.word	0x20004d14
 8004b88:	20004d08 	.word	0x20004d08
 8004b8c:	20004d90 	.word	0x20004d90
 8004b90:	e000ed04 	.word	0xe000ed04
 8004b94:	20004c68 	.word	0x20004c68
 8004b98:	20004d4c 	.word	0x20004d4c
 8004b9c:	20004c74 	.word	0x20004c74

08004ba0 <vTaskDelay>:
	{
 8004ba0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ba2:	b940      	cbnz	r0, 8004bb6 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8004ba4:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <vTaskDelay+0x40>)
 8004ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004bb6:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <vTaskDelay+0x44>)
 8004bb8:	6819      	ldr	r1, [r3, #0]
 8004bba:	b141      	cbz	r1, 8004bce <vTaskDelay+0x2e>
 8004bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	e7fe      	b.n	8004bcc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004bce:	f7ff fecf 	bl	8004970 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004bd2:	f7ff fd39 	bl	8004648 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004bd6:	f7ff ff6b 	bl	8004ab0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004bda:	2800      	cmp	r0, #0
 8004bdc:	d0e2      	beq.n	8004ba4 <vTaskDelay+0x4>
 8004bde:	bd08      	pop	{r3, pc}
 8004be0:	e000ed04 	.word	0xe000ed04
 8004be4:	20004d0c 	.word	0x20004d0c

08004be8 <vTaskSwitchContext>:
{
 8004be8:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bea:	4b23      	ldr	r3, [pc, #140]	; (8004c78 <vTaskSwitchContext+0x90>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	4b23      	ldr	r3, [pc, #140]	; (8004c7c <vTaskSwitchContext+0x94>)
 8004bf0:	b112      	cbz	r2, 8004bf8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8004bf8:	4c21      	ldr	r4, [pc, #132]	; (8004c80 <vTaskSwitchContext+0x98>)
		xYieldPending = pdFALSE;
 8004bfa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8004c06:	d10b      	bne.n	8004c20 <vTaskSwitchContext+0x38>
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8004c0e:	d107      	bne.n	8004c20 <vTaskSwitchContext+0x38>
 8004c10:	689a      	ldr	r2, [r3, #8]
 8004c12:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8004c16:	d103      	bne.n	8004c20 <vTaskSwitchContext+0x38>
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8004c1e:	d004      	beq.n	8004c2a <vTaskSwitchContext+0x42>
 8004c20:	6820      	ldr	r0, [r4, #0]
 8004c22:	6821      	ldr	r1, [r4, #0]
 8004c24:	3134      	adds	r1, #52	; 0x34
 8004c26:	f003 fcad 	bl	8008584 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c2a:	4b16      	ldr	r3, [pc, #88]	; (8004c84 <vTaskSwitchContext+0x9c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004c2e:	fab3 f383 	clz	r3, r3
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	f1c3 031f 	rsb	r3, r3, #31
 8004c38:	2214      	movs	r2, #20
 8004c3a:	4913      	ldr	r1, [pc, #76]	; (8004c88 <vTaskSwitchContext+0xa0>)
 8004c3c:	435a      	muls	r2, r3
 8004c3e:	1888      	adds	r0, r1, r2
 8004c40:	588d      	ldr	r5, [r1, r2]
 8004c42:	b945      	cbnz	r5, 8004c56 <vTaskSwitchContext+0x6e>
	__asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	e7fe      	b.n	8004c54 <vTaskSwitchContext+0x6c>
 8004c56:	6845      	ldr	r5, [r0, #4]
 8004c58:	3208      	adds	r2, #8
 8004c5a:	686d      	ldr	r5, [r5, #4]
 8004c5c:	6045      	str	r5, [r0, #4]
 8004c5e:	440a      	add	r2, r1
 8004c60:	4295      	cmp	r5, r2
 8004c62:	bf04      	itt	eq
 8004c64:	686a      	ldreq	r2, [r5, #4]
 8004c66:	6042      	streq	r2, [r0, #4]
 8004c68:	2214      	movs	r2, #20
 8004c6a:	fb02 1303 	mla	r3, r2, r3, r1
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	6023      	str	r3, [r4, #0]
 8004c74:	bd38      	pop	{r3, r4, r5, pc}
 8004c76:	bf00      	nop
 8004c78:	20004d0c 	.word	0x20004d0c
 8004c7c:	20004d90 	.word	0x20004d90
 8004c80:	20004c68 	.word	0x20004c68
 8004c84:	20004d14 	.word	0x20004d14
 8004c88:	20004c74 	.word	0x20004c74

08004c8c <vTaskPlaceOnEventList>:
{
 8004c8c:	b510      	push	{r4, lr}
 8004c8e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8004c90:	b940      	cbnz	r0, 8004ca4 <vTaskPlaceOnEventList+0x18>
 8004c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	e7fe      	b.n	8004ca2 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ca4:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <vTaskPlaceOnEventList+0x30>)
 8004ca6:	6819      	ldr	r1, [r3, #0]
 8004ca8:	3118      	adds	r1, #24
 8004caa:	f7fe fe1c 	bl	80038e6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004cae:	4620      	mov	r0, r4
 8004cb0:	2101      	movs	r1, #1
}
 8004cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004cb6:	f7ff bcc7 	b.w	8004648 <prvAddCurrentTaskToDelayedList>
 8004cba:	bf00      	nop
 8004cbc:	20004c68 	.word	0x20004c68

08004cc0 <xTaskRemoveFromEventList>:
{
 8004cc0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cc2:	68c3      	ldr	r3, [r0, #12]
 8004cc4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004cc6:	b944      	cbnz	r4, 8004cda <xTaskRemoveFromEventList+0x1a>
 8004cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	e7fe      	b.n	8004cd8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004cda:	f104 0518 	add.w	r5, r4, #24
 8004cde:	4628      	mov	r0, r5
 8004ce0:	f7fe fe18 	bl	8003914 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ce4:	4b11      	ldr	r3, [pc, #68]	; (8004d2c <xTaskRemoveFromEventList+0x6c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	b9e3      	cbnz	r3, 8004d24 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004cea:	1d25      	adds	r5, r4, #4
 8004cec:	4628      	mov	r0, r5
 8004cee:	f7fe fe11 	bl	8003914 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004cf2:	490f      	ldr	r1, [pc, #60]	; (8004d30 <xTaskRemoveFromEventList+0x70>)
 8004cf4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004cf6:	6808      	ldr	r0, [r1, #0]
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	4093      	lsls	r3, r2
 8004cfc:	4303      	orrs	r3, r0
 8004cfe:	600b      	str	r3, [r1, #0]
 8004d00:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <xTaskRemoveFromEventList+0x74>)
 8004d02:	2014      	movs	r0, #20
 8004d04:	4629      	mov	r1, r5
 8004d06:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d0a:	f7fe fde0 	bl	80038ce <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d0e:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <xTaskRemoveFromEventList+0x78>)
 8004d10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8004d18:	bf83      	ittte	hi
 8004d1a:	4b08      	ldrhi	r3, [pc, #32]	; (8004d3c <xTaskRemoveFromEventList+0x7c>)
 8004d1c:	2001      	movhi	r0, #1
 8004d1e:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8004d20:	2000      	movls	r0, #0
}
 8004d22:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d24:	4629      	mov	r1, r5
 8004d26:	4806      	ldr	r0, [pc, #24]	; (8004d40 <xTaskRemoveFromEventList+0x80>)
 8004d28:	e7ef      	b.n	8004d0a <xTaskRemoveFromEventList+0x4a>
 8004d2a:	bf00      	nop
 8004d2c:	20004d0c 	.word	0x20004d0c
 8004d30:	20004d14 	.word	0x20004d14
 8004d34:	20004c74 	.word	0x20004c74
 8004d38:	20004c68 	.word	0x20004c68
 8004d3c:	20004d90 	.word	0x20004d90
 8004d40:	20004d4c 	.word	0x20004d4c

08004d44 <vTaskRemoveFromUnorderedEventList>:
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8004d44:	4a1c      	ldr	r2, [pc, #112]	; (8004db8 <vTaskRemoveFromUnorderedEventList+0x74>)
 8004d46:	6812      	ldr	r2, [r2, #0]
{
 8004d48:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8004d4a:	b942      	cbnz	r2, 8004d5e <vTaskRemoveFromUnorderedEventList+0x1a>
 8004d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d50:	f383 8811 	msr	BASEPRI, r3
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	e7fe      	b.n	8004d5c <vTaskRemoveFromUnorderedEventList+0x18>
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d5e:	68c4      	ldr	r4, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004d60:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004d64:	6001      	str	r1, [r0, #0]
	configASSERT( pxUnblockedTCB );
 8004d66:	b944      	cbnz	r4, 8004d7a <vTaskRemoveFromUnorderedEventList+0x36>
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	e7fe      	b.n	8004d78 <vTaskRemoveFromUnorderedEventList+0x34>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d7a:	1d26      	adds	r6, r4, #4
	( void ) uxListRemove( pxEventListItem );
 8004d7c:	f7fe fdca 	bl	8003914 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d80:	4630      	mov	r0, r6
 8004d82:	f7fe fdc7 	bl	8003914 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8004d86:	490d      	ldr	r1, [pc, #52]	; (8004dbc <vTaskRemoveFromUnorderedEventList+0x78>)
 8004d88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004d8a:	6808      	ldr	r0, [r1, #0]
 8004d8c:	2501      	movs	r5, #1
 8004d8e:	fa05 f302 	lsl.w	r3, r5, r2
 8004d92:	4303      	orrs	r3, r0
 8004d94:	600b      	str	r3, [r1, #0]
 8004d96:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <vTaskRemoveFromUnorderedEventList+0x7c>)
 8004d98:	2014      	movs	r0, #20
 8004d9a:	fb00 3002 	mla	r0, r0, r2, r3
 8004d9e:	4631      	mov	r1, r6
 8004da0:	f7fe fd95 	bl	80038ce <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004da4:	4b07      	ldr	r3, [pc, #28]	; (8004dc4 <vTaskRemoveFromUnorderedEventList+0x80>)
 8004da6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8004dae:	bf84      	itt	hi
 8004db0:	4b05      	ldrhi	r3, [pc, #20]	; (8004dc8 <vTaskRemoveFromUnorderedEventList+0x84>)
 8004db2:	601d      	strhi	r5, [r3, #0]
 8004db4:	bd70      	pop	{r4, r5, r6, pc}
 8004db6:	bf00      	nop
 8004db8:	20004d0c 	.word	0x20004d0c
 8004dbc:	20004d14 	.word	0x20004d14
 8004dc0:	20004c74 	.word	0x20004c74
 8004dc4:	20004c68 	.word	0x20004c68
 8004dc8:	20004d90 	.word	0x20004d90

08004dcc <vTaskSetTimeOutState>:
{
 8004dcc:	b510      	push	{r4, lr}
	configASSERT( pxTimeOut );
 8004dce:	4604      	mov	r4, r0
 8004dd0:	b940      	cbnz	r0, 8004de4 <vTaskSetTimeOutState+0x18>
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	e7fe      	b.n	8004de2 <vTaskSetTimeOutState+0x16>
	taskENTER_CRITICAL();
 8004de4:	f7fe fe0e 	bl	8003a04 <vPortEnterCritical>
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004de8:	4b04      	ldr	r3, [pc, #16]	; (8004dfc <vTaskSetTimeOutState+0x30>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6023      	str	r3, [r4, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8004dee:	4b04      	ldr	r3, [pc, #16]	; (8004e00 <vTaskSetTimeOutState+0x34>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6063      	str	r3, [r4, #4]
}
 8004df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	taskEXIT_CRITICAL();
 8004df8:	f7fe be26 	b.w	8003a48 <vPortExitCritical>
 8004dfc:	20004d48 	.word	0x20004d48
 8004e00:	20004d8c 	.word	0x20004d8c

08004e04 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e04:	4b03      	ldr	r3, [pc, #12]	; (8004e14 <vTaskInternalSetTimeOutState+0x10>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e0a:	4b03      	ldr	r3, [pc, #12]	; (8004e18 <vTaskInternalSetTimeOutState+0x14>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6043      	str	r3, [r0, #4]
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20004d48 	.word	0x20004d48
 8004e18:	20004d8c 	.word	0x20004d8c

08004e1c <xTaskCheckForTimeOut>:
{
 8004e1c:	b570      	push	{r4, r5, r6, lr}
 8004e1e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8004e20:	4605      	mov	r5, r0
 8004e22:	b940      	cbnz	r0, 8004e36 <xTaskCheckForTimeOut+0x1a>
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	e7fe      	b.n	8004e34 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8004e36:	b941      	cbnz	r1, 8004e4a <xTaskCheckForTimeOut+0x2e>
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	e7fe      	b.n	8004e48 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8004e4a:	f7fe fddb 	bl	8003a04 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8004e4e:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e50:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8004e52:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	1c58      	adds	r0, r3, #1
 8004e58:	d00e      	beq.n	8004e78 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e5a:	480d      	ldr	r0, [pc, #52]	; (8004e90 <xTaskCheckForTimeOut+0x74>)
 8004e5c:	682e      	ldr	r6, [r5, #0]
 8004e5e:	6800      	ldr	r0, [r0, #0]
 8004e60:	4286      	cmp	r6, r0
 8004e62:	d001      	beq.n	8004e68 <xTaskCheckForTimeOut+0x4c>
 8004e64:	428a      	cmp	r2, r1
 8004e66:	d20e      	bcs.n	8004e86 <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e68:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d209      	bcs.n	8004e82 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8004e6e:	1a9b      	subs	r3, r3, r2
 8004e70:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e72:	4628      	mov	r0, r5
 8004e74:	f7ff ffc6 	bl	8004e04 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8004e78:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004e7a:	f7fe fde5 	bl	8003a48 <vPortExitCritical>
}
 8004e7e:	4620      	mov	r0, r4
 8004e80:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8004e82:	2300      	movs	r3, #0
 8004e84:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8004e86:	2401      	movs	r4, #1
 8004e88:	e7f7      	b.n	8004e7a <xTaskCheckForTimeOut+0x5e>
 8004e8a:	bf00      	nop
 8004e8c:	20004d8c 	.word	0x20004d8c
 8004e90:	20004d48 	.word	0x20004d48

08004e94 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004e94:	4b01      	ldr	r3, [pc, #4]	; (8004e9c <vTaskMissedYield+0x8>)
 8004e96:	2201      	movs	r2, #1
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	4770      	bx	lr
 8004e9c:	20004d90 	.word	0x20004d90

08004ea0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8004ea0:	4b01      	ldr	r3, [pc, #4]	; (8004ea8 <xTaskGetCurrentTaskHandle+0x8>)
 8004ea2:	6818      	ldr	r0, [r3, #0]
	}
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	20004c68 	.word	0x20004c68

08004eac <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <xTaskGetSchedulerState+0x18>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	b133      	cbz	r3, 8004ec0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eb2:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <xTaskGetSchedulerState+0x1c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004eb8:	bf0c      	ite	eq
 8004eba:	2002      	moveq	r0, #2
 8004ebc:	2000      	movne	r0, #0
 8004ebe:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ec0:	2001      	movs	r0, #1
	}
 8004ec2:	4770      	bx	lr
 8004ec4:	20004d60 	.word	0x20004d60
 8004ec8:	20004d0c 	.word	0x20004d0c

08004ecc <xTaskPriorityInherit>:
	{
 8004ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	d035      	beq.n	8004f42 <xTaskPriorityInherit+0x76>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004ed6:	4a24      	ldr	r2, [pc, #144]	; (8004f68 <xTaskPriorityInherit+0x9c>)
 8004ed8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004eda:	6811      	ldr	r1, [r2, #0]
 8004edc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004ede:	428b      	cmp	r3, r1
 8004ee0:	4617      	mov	r7, r2
 8004ee2:	d237      	bcs.n	8004f54 <xTaskPriorityInherit+0x88>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ee4:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004ee6:	4d21      	ldr	r5, [pc, #132]	; (8004f6c <xTaskPriorityInherit+0xa0>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ee8:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eea:	bfa1      	itttt	ge
 8004eec:	683a      	ldrge	r2, [r7, #0]
 8004eee:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8004ef0:	f1c2 0207 	rsbge	r2, r2, #7
 8004ef4:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004ef6:	2614      	movs	r6, #20
 8004ef8:	6942      	ldr	r2, [r0, #20]
 8004efa:	fb06 5303 	mla	r3, r6, r3, r5
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d122      	bne.n	8004f48 <xTaskPriorityInherit+0x7c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f02:	f100 0804 	add.w	r8, r0, #4
 8004f06:	4640      	mov	r0, r8
 8004f08:	f7fe fd04 	bl	8003914 <uxListRemove>
 8004f0c:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <xTaskPriorityInherit+0xa4>)
 8004f0e:	b948      	cbnz	r0, 8004f24 <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004f10:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004f12:	4346      	muls	r6, r0
 8004f14:	59aa      	ldr	r2, [r5, r6]
 8004f16:	b92a      	cbnz	r2, 8004f24 <xTaskPriorityInherit+0x58>
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	4081      	lsls	r1, r0
 8004f1e:	ea22 0201 	bic.w	r2, r2, r1
 8004f22:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f24:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004f26:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f2a:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004f2c:	2401      	movs	r4, #1
 8004f2e:	fa04 f002 	lsl.w	r0, r4, r2
 8004f32:	4308      	orrs	r0, r1
 8004f34:	6018      	str	r0, [r3, #0]
 8004f36:	2014      	movs	r0, #20
 8004f38:	4641      	mov	r1, r8
 8004f3a:	fb00 5002 	mla	r0, r0, r2, r5
 8004f3e:	f7fe fcc6 	bl	80038ce <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 8004f42:	4620      	mov	r0, r4
	}
 8004f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4c:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 8004f4e:	2001      	movs	r0, #1
 8004f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004f54:	6813      	ldr	r3, [r2, #0]
 8004f56:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8004f58:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004f5a:	42a0      	cmp	r0, r4
 8004f5c:	bf2c      	ite	cs
 8004f5e:	2000      	movcs	r0, #0
 8004f60:	2001      	movcc	r0, #1
 8004f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f66:	bf00      	nop
 8004f68:	20004c68 	.word	0x20004c68
 8004f6c:	20004c74 	.word	0x20004c74
 8004f70:	20004d14 	.word	0x20004d14

08004f74 <xTaskPriorityDisinherit>:
	{
 8004f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8004f76:	4604      	mov	r4, r0
 8004f78:	b908      	cbnz	r0, 8004f7e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8004f7e:	4b22      	ldr	r3, [pc, #136]	; (8005008 <xTaskPriorityDisinherit+0x94>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4298      	cmp	r0, r3
 8004f84:	d008      	beq.n	8004f98 <xTaskPriorityDisinherit+0x24>
 8004f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	e7fe      	b.n	8004f96 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f98:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004f9a:	b943      	cbnz	r3, 8004fae <xTaskPriorityDisinherit+0x3a>
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	e7fe      	b.n	8004fac <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fae:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004fb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8004fb2:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fb4:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8004fb6:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fb8:	d0df      	beq.n	8004f7a <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1dd      	bne.n	8004f7a <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fbe:	1d05      	adds	r5, r0, #4
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	f7fe fca7 	bl	8003914 <uxListRemove>
 8004fc6:	4e11      	ldr	r6, [pc, #68]	; (800500c <xTaskPriorityDisinherit+0x98>)
 8004fc8:	4a11      	ldr	r2, [pc, #68]	; (8005010 <xTaskPriorityDisinherit+0x9c>)
 8004fca:	b950      	cbnz	r0, 8004fe2 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004fcc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004fce:	2114      	movs	r1, #20
 8004fd0:	4379      	muls	r1, r7
 8004fd2:	5873      	ldr	r3, [r6, r1]
 8004fd4:	b92b      	cbnz	r3, 8004fe2 <xTaskPriorityDisinherit+0x6e>
 8004fd6:	6813      	ldr	r3, [r2, #0]
 8004fd8:	2001      	movs	r0, #1
 8004fda:	40b8      	lsls	r0, r7
 8004fdc:	ea23 0300 	bic.w	r3, r3, r0
 8004fe0:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fe2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004fe4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fe6:	f1c3 0107 	rsb	r1, r3, #7
 8004fea:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004fec:	6811      	ldr	r1, [r2, #0]
 8004fee:	2401      	movs	r4, #1
 8004ff0:	fa04 f003 	lsl.w	r0, r4, r3
 8004ff4:	4308      	orrs	r0, r1
 8004ff6:	6010      	str	r0, [r2, #0]
 8004ff8:	2014      	movs	r0, #20
 8004ffa:	fb00 6003 	mla	r0, r0, r3, r6
 8004ffe:	4629      	mov	r1, r5
 8005000:	f7fe fc65 	bl	80038ce <vListInsertEnd>
					xReturn = pdTRUE;
 8005004:	4620      	mov	r0, r4
	}
 8005006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005008:	20004c68 	.word	0x20004c68
 800500c:	20004c74 	.word	0x20004c74
 8005010:	20004d14 	.word	0x20004d14

08005014 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8005014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8005016:	4604      	mov	r4, r0
 8005018:	2800      	cmp	r0, #0
 800501a:	d04d      	beq.n	80050b8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
			configASSERT( pxTCB->uxMutexesHeld );
 800501c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800501e:	b942      	cbnz	r2, 8005032 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	e7fe      	b.n	8005030 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 8005032:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005034:	4299      	cmp	r1, r3
 8005036:	bf38      	it	cc
 8005038:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800503a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800503c:	428b      	cmp	r3, r1
 800503e:	d03b      	beq.n	80050b8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005040:	2a01      	cmp	r2, #1
 8005042:	d139      	bne.n	80050b8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					configASSERT( pxTCB != pxCurrentTCB );
 8005044:	4a1d      	ldr	r2, [pc, #116]	; (80050bc <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8005046:	6812      	ldr	r2, [r2, #0]
 8005048:	4290      	cmp	r0, r2
 800504a:	d108      	bne.n	800505e <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800504c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	e7fe      	b.n	800505c <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800505e:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005060:	4d17      	ldr	r5, [pc, #92]	; (80050c0 <vTaskPriorityDisinheritAfterTimeout+0xac>)
					pxTCB->uxPriority = uxPriorityToUse;
 8005062:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005064:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005066:	f04f 0614 	mov.w	r6, #20
 800506a:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800506c:	bfa8      	it	ge
 800506e:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005072:	fb06 5303 	mla	r3, r6, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005076:	bfa8      	it	ge
 8005078:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800507a:	429a      	cmp	r2, r3
 800507c:	d11c      	bne.n	80050b8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800507e:	1d07      	adds	r7, r0, #4
 8005080:	4638      	mov	r0, r7
 8005082:	f7fe fc47 	bl	8003914 <uxListRemove>
 8005086:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005088:	4c0e      	ldr	r4, [pc, #56]	; (80050c4 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 800508a:	b940      	cbnz	r0, 800509e <vTaskPriorityDisinheritAfterTimeout+0x8a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800508c:	4356      	muls	r6, r2
 800508e:	59ab      	ldr	r3, [r5, r6]
 8005090:	b92b      	cbnz	r3, 800509e <vTaskPriorityDisinheritAfterTimeout+0x8a>
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	2101      	movs	r1, #1
 8005096:	4091      	lsls	r1, r2
 8005098:	ea23 0301 	bic.w	r3, r3, r1
 800509c:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 800509e:	6821      	ldr	r1, [r4, #0]
 80050a0:	2301      	movs	r3, #1
 80050a2:	4093      	lsls	r3, r2
 80050a4:	430b      	orrs	r3, r1
 80050a6:	2014      	movs	r0, #20
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	4639      	mov	r1, r7
 80050ac:	fb00 5002 	mla	r0, r0, r2, r5
	}
 80050b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 80050b4:	f7fe bc0b 	b.w	80038ce <vListInsertEnd>
 80050b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20004c68 	.word	0x20004c68
 80050c0:	20004c74 	.word	0x20004c74
 80050c4:	20004d14 	.word	0x20004d14

080050c8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80050c8:	4b04      	ldr	r3, [pc, #16]	; (80050dc <pvTaskIncrementMutexHeldCount+0x14>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	b11a      	cbz	r2, 80050d6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80050ce:	6819      	ldr	r1, [r3, #0]
 80050d0:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80050d2:	3201      	adds	r2, #1
 80050d4:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80050d6:	6818      	ldr	r0, [r3, #0]
	}
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	20004c68 	.word	0x20004c68

080050e0 <ulTaskNotifyTake>:
	{
 80050e0:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80050e2:	4c16      	ldr	r4, [pc, #88]	; (800513c <ulTaskNotifyTake+0x5c>)
	{
 80050e4:	4606      	mov	r6, r0
 80050e6:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 80050e8:	f7fe fc8c 	bl	8003a04 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f0:	b97b      	cbnz	r3, 8005112 <ulTaskNotifyTake+0x32>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	2101      	movs	r1, #1
 80050f6:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
				if( xTicksToWait > ( TickType_t ) 0 )
 80050fa:	b155      	cbz	r5, 8005112 <ulTaskNotifyTake+0x32>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050fc:	4628      	mov	r0, r5
 80050fe:	f7ff faa3 	bl	8004648 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8005102:	4b0f      	ldr	r3, [pc, #60]	; (8005140 <ulTaskNotifyTake+0x60>)
 8005104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 8005112:	f7fe fc99 	bl	8003a48 <vPortExitCritical>
		taskENTER_CRITICAL();
 8005116:	f7fe fc75 	bl	8003a04 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
			if( ulReturn != 0UL )
 800511e:	b11d      	cbz	r5, 8005128 <ulTaskNotifyTake+0x48>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8005120:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 8005122:	b14e      	cbz	r6, 8005138 <ulTaskNotifyTake+0x58>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8005124:	2200      	movs	r2, #0
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8005126:	64da      	str	r2, [r3, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		taskEXIT_CRITICAL();
 8005130:	f7fe fc8a 	bl	8003a48 <vPortExitCritical>
	}
 8005134:	4628      	mov	r0, r5
 8005136:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8005138:	1e6a      	subs	r2, r5, #1
 800513a:	e7f4      	b.n	8005126 <ulTaskNotifyTake+0x46>
 800513c:	20004c68 	.word	0x20004c68
 8005140:	e000ed04 	.word	0xe000ed04

08005144 <vTaskNotifyGiveFromISR>:
	{
 8005144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005148:	460e      	mov	r6, r1
		configASSERT( xTaskToNotify );
 800514a:	4604      	mov	r4, r0
 800514c:	b940      	cbnz	r0, 8005160 <vTaskNotifyGiveFromISR+0x1c>
 800514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	e7fe      	b.n	800515e <vTaskNotifyGiveFromISR+0x1a>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005160:	f7fe fd6e 	bl	8003c40 <vPortValidateInterruptPriority>
	__asm volatile
 8005164:	f3ef 8711 	mrs	r7, BASEPRI
 8005168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516c:	f383 8811 	msr	BASEPRI, r3
 8005170:	f3bf 8f6f 	isb	sy
 8005174:	f3bf 8f4f 	dsb	sy
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005178:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800517a:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800517e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			( pxTCB->ulNotifiedValue )++;
 8005182:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005184:	b2ed      	uxtb	r5, r5
			( pxTCB->ulNotifiedValue )++;
 8005186:	3301      	adds	r3, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005188:	2d01      	cmp	r5, #1
			( pxTCB->ulNotifiedValue )++;
 800518a:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800518c:	d12a      	bne.n	80051e4 <vTaskNotifyGiveFromISR+0xa0>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800518e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005190:	b143      	cbz	r3, 80051a4 <vTaskNotifyGiveFromISR+0x60>
	__asm volatile
 8005192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	e7fe      	b.n	80051a2 <vTaskNotifyGiveFromISR+0x5e>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051a4:	4b13      	ldr	r3, [pc, #76]	; (80051f4 <vTaskNotifyGiveFromISR+0xb0>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	bb03      	cbnz	r3, 80051ec <vTaskNotifyGiveFromISR+0xa8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051aa:	f104 0804 	add.w	r8, r4, #4
 80051ae:	4640      	mov	r0, r8
 80051b0:	f7fe fbb0 	bl	8003914 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051b4:	4a10      	ldr	r2, [pc, #64]	; (80051f8 <vTaskNotifyGiveFromISR+0xb4>)
 80051b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80051b8:	6811      	ldr	r1, [r2, #0]
 80051ba:	409d      	lsls	r5, r3
 80051bc:	430d      	orrs	r5, r1
 80051be:	6015      	str	r5, [r2, #0]
 80051c0:	4a0e      	ldr	r2, [pc, #56]	; (80051fc <vTaskNotifyGiveFromISR+0xb8>)
 80051c2:	2014      	movs	r0, #20
 80051c4:	4641      	mov	r1, r8
 80051c6:	fb00 2003 	mla	r0, r0, r3, r2
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80051ca:	f7fe fb80 	bl	80038ce <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051ce:	4b0c      	ldr	r3, [pc, #48]	; (8005200 <vTaskNotifyGiveFromISR+0xbc>)
 80051d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d904      	bls.n	80051e4 <vTaskNotifyGiveFromISR+0xa0>
 80051da:	2301      	movs	r3, #1
					if( pxHigherPriorityTaskWoken != NULL )
 80051dc:	b106      	cbz	r6, 80051e0 <vTaskNotifyGiveFromISR+0x9c>
						*pxHigherPriorityTaskWoken = pdTRUE;
 80051de:	6033      	str	r3, [r6, #0]
					xYieldPending = pdTRUE;
 80051e0:	4a08      	ldr	r2, [pc, #32]	; (8005204 <vTaskNotifyGiveFromISR+0xc0>)
 80051e2:	6013      	str	r3, [r2, #0]
	__asm volatile
 80051e4:	f387 8811 	msr	BASEPRI, r7
 80051e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80051ec:	f104 0118 	add.w	r1, r4, #24
 80051f0:	4805      	ldr	r0, [pc, #20]	; (8005208 <vTaskNotifyGiveFromISR+0xc4>)
 80051f2:	e7ea      	b.n	80051ca <vTaskNotifyGiveFromISR+0x86>
 80051f4:	20004d0c 	.word	0x20004d0c
 80051f8:	20004d14 	.word	0x20004d14
 80051fc:	20004c74 	.word	0x20004c74
 8005200:	20004c68 	.word	0x20004c68
 8005204:	20004d90 	.word	0x20004d90
 8005208:	20004d4c 	.word	0x20004d4c

0800520c <vARPRefreshCacheEntry>:

#endif	/* ipconfigUSE_ARP_REMOVE_ENTRY != 0 */
/*-----------------------------------------------------------*/

void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress, const uint32_t ulIPAddress )
{
 800520c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	#if( ipconfigARP_STORES_REMOTE_ADDRESSES == 0 )
		/* Only process the IP address if it is on the local network.
		Unless: when '*ipLOCAL_IP_ADDRESS_POINTER' equals zero, the IP-address
		and netmask are still unknown. */
		if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 8005210:	4b39      	ldr	r3, [pc, #228]	; (80052f8 <vARPRefreshCacheEntry+0xec>)
 8005212:	4a3a      	ldr	r2, [pc, #232]	; (80052fc <vARPRefreshCacheEntry+0xf0>)
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	6852      	ldr	r2, [r2, #4]
{
 8005218:	468a      	mov	sl, r1
		if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 800521a:	4059      	eors	r1, r3
 800521c:	4211      	tst	r1, r2
{
 800521e:	4606      	mov	r6, r0
		if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 8005220:	d001      	beq.n	8005226 <vARPRefreshCacheEntry+0x1a>
 8005222:	2b00      	cmp	r3, #0
 8005224:	d166      	bne.n	80052f4 <vARPRefreshCacheEntry+0xe8>
{
 8005226:	f04f 0800 	mov.w	r8, #0
 800522a:	f04f 37ff 	mov.w	r7, #4294967295
 800522e:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8005304 <vARPRefreshCacheEntry+0xf8>
 8005232:	f04f 0bff 	mov.w	fp, #255	; 0xff
 8005236:	463d      	mov	r5, r7
 8005238:	4644      	mov	r4, r8
		/* For each entry in the ARP cache table. */
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
		{
			/* Does this line in the cache table hold an entry for the IP
			address	being queried? */
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 800523a:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800523e:	459a      	cmp	sl, r3
 8005240:	d111      	bne.n	8005266 <vARPRefreshCacheEntry+0x5a>
			{
				if( pxMACAddress == NULL )
 8005242:	2e00      	cmp	r6, #0
 8005244:	d04a      	beq.n	80052dc <vARPRefreshCacheEntry+0xd0>
					xIpEntry = x;
					break;
				}

				/* See if the MAC-address also matches. */
				if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8005246:	2206      	movs	r2, #6
 8005248:	4631      	mov	r1, r6
 800524a:	4648      	mov	r0, r9
 800524c:	f003 fb4a 	bl	80088e4 <memcmp>
 8005250:	b9f8      	cbnz	r0, 8005292 <vARPRefreshCacheEntry+0x86>
				{
					/* This function will be called for each received packet
					As this is by far the most common path the coding standard
					is relaxed in this case and a return is permitted as an
					optimisation. */
					xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8005252:	4a2b      	ldr	r2, [pc, #172]	; (8005300 <vARPRefreshCacheEntry+0xf4>)
 8005254:	230c      	movs	r3, #12
 8005256:	fb03 2404 	mla	r4, r3, r4, r2
 800525a:	2396      	movs	r3, #150	; 0x96
 800525c:	72a3      	strb	r3, [r4, #10]
					xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 800525e:	2301      	movs	r3, #1
 8005260:	72e3      	strb	r3, [r4, #11]
					return;
 8005262:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				for an ARP reply.  Still want to see if there is match with the
				given MAC address.ucBytes.  If found, either of the two entries
				must be cleared. */
				xIpEntry = x;
			}
			else if( ( pxMACAddress != NULL ) && ( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 ) )
 8005266:	b12e      	cbz	r6, 8005274 <vARPRefreshCacheEntry+0x68>
 8005268:	2206      	movs	r2, #6
 800526a:	4631      	mov	r1, r6
 800526c:	4648      	mov	r0, r9
 800526e:	f003 fb39 	bl	80088e4 <memcmp>
 8005272:	b180      	cbz	r0, 8005296 <vARPRefreshCacheEntry+0x8a>
				xMacEntry = x;
	#endif
			}
			/* _HT_
			Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
			else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 8005274:	f899 3006 	ldrb.w	r3, [r9, #6]
 8005278:	455b      	cmp	r3, fp
 800527a:	d30e      	bcc.n	800529a <vARPRefreshCacheEntry+0x8e>
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800527c:	3401      	adds	r4, #1
 800527e:	2c06      	cmp	r4, #6
 8005280:	f109 090c 	add.w	r9, r9, #12
 8005284:	d1d9      	bne.n	800523a <vARPRefreshCacheEntry+0x2e>
				ucMinAgeFound = xARPCache[ x ].ucAge;
				xUseEntry = x;
			}
		}

		if( xMacEntry >= 0 )
 8005286:	1c78      	adds	r0, r7, #1
 8005288:	d00a      	beq.n	80052a0 <vARPRefreshCacheEntry+0x94>
		{
			xUseEntry = xMacEntry;

			if( xIpEntry >= 0 )
 800528a:	1c69      	adds	r1, r5, #1
 800528c:	d129      	bne.n	80052e2 <vARPRefreshCacheEntry+0xd6>
 800528e:	46b8      	mov	r8, r7
 8005290:	e009      	b.n	80052a6 <vARPRefreshCacheEntry+0x9a>
 8005292:	4625      	mov	r5, r4
 8005294:	e7f2      	b.n	800527c <vARPRefreshCacheEntry+0x70>
 8005296:	4627      	mov	r7, r4
 8005298:	e7f0      	b.n	800527c <vARPRefreshCacheEntry+0x70>
 800529a:	469b      	mov	fp, r3
 800529c:	46a0      	mov	r8, r4
 800529e:	e7ed      	b.n	800527c <vARPRefreshCacheEntry+0x70>
				different locations: clear the entry which matches the
				IP-address */
				memset( &xARPCache[ xIpEntry ], '\0', sizeof( xARPCache[ xIpEntry ] ) );
			}
		}
		else if( xIpEntry >= 0 )
 80052a0:	1c6a      	adds	r2, r5, #1
 80052a2:	d000      	beq.n	80052a6 <vARPRefreshCacheEntry+0x9a>
				memset( &xARPCache[ xIpEntry ], '\0', sizeof( xARPCache[ xIpEntry ] ) );
 80052a4:	46a8      	mov	r8, r5
			/* An entry containing the IP-address was found, but it had a different MAC address */
			xUseEntry = xIpEntry;
		}

		/* If the entry was not found, we use the oldest entry and set the IPaddress */
		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 80052a6:	230c      	movs	r3, #12
 80052a8:	4915      	ldr	r1, [pc, #84]	; (8005300 <vARPRefreshCacheEntry+0xf4>)
 80052aa:	fb03 f308 	mul.w	r3, r3, r8
 80052ae:	18ca      	adds	r2, r1, r3
 80052b0:	f841 a003 	str.w	sl, [r1, r3]

		if( pxMACAddress != NULL )
 80052b4:	b15e      	cbz	r6, 80052ce <vARPRefreshCacheEntry+0xc2>
		{
			memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 80052b6:	3304      	adds	r3, #4
 80052b8:	6830      	ldr	r0, [r6, #0]
 80052ba:	50c8      	str	r0, [r1, r3]
 80052bc:	18cc      	adds	r4, r1, r3
 80052be:	88b3      	ldrh	r3, [r6, #4]
 80052c0:	80a3      	strh	r3, [r4, #4]

			iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, (*pxMACAddress) );
			/* And this entry does not need immediate attention */
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80052c2:	2396      	movs	r3, #150	; 0x96
 80052c4:	7293      	strb	r3, [r2, #10]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 80052c6:	2301      	movs	r3, #1
 80052c8:	72d3      	strb	r3, [r2, #11]
 80052ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else if( xIpEntry < 0 )
 80052ce:	3501      	adds	r5, #1
 80052d0:	d110      	bne.n	80052f4 <vARPRefreshCacheEntry+0xe8>
		{
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 80052d2:	2305      	movs	r3, #5
 80052d4:	7293      	strb	r3, [r2, #10]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 80052d6:	72d6      	strb	r6, [r2, #11]
 80052d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if( xMacEntry >= 0 )
 80052dc:	1c7b      	adds	r3, r7, #1
 80052de:	4625      	mov	r5, r4
 80052e0:	d0e0      	beq.n	80052a4 <vARPRefreshCacheEntry+0x98>
				memset( &xARPCache[ xIpEntry ], '\0', sizeof( xARPCache[ xIpEntry ] ) );
 80052e2:	4807      	ldr	r0, [pc, #28]	; (8005300 <vARPRefreshCacheEntry+0xf4>)
 80052e4:	230c      	movs	r3, #12
 80052e6:	436b      	muls	r3, r5
 80052e8:	18c1      	adds	r1, r0, r3
 80052ea:	2200      	movs	r2, #0
 80052ec:	50c2      	str	r2, [r0, r3]
 80052ee:	604a      	str	r2, [r1, #4]
 80052f0:	608a      	str	r2, [r1, #8]
 80052f2:	e7cc      	b.n	800528e <vARPRefreshCacheEntry+0x82>
 80052f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f8:	200001b4 	.word	0x200001b4
 80052fc:	20004e88 	.word	0x20004e88
 8005300:	20004d94 	.word	0x20004d94
 8005304:	20004d98 	.word	0x20004d98

08005308 <eARPProcessPacket>:
{
 8005308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 800530c:	4d23      	ldr	r5, [pc, #140]	; (800539c <eARPProcessPacket+0x94>)
{
 800530e:	4604      	mov	r4, r0
	if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 8005310:	6968      	ldr	r0, [r5, #20]
 8005312:	b140      	cbz	r0, 8005326 <eARPProcessPacket+0x1e>
		switch( pxARPHeader->usOperation )
 8005314:	8aa3      	ldrh	r3, [r4, #20]
	memcpy( ( void *)&( ulSenderProtocolAddress ), ( void * )pxARPHeader->ucSenderProtocolAddress, sizeof( ulSenderProtocolAddress ) );
 8005316:	69e6      	ldr	r6, [r4, #28]
		switch( pxARPHeader->usOperation )
 8005318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800531c:	d005      	beq.n	800532a <eARPProcessPacket+0x22>
 800531e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005322:	d035      	beq.n	8005390 <eARPProcessPacket+0x88>
eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8005324:	2000      	movs	r0, #0
}
 8005326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 800532a:	f8d4 8026 	ldr.w	r8, [r4, #38]	; 0x26
				if( ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 800532e:	4580      	cmp	r8, r0
 8005330:	d1f8      	bne.n	8005324 <eARPProcessPacket+0x1c>
					vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 8005332:	f104 0716 	add.w	r7, r4, #22
 8005336:	4631      	mov	r1, r6
 8005338:	4638      	mov	r0, r7
 800533a:	f7ff ff67 	bl	800520c <vARPRefreshCacheEntry>
					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 800533e:	2202      	movs	r2, #2
 8005340:	2300      	movs	r3, #0
					if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 8005342:	4546      	cmp	r6, r8
					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8005344:	7562      	strb	r2, [r4, #21]
 8005346:	7523      	strb	r3, [r4, #20]
 8005348:	f104 0220 	add.w	r2, r4, #32
					if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 800534c:	d119      	bne.n	8005382 <eARPProcessPacket+0x7a>
						memcpy( pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes, xBroadcastMACAddress.ucBytes, sizeof( xBroadcastMACAddress ) );
 800534e:	4914      	ldr	r1, [pc, #80]	; (80053a0 <eARPProcessPacket+0x98>)
						memset( pxARPHeader->xTargetHardwareAddress.ucBytes, '\0', sizeof( MACAddress_t ) );
 8005350:	6223      	str	r3, [r4, #32]
						memcpy( pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes, xBroadcastMACAddress.ucBytes, sizeof( xBroadcastMACAddress ) );
 8005352:	6808      	ldr	r0, [r1, #0]
 8005354:	8889      	ldrh	r1, [r1, #4]
 8005356:	f8c4 0006 	str.w	r0, [r4, #6]
 800535a:	8161      	strh	r1, [r4, #10]
						memset( pxARPHeader->xTargetHardwareAddress.ucBytes, '\0', sizeof( MACAddress_t ) );
 800535c:	8093      	strh	r3, [r2, #4]
						pxARPHeader->ulTargetProtocolAddress = 0UL;
 800535e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 8005362:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
 8005366:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800536a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
					memcpy( pxARPHeader->xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );
 800536e:	6828      	ldr	r0, [r5, #0]
 8005370:	f8c4 0016 	str.w	r0, [r4, #22]
 8005374:	88ab      	ldrh	r3, [r5, #4]
 8005376:	80bb      	strh	r3, [r7, #4]
					memcpy( ( void* )pxARPHeader->ucSenderProtocolAddress, ( void* )ipLOCAL_IP_ADDRESS_POINTER, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 8005378:	696b      	ldr	r3, [r5, #20]
 800537a:	61e3      	str	r3, [r4, #28]
					eReturn = eReturnEthernetFrame;
 800537c:	2002      	movs	r0, #2
 800537e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						memcpy( pxARPHeader->xTargetHardwareAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, sizeof( MACAddress_t ) );
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	6223      	str	r3, [r4, #32]
 8005386:	88bb      	ldrh	r3, [r7, #4]
 8005388:	8093      	strh	r3, [r2, #4]
						pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 800538a:	f8c4 6026 	str.w	r6, [r4, #38]	; 0x26
 800538e:	e7ee      	b.n	800536e <eARPProcessPacket+0x66>
				vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 8005390:	4631      	mov	r1, r6
 8005392:	f104 0016 	add.w	r0, r4, #22
 8005396:	f7ff ff39 	bl	800520c <vARPRefreshCacheEntry>
 800539a:	e7c3      	b.n	8005324 <eARPProcessPacket+0x1c>
 800539c:	200001b4 	.word	0x200001b4
 80053a0:	08008d9e 	.word	0x08008d9e

080053a4 <eARPGetCacheEntry>:
{
eARPLookupResult_t eReturn;
uint32_t ulAddressToLookup;

#if( ipconfigUSE_LLMNR == 1 )
	if( *pulIPAddress == ipLLMNR_IP_ADDR )	/* Is in network byte order. */
 80053a4:	6803      	ldr	r3, [r0, #0]
 80053a6:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <eARPGetCacheEntry+0x70>)
 80053a8:	4293      	cmp	r3, r2
{
 80053aa:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( *pulIPAddress == ipLLMNR_IP_ADDR )	/* Is in network byte order. */
 80053ac:	d106      	bne.n	80053bc <eARPGetCacheEntry+0x18>
	{
		/* The LLMNR IP-address has a fixed virtual MAC address. */
		memcpy( pxMACAddress->ucBytes, xLLMNR_MacAdress.ucBytes, sizeof( MACAddress_t ) );
 80053ae:	4b1a      	ldr	r3, [pc, #104]	; (8005418 <eARPGetCacheEntry+0x74>)
#endif
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
		( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) )/* Or a local broadcast address, eg 192.168.1.255? */
	{
		/* This is a broadcast so uses the broadcast MAC address. */
		memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	889b      	ldrh	r3, [r3, #4]
 80053b4:	600a      	str	r2, [r1, #0]
 80053b6:	808b      	strh	r3, [r1, #4]
		eReturn = eARPCacheHit;
 80053b8:	2001      	movs	r0, #1
 80053ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	d003      	beq.n	80053c8 <eARPGetCacheEntry+0x24>
		( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) )/* Or a local broadcast address, eg 192.168.1.255? */
 80053c0:	4c16      	ldr	r4, [pc, #88]	; (800541c <eARPGetCacheEntry+0x78>)
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
 80053c2:	6922      	ldr	r2, [r4, #16]
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d101      	bne.n	80053cc <eARPGetCacheEntry+0x28>
		memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 80053c8:	4b15      	ldr	r3, [pc, #84]	; (8005420 <eARPGetCacheEntry+0x7c>)
 80053ca:	e7f1      	b.n	80053b0 <eARPGetCacheEntry+0xc>
	}
	else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
 80053cc:	4a15      	ldr	r2, [pc, #84]	; (8005424 <eARPGetCacheEntry+0x80>)
 80053ce:	6952      	ldr	r2, [r2, #20]
 80053d0:	b1f2      	cbz	r2, 8005410 <eARPGetCacheEntry+0x6c>
	}
	else
	{
		eReturn = eARPCacheMiss;

		if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) )
 80053d2:	6865      	ldr	r5, [r4, #4]
 80053d4:	405a      	eors	r2, r3
 80053d6:	422a      	tst	r2, r5
 80053d8:	d001      	beq.n	80053de <eARPGetCacheEntry+0x3a>
			else
#endif
			{
				/* The IP address is off the local network, so look up the
				hardware address of the router, if any. */
				if( xNetworkAddressing.ulGatewayAddress != ( uint32_t )0u )
 80053da:	68a2      	ldr	r2, [r4, #8]
 80053dc:	b90a      	cbnz	r2, 80053e2 <eARPGetCacheEntry+0x3e>
			ulAddressToLookup = *pulIPAddress;
		}

		if( eReturn == eARPCacheMiss )
		{
			if( ulAddressToLookup == 0UL )
 80053de:	b1bb      	cbz	r3, 8005410 <eARPGetCacheEntry+0x6c>
 80053e0:	461a      	mov	r2, r3
	/* Loop through each entry in the ARP cache. */
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
	{
		/* Does this row in the ARP cache table hold an entry for the IP address
		being queried? */
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 80053e2:	4d11      	ldr	r5, [pc, #68]	; (8005428 <eARPGetCacheEntry+0x84>)
 80053e4:	2400      	movs	r4, #0
 80053e6:	260c      	movs	r6, #12
 80053e8:	fb06 f304 	mul.w	r3, r6, r4
 80053ec:	595f      	ldr	r7, [r3, r5]
 80053ee:	4297      	cmp	r7, r2
 80053f0:	d108      	bne.n	8005404 <eARPGetCacheEntry+0x60>
		{
			/* A matching valid entry was found. */
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80053f2:	18ea      	adds	r2, r5, r3
 80053f4:	7ad2      	ldrb	r2, [r2, #11]
 80053f6:	b15a      	cbz	r2, 8005410 <eARPGetCacheEntry+0x6c>
				eReturn = eCantSendPacket;
			}
			else
			{
				/* A valid entry was found. */
				memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 80053f8:	3304      	adds	r3, #4
 80053fa:	18ea      	adds	r2, r5, r3
 80053fc:	58e8      	ldr	r0, [r5, r3]
 80053fe:	6008      	str	r0, [r1, #0]
 8005400:	8893      	ldrh	r3, [r2, #4]
 8005402:	e7d8      	b.n	80053b6 <eARPGetCacheEntry+0x12>
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8005404:	3401      	adds	r4, #1
 8005406:	2c06      	cmp	r4, #6
 8005408:	d1ee      	bne.n	80053e8 <eARPGetCacheEntry+0x44>
					*pulIPAddress = ulAddressToLookup;
 800540a:	6002      	str	r2, [r0, #0]
 800540c:	2000      	movs	r0, #0
}
 800540e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		eReturn = eCantSendPacket;
 8005410:	2002      	movs	r0, #2
 8005412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005414:	fc0000e0 	.word	0xfc0000e0
 8005418:	08008d88 	.word	0x08008d88
 800541c:	20004e88 	.word	0x20004e88
 8005420:	08008d9e 	.word	0x08008d9e
 8005424:	200001b4 	.word	0x200001b4
 8005428:	20004d94 	.word	0x20004d94

0800542c <vARPGenerateRequestPacket>:

void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
ARPPacket_t *pxARPPacket;

	pxARPPacket = ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 800542c:	6983      	ldr	r3, [r0, #24]
		xARPHeader.ucHardwareAddressLength;
		xARPHeader.ucProtocolAddressLength;
		xARPHeader.usOperation;
		xARPHeader.xTargetHardwareAddress;
	*/
	memcpy( ( void * ) pxARPPacket, ( void * ) xDefaultPartARPPacketHeader, sizeof( xDefaultPartARPPacketHeader ) );
 800542e:	4a0f      	ldr	r2, [pc, #60]	; (800546c <vARPGenerateRequestPacket+0x40>)
{
 8005430:	b530      	push	{r4, r5, lr}
 8005432:	4601      	mov	r1, r0
	memcpy( ( void * ) pxARPPacket, ( void * ) xDefaultPartARPPacketHeader, sizeof( xDefaultPartARPPacketHeader ) );
 8005434:	f102 0424 	add.w	r4, r2, #36	; 0x24
 8005438:	4618      	mov	r0, r3
 800543a:	f852 5b04 	ldr.w	r5, [r2], #4
 800543e:	f840 5b04 	str.w	r5, [r0], #4
 8005442:	42a2      	cmp	r2, r4
 8005444:	d1f9      	bne.n	800543a <vARPGenerateRequestPacket+0xe>
 8005446:	8812      	ldrh	r2, [r2, #0]
 8005448:	8002      	strh	r2, [r0, #0]
	memcpy( ( void * ) pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800544a:	4a09      	ldr	r2, [pc, #36]	; (8005470 <vARPGenerateRequestPacket+0x44>)
 800544c:	6810      	ldr	r0, [r2, #0]
 800544e:	f8c3 0006 	str.w	r0, [r3, #6]
 8005452:	8894      	ldrh	r4, [r2, #4]
 8005454:	815c      	strh	r4, [r3, #10]
	memcpy( ( void * ) pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8005456:	f8c3 0016 	str.w	r0, [r3, #22]

	memcpy( ( void* )pxARPPacket->xARPHeader.ucSenderProtocolAddress, ( void* )ipLOCAL_IP_ADDRESS_POINTER, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 800545a:	6952      	ldr	r2, [r2, #20]
	memcpy( ( void * ) pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800545c:	835c      	strh	r4, [r3, #26]
	memcpy( ( void* )pxARPPacket->xARPHeader.ucSenderProtocolAddress, ( void* )ipLOCAL_IP_ADDRESS_POINTER, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 800545e:	61da      	str	r2, [r3, #28]
	pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
 8005460:	694a      	ldr	r2, [r1, #20]
 8005462:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

	pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8005466:	232a      	movs	r3, #42	; 0x2a
 8005468:	61cb      	str	r3, [r1, #28]
 800546a:	bd30      	pop	{r4, r5, pc}
 800546c:	08008d62 	.word	0x08008d62
 8005470:	200001b4 	.word	0x200001b4

08005474 <FreeRTOS_OutputARPRequest>:
{
 8005474:	b538      	push	{r3, r4, r5, lr}
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0 );
 8005476:	2100      	movs	r1, #0
{
 8005478:	4605      	mov	r5, r0
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0 );
 800547a:	202a      	movs	r0, #42	; 0x2a
 800547c:	f003 f83c 	bl	80084f8 <pxGetNetworkBufferWithDescriptor>
	if( pxNetworkBuffer != NULL )
 8005480:	4604      	mov	r4, r0
 8005482:	b140      	cbz	r0, 8005496 <FreeRTOS_OutputARPRequest+0x22>
		pxNetworkBuffer->ulIPAddress = ulIPAddress;
 8005484:	6145      	str	r5, [r0, #20]
		vARPGenerateRequestPacket( pxNetworkBuffer );
 8005486:	f7ff ffd1 	bl	800542c <vARPGenerateRequestPacket>
		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 800548a:	4620      	mov	r0, r4
 800548c:	2101      	movs	r1, #1
}
 800548e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 8005492:	f7fd b927 	b.w	80026e4 <xNetworkInterfaceOutput>
 8005496:	bd38      	pop	{r3, r4, r5, pc}

08005498 <vARPAgeCache>:
{
 8005498:	b538      	push	{r3, r4, r5, lr}
 800549a:	4c13      	ldr	r4, [pc, #76]	; (80054e8 <vARPAgeCache+0x50>)
 800549c:	f104 0548 	add.w	r5, r4, #72	; 0x48
		if( xARPCache[ x ].ucAge > 0U )
 80054a0:	7aa3      	ldrb	r3, [r4, #10]
 80054a2:	b16b      	cbz	r3, 80054c0 <vARPAgeCache+0x28>
			( xARPCache[ x ].ucAge )--;
 80054a4:	3b01      	subs	r3, #1
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80054a6:	7ae2      	ldrb	r2, [r4, #11]
			( xARPCache[ x ].ucAge )--;
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	72a3      	strb	r3, [r4, #10]
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80054ac:	b91a      	cbnz	r2, 80054b6 <vARPAgeCache+0x1e>
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 80054ae:	6820      	ldr	r0, [r4, #0]
 80054b0:	f7ff ffe0 	bl	8005474 <FreeRTOS_OutputARPRequest>
 80054b4:	e001      	b.n	80054ba <vARPAgeCache+0x22>
			else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d9f9      	bls.n	80054ae <vARPAgeCache+0x16>
			if( xARPCache[ x ].ucAge == 0u )
 80054ba:	7aa3      	ldrb	r3, [r4, #10]
 80054bc:	b903      	cbnz	r3, 80054c0 <vARPAgeCache+0x28>
				xARPCache[ x ].ulIPAddress = 0UL;
 80054be:	6023      	str	r3, [r4, #0]
 80054c0:	340c      	adds	r4, #12
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80054c2:	42ac      	cmp	r4, r5
 80054c4:	d1ec      	bne.n	80054a0 <vARPAgeCache+0x8>
	if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 80054c6:	4c09      	ldr	r4, [pc, #36]	; (80054ec <vARPAgeCache+0x54>)
	xTimeNow = xTaskGetTickCount ();
 80054c8:	f7ff fa5a 	bl	8004980 <xTaskGetTickCount>
	if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 80054cc:	6822      	ldr	r2, [r4, #0]
	xTimeNow = xTaskGetTickCount ();
 80054ce:	4605      	mov	r5, r0
	if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 80054d0:	b122      	cbz	r2, 80054dc <vARPAgeCache+0x44>
 80054d2:	1a82      	subs	r2, r0, r2
 80054d4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80054d8:	429a      	cmp	r2, r3
 80054da:	d904      	bls.n	80054e6 <vARPAgeCache+0x4e>
		FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
 80054dc:	4b04      	ldr	r3, [pc, #16]	; (80054f0 <vARPAgeCache+0x58>)
 80054de:	6958      	ldr	r0, [r3, #20]
 80054e0:	f7ff ffc8 	bl	8005474 <FreeRTOS_OutputARPRequest>
		xLastGratuitousARPTime = xTimeNow;
 80054e4:	6025      	str	r5, [r4, #0]
 80054e6:	bd38      	pop	{r3, r4, r5, pc}
 80054e8:	20004d94 	.word	0x20004d94
 80054ec:	20004ddc 	.word	0x20004ddc
 80054f0:	200001b4 	.word	0x200001b4

080054f4 <prvSkipNameField>:

static uint8_t *prvSkipNameField( uint8_t *pucByte, size_t xSourceLen )
{
    size_t xChunkLength;

    if( 0 == xSourceLen )
 80054f4:	b189      	cbz	r1, 800551a <prvSkipNameField+0x26>
        return NULL;
    }

    /* Determine if the name is the fully coded name, or an offset to the name
	elsewhere in the message. */
	if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80054f6:	7803      	ldrb	r3, [r0, #0]
 80054f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054fc:	2bc0      	cmp	r3, #192	; 0xc0
 80054fe:	d108      	bne.n	8005512 <prvSkipNameField+0x1e>
	{
		/* Jump over the two byte offset. */
        if( xSourceLen > sizeof( uint16_t ) )
 8005500:	2902      	cmp	r1, #2
 8005502:	d90a      	bls.n	800551a <prvSkipNameField+0x26>
        {
            pucByte += sizeof( uint16_t );
 8005504:	3002      	adds	r0, #2
 8005506:	4770      	bx	lr
	else
	{
		/* pucByte points to the full name. Walk over the string. */
		while( *pucByte != 0x00 && xSourceLen > 1 )
		{
            xChunkLength = *pucByte + 1;
 8005508:	3301      	adds	r3, #1

            if( xSourceLen > xChunkLength )
 800550a:	428b      	cmp	r3, r1
 800550c:	d205      	bcs.n	800551a <prvSkipNameField+0x26>
            {
                xSourceLen -= xChunkLength;
 800550e:	1ac9      	subs	r1, r1, r3
                pucByte += xChunkLength;
 8005510:	4418      	add	r0, r3
		while( *pucByte != 0x00 && xSourceLen > 1 )
 8005512:	7803      	ldrb	r3, [r0, #0]
 8005514:	b11b      	cbz	r3, 800551e <prvSkipNameField+0x2a>
 8005516:	2901      	cmp	r1, #1
 8005518:	d8f6      	bhi.n	8005508 <prvSkipNameField+0x14>
        return NULL;
 800551a:	2000      	movs	r0, #0
 800551c:	4770      	bx	lr
        /* Confirm that a fully formed name was found. */
        if( NULL != pucByte )
        {
            if( 0x00 == *pucByte )
            {
                pucByte++;
 800551e:	3001      	adds	r0, #1
            }
        }
	}

	return pucByte;
}
 8005520:	4770      	bx	lr
	...

08005524 <prvParseDNSReply>:

#endif /* ipconfigUSE_NBNS */
/*-----------------------------------------------------------*/

static uint32_t prvParseDNSReply( uint8_t *pucUDPPayloadBuffer, size_t xBufferLength, TickType_t xIdentifier )
{
 8005524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005528:	b085      	sub	sp, #20
uint16_t x, usDataLength, usQuestions;
#if( ipconfigUSE_LLMNR == 1 )
	uint16_t usType = 0, usClass = 0;
#endif
#if( ipconfigUSE_DNS_CACHE == 1 )
	char pcName[ ipconfigDNS_CACHE_NAME_LENGTH ] = ""; 
 800552a:	2300      	movs	r3, #0
#endif

    /* Ensure that the buffer is of at least minimal DNS message length. */
    if( xBufferLength < sizeof( DNSMessage_t ) )
 800552c:	290b      	cmp	r1, #11
{
 800552e:	4606      	mov	r6, r0
 8005530:	460d      	mov	r5, r1
	char pcName[ ipconfigDNS_CACHE_NAME_LENGTH ] = ""; 
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	9301      	str	r3, [sp, #4]
 8005536:	9302      	str	r3, [sp, #8]
 8005538:	9303      	str	r3, [sp, #12]
    if( xBufferLength < sizeof( DNSMessage_t ) )
 800553a:	d804      	bhi.n	8005546 <prvParseDNSReply+0x22>
    {
        return dnsPARSE_ERROR;
 800553c:	2500      	movs	r5, #0
		}
#endif /* ipconfigUSE_LLMNR == 1 */
	}

	return ulIPAddress;
}
 800553e:	4628      	mov	r0, r5
 8005540:	b005      	add	sp, #20
 8005542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxDNSMessageHeader->usIdentifier == ( uint16_t ) xIdentifier )
 8005546:	8801      	ldrh	r1, [r0, #0]
 8005548:	b292      	uxth	r2, r2
 800554a:	4291      	cmp	r1, r2
 800554c:	d1f6      	bne.n	800553c <prvParseDNSReply+0x18>
		usQuestions = FreeRTOS_ntohs( pxDNSMessageHeader->usQuestions );
 800554e:	8882      	ldrh	r2, [r0, #4]
 8005550:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8005554:	ea48 2802 	orr.w	r8, r8, r2, lsl #8
		pucByte = pucUDPPayloadBuffer + sizeof( DNSMessage_t );
 8005558:	f100 040c 	add.w	r4, r0, #12
        xSourceBytesRemaining -= sizeof( DNSMessage_t );
 800555c:	f1a5 010c 	sub.w	r1, r5, #12
		usQuestions = FreeRTOS_ntohs( pxDNSMessageHeader->usQuestions );
 8005560:	fa1f f888 	uxth.w	r8, r8
	uint16_t usType = 0, usClass = 0;
 8005564:	469e      	mov	lr, r3
		for( x = 0; x < usQuestions; x++ )
 8005566:	461a      	mov	r2, r3
	char *pcRequestedName = NULL;
 8005568:	461f      	mov	r7, r3
		for( x = 0; x < usQuestions; x++ )
 800556a:	4542      	cmp	r2, r8
 800556c:	d111      	bne.n	8005592 <prvParseDNSReply+0x6e>
		pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 800556e:	88f0      	ldrh	r0, [r6, #6]
 8005570:	ea4f 2810 	mov.w	r8, r0, lsr #8
 8005574:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
		if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8005578:	8870      	ldrh	r0, [r6, #2]
 800557a:	f400 6078 	and.w	r0, r0, #3968	; 0xf80
		pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 800557e:	fa1f f888 	uxth.w	r8, r8
		if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8005582:	2880      	cmp	r0, #128	; 0x80
		pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 8005584:	f8a6 8006 	strh.w	r8, [r6, #6]
		if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8005588:	f040 80c4 	bne.w	8005714 <prvParseDNSReply+0x1f0>
 800558c:	2200      	movs	r2, #0
                    xSourceBytesRemaining = pucUDPPayloadBuffer + xBufferLength - pucByte;
 800558e:	442e      	add	r6, r5
 8005590:	e087      	b.n	80056a2 <prvParseDNSReply+0x17e>
				if( x == 0 )
 8005592:	2a00      	cmp	r2, #0
 8005594:	f040 816e 	bne.w	8005874 <prvParseDNSReply+0x350>
        if( 0 == xSourceLen )
 8005598:	2900      	cmp	r1, #0
 800559a:	d0cf      	beq.n	800553c <prvParseDNSReply+0x18>
		if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 800559c:	7823      	ldrb	r3, [r4, #0]
 800559e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055a2:	2bc0      	cmp	r3, #192	; 0xc0
 80055a4:	d13e      	bne.n	8005624 <prvParseDNSReply+0x100>
            if( xSourceLen > sizeof( uint16_t ) )
 80055a6:	2902      	cmp	r1, #2
 80055a8:	d9c8      	bls.n	800553c <prvParseDNSReply+0x18>
                pucByte += sizeof( uint16_t );
 80055aa:	1ca0      	adds	r0, r4, #2
                if( NULL == pucByte )
 80055ac:	2800      	cmp	r0, #0
 80055ae:	d0c5      	beq.n	800553c <prvParseDNSReply+0x18>
                    xSourceBytesRemaining = ( pucUDPPayloadBuffer + xBufferLength ) - pucByte;
 80055b0:	1971      	adds	r1, r6, r5
 80055b2:	1a09      	subs	r1, r1, r0
 80055b4:	4627      	mov	r7, r4
            if( xSourceBytesRemaining >= sizeof( uint32_t ) )
 80055b6:	2903      	cmp	r1, #3
 80055b8:	d9c0      	bls.n	800553c <prvParseDNSReply+0x18>

static portINLINE uint16_t usChar2u16 (const uint8_t *apChr);
static portINLINE uint16_t usChar2u16 (const uint8_t *apChr)
{
	return ( uint16_t )
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 80055ba:	7803      	ldrb	r3, [r0, #0]
			  ( ( ( uint32_t )apChr[1] ) ) );
 80055bc:	f890 e001 	ldrb.w	lr, [r0, #1]
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 80055c0:	f890 c002 	ldrb.w	ip, [r0, #2]
                    usType = usChar2u16( pucByte );
 80055c4:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			  ( ( ( uint32_t )apChr[1] ) ) );
 80055c8:	78c3      	ldrb	r3, [r0, #3]
		for( x = 0; x < usQuestions; x++ )
 80055ca:	3201      	adds	r2, #1
                pucByte += sizeof( uint32_t );
 80055cc:	1d04      	adds	r4, r0, #4
                xSourceBytesRemaining -= sizeof( uint32_t );
 80055ce:	3904      	subs	r1, #4
		for( x = 0; x < usQuestions; x++ )
 80055d0:	b292      	uxth	r2, r2
                    usClass = usChar2u16( pucByte + 2 );
 80055d2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80055d6:	e7c8      	b.n	800556a <prvParseDNSReply+0x46>
                if( xNameLen > 0 && xNameLen < xDestLen - 1 )
 80055d8:	b13b      	cbz	r3, 80055ea <prvParseDNSReply+0xc6>
 80055da:	2b0e      	cmp	r3, #14
                    pcName[ xNameLen++ ] = '.';
 80055dc:	bf9f      	itttt	ls
 80055de:	f10d 0e10 	addls.w	lr, sp, #16
 80055e2:	449e      	addls	lr, r3
 80055e4:	3301      	addls	r3, #1
 80055e6:	f80e cc10 	strbls.w	ip, [lr, #-16]
				for( xCount = *(pucByte++), xSourceLen--;
 80055ea:	3901      	subs	r1, #1
 80055ec:	f100 0e01 	add.w	lr, r0, #1
 80055f0:	1bcf      	subs	r7, r1, r7
 80055f2:	42b9      	cmp	r1, r7
 80055f4:	4670      	mov	r0, lr
 80055f6:	d001      	beq.n	80055fc <prvParseDNSReply+0xd8>
                     xCount-- && xSourceLen > 1; 
 80055f8:	2901      	cmp	r1, #1
 80055fa:	d109      	bne.n	8005610 <prvParseDNSReply+0xec>
			while( NULL != pucByte && *pucByte != 0x00 && xSourceLen > 1 )
 80055fc:	f1be 0f00 	cmp.w	lr, #0
 8005600:	d09c      	beq.n	800553c <prvParseDNSReply+0x18>
 8005602:	7807      	ldrb	r7, [r0, #0]
 8005604:	2f00      	cmp	r7, #0
 8005606:	f000 813e 	beq.w	8005886 <prvParseDNSReply+0x362>
 800560a:	2901      	cmp	r1, #1
 800560c:	d1e4      	bne.n	80055d8 <prvParseDNSReply+0xb4>
 800560e:	e795      	b.n	800553c <prvParseDNSReply+0x18>
                    if( xNameLen < xDestLen - 1 )
 8005610:	2b0e      	cmp	r3, #14
 8005612:	d893      	bhi.n	800553c <prvParseDNSReply+0x18>
                        pcName[ xNameLen++ ] = *( ( char * )pucByte );
 8005614:	7800      	ldrb	r0, [r0, #0]
 8005616:	f80d 0003 	strb.w	r0, [sp, r3]
 800561a:	f10e 0e01 	add.w	lr, lr, #1
                     pucByte++, xSourceLen-- )
 800561e:	3901      	subs	r1, #1
 8005620:	3301      	adds	r3, #1
 8005622:	e7e6      	b.n	80055f2 <prvParseDNSReply+0xce>
		if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8005624:	4620      	mov	r0, r4
 8005626:	4613      	mov	r3, r2
                    pcName[ xNameLen++ ] = '.';
 8005628:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 800562c:	e7e9      	b.n	8005602 <prvParseDNSReply+0xde>
    uint32_t ulCurrentTimeSeconds = 
        xTaskGetTickCount( ) / portTICK_PERIOD_MS / 1000;
	static BaseType_t xFreeEntry = 0;

		/* For each entry in the DNS cache table. */
		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 800562e:	3401      	adds	r4, #1
 8005630:	2c04      	cmp	r4, #4
 8005632:	f106 061c 	add.w	r6, r6, #28
 8005636:	d15b      	bne.n	80056f0 <prvParseDNSReply+0x1cc>
				*pulIP = 0;
			}
			else
			{
				/* Add or update the item. */
                if( strlen( pcName ) < ipconfigDNS_CACHE_NAME_LENGTH )
 8005638:	4668      	mov	r0, sp
 800563a:	f7fa fdd3 	bl	80001e4 <strlen>
 800563e:	280f      	cmp	r0, #15
 8005640:	f63f af7d 	bhi.w	800553e <prvParseDNSReply+0x1a>
                {
                    strcpy( xDNSCache[ xFreeEntry ].pcName, pcName );
 8005644:	f8df 9260 	ldr.w	r9, [pc, #608]	; 80058a8 <prvParseDNSReply+0x384>
 8005648:	f8df a24c 	ldr.w	sl, [pc, #588]	; 8005898 <prvParseDNSReply+0x374>
 800564c:	f8d9 4000 	ldr.w	r4, [r9]
 8005650:	261c      	movs	r6, #28
 8005652:	4366      	muls	r6, r4
 8005654:	1d30      	adds	r0, r6, #4
 8005656:	4669      	mov	r1, sp
 8005658:	4450      	add	r0, sl
 800565a:	f003 fa93 	bl	8008b84 <strcpy>

                    xDNSCache[ xFreeEntry ].ulIPAddress = *pulIP;
                    xDNSCache[ xFreeEntry ].ulTTL = ulTTL;
                    xDNSCache[ xFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;

                    xFreeEntry++;
 800565e:	3401      	adds	r4, #1
                    xDNSCache[ xFreeEntry ].ulIPAddress = *pulIP;
 8005660:	eb0a 0306 	add.w	r3, sl, r6
                    if( xFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 8005664:	2c04      	cmp	r4, #4
                    xDNSCache[ xFreeEntry ].ulIPAddress = *pulIP;
 8005666:	f84a 5006 	str.w	r5, [sl, r6]
                    xDNSCache[ xFreeEntry ].ulTTL = ulTTL;
 800566a:	f8c3 8014 	str.w	r8, [r3, #20]
                    xDNSCache[ xFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 800566e:	619f      	str	r7, [r3, #24]
                    xFreeEntry++;
 8005670:	f8c9 4000 	str.w	r4, [r9]
                    if( xFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 8005674:	f47f af63 	bne.w	800553e <prvParseDNSReply+0x1a>
                    {
                        xFreeEntry = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	f8c9 3000 	str.w	r3, [r9]
 800567e:	e75e      	b.n	800553e <prvParseDNSReply+0x1a>
				else if( xSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 8005680:	2909      	cmp	r1, #9
 8005682:	d90c      	bls.n	800569e <prvParseDNSReply+0x17a>
					usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 8005684:	8920      	ldrh	r0, [r4, #8]
 8005686:	0a03      	lsrs	r3, r0, #8
 8005688:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    xSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 800568c:	390a      	subs	r1, #10
                    if( xSourceBytesRemaining >= usDataLength )
 800568e:	b29b      	uxth	r3, r3
 8005690:	4299      	cmp	r1, r3
 8005692:	f4ff af53 	bcc.w	800553c <prvParseDNSReply+0x18>
                        pucByte += usDataLength;
 8005696:	f103 000a 	add.w	r0, r3, #10
 800569a:	4404      	add	r4, r0
                        xSourceBytesRemaining -= usDataLength;
 800569c:	1ac9      	subs	r1, r1, r3
			for( x = 0; x < pxDNSMessageHeader->usAnswers; x++ )
 800569e:	3201      	adds	r2, #1
 80056a0:	b292      	uxth	r2, r2
 80056a2:	4542      	cmp	r2, r8
 80056a4:	f43f af4a 	beq.w	800553c <prvParseDNSReply+0x18>
				pucByte = prvSkipNameField( pucByte,
 80056a8:	4620      	mov	r0, r4
 80056aa:	f7ff ff23 	bl	80054f4 <prvSkipNameField>
                if( NULL == pucByte )
 80056ae:	4604      	mov	r4, r0
 80056b0:	2800      	cmp	r0, #0
 80056b2:	f43f af43 	beq.w	800553c <prvParseDNSReply+0x18>
                    xSourceBytesRemaining = pucUDPPayloadBuffer + xBufferLength - pucByte;
 80056b6:	1a31      	subs	r1, r6, r0
				if( xSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) + sizeof( uint32_t ) && 
 80056b8:	290d      	cmp	r1, #13
 80056ba:	d9e1      	bls.n	8005680 <prvParseDNSReply+0x15c>
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 80056bc:	7800      	ldrb	r0, [r0, #0]
			  ( ( ( uint32_t )apChr[1] ) ) );
 80056be:	7863      	ldrb	r3, [r4, #1]
 80056c0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d1dd      	bne.n	8005684 <prvParseDNSReply+0x160>
					if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) == sizeof( uint32_t ) )
 80056c8:	8922      	ldrh	r2, [r4, #8]
 80056ca:	0a13      	lsrs	r3, r2, #8
 80056cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80056d0:	b21b      	sxth	r3, r3
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	f47f af32 	bne.w	800553c <prvParseDNSReply+0x18>
						memcpy( &ulIPAddress, 
 80056d8:	f8d4 500a 	ldr.w	r5, [r4, #10]
							prvProcessDNSCache( pcName, &ulIPAddress, pxDNSAnswerRecord->ulTTL, pdFALSE );
 80056dc:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80056e0:	4e6c      	ldr	r6, [pc, #432]	; (8005894 <prvParseDNSReply+0x370>)
        xTaskGetTickCount( ) / portTICK_PERIOD_MS / 1000;
 80056e2:	f7ff f94d 	bl	8004980 <xTaskGetTickCount>
		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 80056e6:	2400      	movs	r4, #0
    uint32_t ulCurrentTimeSeconds = 
 80056e8:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80056ec:	fbb0 f7f7 	udiv	r7, r0, r7
			if( xDNSCache[ x ].pcName[ 0 ] == 0 )
 80056f0:	7833      	ldrb	r3, [r6, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0a0      	beq.n	8005638 <prvParseDNSReply+0x114>
			if( 0 == strcmp( xDNSCache[ x ].pcName, pcName ) )
 80056f6:	4669      	mov	r1, sp
 80056f8:	4630      	mov	r0, r6
 80056fa:	f7fa fd69 	bl	80001d0 <strcmp>
 80056fe:	2800      	cmp	r0, #0
 8005700:	d195      	bne.n	800562e <prvParseDNSReply+0x10a>
					xDNSCache[ x ].ulIPAddress = *pulIP;
 8005702:	4a65      	ldr	r2, [pc, #404]	; (8005898 <prvParseDNSReply+0x374>)
 8005704:	231c      	movs	r3, #28
 8005706:	435c      	muls	r4, r3
 8005708:	1913      	adds	r3, r2, r4
 800570a:	5115      	str	r5, [r2, r4]
                    xDNSCache[ x ].ulTTL = ulTTL;
 800570c:	f8c3 8014 	str.w	r8, [r3, #20]
                    xDNSCache[ x ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8005710:	619f      	str	r7, [r3, #24]
 8005712:	e714      	b.n	800553e <prvParseDNSReply+0x1a>
		else if( usQuestions && ( usType == dnsTYPE_A_HOST ) && ( usClass == dnsCLASS_IN ) )
 8005714:	2a00      	cmp	r2, #0
 8005716:	f43f af11 	beq.w	800553c <prvParseDNSReply+0x18>
 800571a:	f1be 0f01 	cmp.w	lr, #1
 800571e:	f47f af0d 	bne.w	800553c <prvParseDNSReply+0x18>
 8005722:	2b01      	cmp	r3, #1
 8005724:	f47f af0a 	bne.w	800553c <prvParseDNSReply+0x18>
			if( xApplicationDNSQueryHook ( ( pcRequestedName + 1 ) ) )
 8005728:	1c78      	adds	r0, r7, #1
 800572a:	f002 ffeb 	bl	8008704 <xApplicationDNSQueryHook>
 800572e:	2800      	cmp	r0, #0
 8005730:	f43f af04 	beq.w	800553c <prvParseDNSReply+0x18>
			NetworkBufferDescriptor_t *pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 8005734:	4630      	mov	r0, r6
 8005736:	f000 f92a 	bl	800598e <pxUDPPayloadBuffer_to_NetworkBuffer>
				if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 800573a:	4b58      	ldr	r3, [pc, #352]	; (800589c <prvParseDNSReply+0x378>)
 800573c:	681b      	ldr	r3, [r3, #0]
			NetworkBufferDescriptor_t *pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 800573e:	4681      	mov	r9, r0
				if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 8005740:	2b00      	cmp	r3, #0
 8005742:	f040 8091 	bne.w	8005868 <prvParseDNSReply+0x344>
 8005746:	2800      	cmp	r0, #0
 8005748:	f43f aef8 	beq.w	800553c <prvParseDNSReply+0x18>
					sizeof( EthernetHeader_t ) + sizeof( IPHeader_t );
 800574c:	f105 032a 	add.w	r3, r5, #42	; 0x2a
					pxNetworkBuffer->xDataLength = xDataLength;
 8005750:	61c3      	str	r3, [r0, #28]
					pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, xDataLength + 16 );
 8005752:	f105 013a 	add.w	r1, r5, #58	; 0x3a
 8005756:	f000 f903 	bl	8005960 <pxDuplicateNetworkBufferWithDescriptor>
					if( pxNewBuffer != NULL )
 800575a:	4682      	mov	sl, r0
 800575c:	2800      	cmp	r0, #0
 800575e:	f43f aeed 	beq.w	800553c <prvParseDNSReply+0x18>
						xOffset1 = ( BaseType_t ) ( pucByte - pucUDPPayloadBuffer );
 8005762:	4633      	mov	r3, r6
						pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + ipUDP_PAYLOAD_OFFSET_IPv4;
 8005764:	6986      	ldr	r6, [r0, #24]
						xOffset1 = ( BaseType_t ) ( pucByte - pucUDPPayloadBuffer );
 8005766:	1ae4      	subs	r4, r4, r3
						pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + ipUDP_PAYLOAD_OFFSET_IPv4;
 8005768:	362a      	adds	r6, #42	; 0x2a
						xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) pcRequestedName ) - pucUDPPayloadBuffer );
 800576a:	1aff      	subs	r7, r7, r3
						pucByte = pucUDPPayloadBuffer + xOffset1;
 800576c:	4434      	add	r4, r6
						pcRequestedName = ( char * ) ( pucUDPPayloadBuffer + xOffset2 );
 800576e:	4437      	add	r7, r6
 8005770:	4681      	mov	r9, r0
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE );	/* Set the response flag */
 8005772:	2500      	movs	r5, #0
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );	/* Provide a single answer */
 8005774:	f04f 0b01 	mov.w	fp, #1
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE );	/* Set the response flag */
 8005778:	2080      	movs	r0, #128	; 0x80
					pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 800577a:	23c0      	movs	r3, #192	; 0xc0
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE );	/* Set the response flag */
 800577c:	70b0      	strb	r0, [r6, #2]
 800577e:	70f5      	strb	r5, [r6, #3]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );	/* Provide a single answer */
 8005780:	71b5      	strb	r5, [r6, #6]
 8005782:	f886 b007 	strb.w	fp, [r6, #7]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );	/* No authority */
 8005786:	7235      	strb	r5, [r6, #8]
 8005788:	7275      	strb	r5, [r6, #9]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );	/* No additional info */
 800578a:	72b5      	strb	r5, [r6, #10]
 800578c:	72f5      	strb	r5, [r6, #11]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 800578e:	2293      	movs	r2, #147	; 0x93
					pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 8005790:	7023      	strb	r3, [r4, #0]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8005792:	2304      	movs	r3, #4
 8005794:	71e3      	strb	r3, [r4, #7]
 8005796:	7222      	strb	r2, [r4, #8]
					vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, 4 );
 8005798:	72e3      	strb	r3, [r4, #11]
					pxAnswer->ucNameOffset = ( uint8_t )( pcRequestedName - ( char * ) pucUDPPayloadBuffer );
 800579a:	1bbf      	subs	r7, r7, r6
 800579c:	4b40      	ldr	r3, [pc, #256]	; (80058a0 <prvParseDNSReply+0x37c>)
 800579e:	7067      	strb	r7, [r4, #1]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 80057a0:	22e0      	movs	r2, #224	; 0xe0
					vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST );	/* Type A: host */
 80057a2:	70a5      	strb	r5, [r4, #2]
 80057a4:	f884 b003 	strb.w	fp, [r4, #3]
					vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN );	/* 1: Class IN */
 80057a8:	7125      	strb	r5, [r4, #4]
 80057aa:	f884 b005 	strb.w	fp, [r4, #5]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 80057ae:	71a5      	strb	r5, [r4, #6]
 80057b0:	7262      	strb	r2, [r4, #9]
					vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, 4 );
 80057b2:	72a5      	strb	r5, [r4, #10]
 80057b4:	695a      	ldr	r2, [r3, #20]
 80057b6:	ba12      	rev	r2, r2
					vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 80057b8:	0e12      	lsrs	r2, r2, #24
 80057ba:	7322      	strb	r2, [r4, #12]
 80057bc:	695a      	ldr	r2, [r3, #20]
 80057be:	ba12      	rev	r2, r2
 80057c0:	0c12      	lsrs	r2, r2, #16
 80057c2:	7362      	strb	r2, [r4, #13]
 80057c4:	695a      	ldr	r2, [r3, #20]
 80057c6:	ba12      	rev	r2, r2
 80057c8:	0a12      	lsrs	r2, r2, #8
 80057ca:	73a2      	strb	r2, [r4, #14]
 80057cc:	7dda      	ldrb	r2, [r3, #23]
 80057ce:	73e2      	strb	r2, [r4, #15]
					usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucUDPPayloadBuffer ) );
 80057d0:	1ba4      	subs	r4, r4, r6
 80057d2:	b2a4      	uxth	r4, r4
 80057d4:	f104 0110 	add.w	r1, r4, #16
		pxIPHeader->usLength               = FreeRTOS_htons( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 80057d8:	fa0f f881 	sxth.w	r8, r1
 80057dc:	f108 021c 	add.w	r2, r8, #28
		pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
 80057e0:	f8d9 7018 	ldr.w	r7, [r9, #24]
		pxIPHeader->usLength               = FreeRTOS_htons( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 80057e4:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80057e8:	0a12      	lsrs	r2, r2, #8
 80057ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80057ee:	823a      	strh	r2, [r7, #16]
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80057f0:	f8d7 201a 	ldr.w	r2, [r7, #26]
		pxIPHeader->usIdentification       = FreeRTOS_htons( usPacketIdentifier );
 80057f4:	492b      	ldr	r1, [pc, #172]	; (80058a4 <prvParseDNSReply+0x380>)
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80057f6:	f8c7 201e 	str.w	r2, [r7, #30]
		pxIPHeader->ulSourceIPAddress      = *ipLOCAL_IP_ADDRESS_POINTER;
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	f8c7 301a 	str.w	r3, [r7, #26]
		pxIPHeader->usIdentification       = FreeRTOS_htons( usPacketIdentifier );
 8005800:	880b      	ldrh	r3, [r1, #0]
		pxIPHeader->ucTimeToLive           = ipconfigUDP_TIME_TO_LIVE;
 8005802:	75b8      	strb	r0, [r7, #22]
		pxIPHeader->usIdentification       = FreeRTOS_htons( usPacketIdentifier );
 8005804:	0a1a      	lsrs	r2, r3, #8
 8005806:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		pxUDPHeader->usLength              = FreeRTOS_htons( lNetLength + ipSIZE_OF_UDP_HEADER );
 800580a:	f104 0618 	add.w	r6, r4, #24
		usPacketIdentifier++;
 800580e:	445b      	add	r3, fp
		pxUDPHeader->usLength              = FreeRTOS_htons( lNetLength + ipSIZE_OF_UDP_HEADER );
 8005810:	f108 0408 	add.w	r4, r8, #8
		usPacketIdentifier++;
 8005814:	800b      	strh	r3, [r1, #0]
		pxUDPHeader->usLength              = FreeRTOS_htons( lNetLength + ipSIZE_OF_UDP_HEADER );
 8005816:	0a24      	lsrs	r4, r4, #8
		vFlip_16( pxUDPPacket->xUDPHeader.usSourcePort, pxUDPPacket->xUDPHeader.usDestinationPort );
 8005818:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
		pxIPHeader->usIdentification       = FreeRTOS_htons( usPacketIdentifier );
 800581a:	827a      	strh	r2, [r7, #18]
		pxUDPHeader->usLength              = FreeRTOS_htons( lNetLength + ipSIZE_OF_UDP_HEADER );
 800581c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
		vFlip_16( pxUDPPacket->xUDPHeader.usSourcePort, pxUDPPacket->xUDPHeader.usDestinationPort );
 8005820:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005822:	847a      	strh	r2, [r7, #34]	; 0x22
 8005824:	84bb      	strh	r3, [r7, #36]	; 0x24
			pxIPHeader->usHeaderChecksum       = usGenerateChecksum( 0UL, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
 8005826:	2214      	movs	r2, #20
 8005828:	f107 010e 	add.w	r1, r7, #14
		pxUDPHeader->usLength              = FreeRTOS_htons( lNetLength + ipSIZE_OF_UDP_HEADER );
 800582c:	84fc      	strh	r4, [r7, #38]	; 0x26
			pxIPHeader->usHeaderChecksum       = 0x00;
 800582e:	763d      	strb	r5, [r7, #24]
 8005830:	767d      	strb	r5, [r7, #25]
			pxIPHeader->usHeaderChecksum       = usGenerateChecksum( 0UL, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
 8005832:	4628      	mov	r0, r5
 8005834:	f000 f9d6 	bl	8005be4 <usGenerateChecksum>
			pxIPHeader->usHeaderChecksum       = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 8005838:	ba40      	rev16	r0, r0
 800583a:	43c0      	mvns	r0, r0
 800583c:	8338      	strh	r0, [r7, #24]
			usGenerateProtocolChecksum( ( uint8_t* ) pxUDPPacket, lNetLength, pdTRUE );
 800583e:	4641      	mov	r1, r8
 8005840:	465a      	mov	r2, fp
 8005842:	4638      	mov	r0, r7
 8005844:	f000 fa3e 	bl	8005cc4 <usGenerateProtocolChecksum>
		pxNetworkBuffer->xDataLength = ( size_t ) ( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER );
 8005848:	f108 012a 	add.w	r1, r8, #42	; 0x2a
 800584c:	f8c9 101c 	str.w	r1, [r9, #28]
		vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8005850:	4648      	mov	r0, r9
 8005852:	4629      	mov	r1, r5
 8005854:	f000 faaa 	bl	8005dac <vReturnEthernetFrame>
					if( pxNewBuffer != NULL )
 8005858:	f1ba 0f00 	cmp.w	sl, #0
 800585c:	f43f ae6e 	beq.w	800553c <prvParseDNSReply+0x18>
						vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 8005860:	4650      	mov	r0, sl
 8005862:	f002 fe25 	bl	80084b0 <vReleaseNetworkBufferAndDescriptor>
 8005866:	e66a      	b.n	800553e <prvParseDNSReply+0x1a>
				if( pxNetworkBuffer != NULL )
 8005868:	2800      	cmp	r0, #0
 800586a:	f43f ae67 	beq.w	800553c <prvParseDNSReply+0x18>
			NetworkBufferDescriptor_t *pxNewBuffer = NULL;
 800586e:	f04f 0a00 	mov.w	sl, #0
 8005872:	e77e      	b.n	8005772 <prvParseDNSReply+0x24e>
				pucByte = prvSkipNameField( pucByte, 
 8005874:	4620      	mov	r0, r4
 8005876:	f7ff fe3d 	bl	80054f4 <prvSkipNameField>
                if( NULL == pucByte )
 800587a:	2800      	cmp	r0, #0
 800587c:	f43f ae5e 	beq.w	800553c <prvParseDNSReply+0x18>
                    xSourceBytesRemaining = pucUDPPayloadBuffer + xBufferLength - pucByte;
 8005880:	1971      	adds	r1, r6, r5
 8005882:	1a09      	subs	r1, r1, r0
 8005884:	e697      	b.n	80055b6 <prvParseDNSReply+0x92>
                    pcName[ xNameLen++ ] = '\0';
 8005886:	a904      	add	r1, sp, #16
 8005888:	440b      	add	r3, r1
                    pucByte++;
 800588a:	3001      	adds	r0, #1
                    pcName[ xNameLen++ ] = '\0';
 800588c:	f803 7c10 	strb.w	r7, [r3, #-16]
 8005890:	e68c      	b.n	80055ac <prvParseDNSReply+0x88>
 8005892:	bf00      	nop
 8005894:	20004de4 	.word	0x20004de4
 8005898:	20004de0 	.word	0x20004de0
 800589c:	08008db4 	.word	0x08008db4
 80058a0:	200001b4 	.word	0x200001b4
 80058a4:	20004e54 	.word	0x20004e54
 80058a8:	20004e50 	.word	0x20004e50

080058ac <ulDNSHandlePacket>:
{
 80058ac:	b508      	push	{r3, lr}
	xPlayloadBufferLength = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 80058ae:	69c3      	ldr	r3, [r0, #28]
    if( pxNetworkBuffer->xDataLength > sizeof( UDPPacket_t ) )
 80058b0:	2b35      	cmp	r3, #53	; 0x35
	xPlayloadBufferLength = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 80058b2:	f1a3 012a 	sub.w	r1, r3, #42	; 0x2a
    if( pxNetworkBuffer->xDataLength > sizeof( UDPPacket_t ) )
 80058b6:	d904      	bls.n	80058c2 <ulDNSHandlePacket+0x16>
            ( uint32_t )pxDNSMessageHeader->usIdentifier );
 80058b8:	6980      	ldr	r0, [r0, #24]
        prvParseDNSReply( pucUDPPayloadBuffer, 
 80058ba:	f830 2f2a 	ldrh.w	r2, [r0, #42]!
 80058be:	f7ff fe31 	bl	8005524 <prvParseDNSReply>
}
 80058c2:	2000      	movs	r0, #0
 80058c4:	bd08      	pop	{r3, pc}

080058c6 <prvIPTimerCheck>:

static BaseType_t prvIPTimerCheck( IPTimer_t *pxTimer )
{
BaseType_t xReturn;

	if( pxTimer->bActive == pdFALSE_UNSIGNED )
 80058c6:	7803      	ldrb	r3, [r0, #0]
 80058c8:	07da      	lsls	r2, r3, #31
{
 80058ca:	b570      	push	{r4, r5, r6, lr}
 80058cc:	4604      	mov	r4, r0
	if( pxTimer->bActive == pdFALSE_UNSIGNED )
 80058ce:	d401      	bmi.n	80058d4 <prvIPTimerCheck+0xe>
	{
		/* The timer is not enabled. */
		xReturn = pdFALSE;
 80058d0:	2000      	movs	r0, #0
 80058d2:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		/* The timer might have set the bExpired flag already, if not, check the
		value of xTimeOut against ulRemainingTime. */
		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
 80058d4:	f013 0f02 	tst.w	r3, #2
 80058d8:	f100 0504 	add.w	r5, r0, #4
 80058dc:	d00f      	beq.n	80058fe <prvIPTimerCheck+0x38>
			( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE ) )
		{
			prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 80058de:	6926      	ldr	r6, [r4, #16]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 80058e0:	4628      	mov	r0, r5
 80058e2:	f7ff fa73 	bl	8004dcc <vTaskSetTimeOutState>
	pxTimer->ulRemainingTime = xTime;
 80058e6:	60e6      	str	r6, [r4, #12]
 80058e8:	7823      	ldrb	r3, [r4, #0]
	if( xTime == ( TickType_t ) 0 )
 80058ea:	b986      	cbnz	r6, 800590e <prvIPTimerCheck+0x48>
		pxTimer->bExpired = pdTRUE_UNSIGNED;
 80058ec:	f043 0302 	orr.w	r3, r3, #2
		pxTimer->bExpired = pdFALSE_UNSIGNED;
 80058f0:	7023      	strb	r3, [r4, #0]
	pxTimer->bActive = pdTRUE_UNSIGNED;
 80058f2:	7823      	ldrb	r3, [r4, #0]
 80058f4:	f043 0301 	orr.w	r3, r3, #1
 80058f8:	7023      	strb	r3, [r4, #0]
 80058fa:	2001      	movs	r0, #1
			xReturn = pdFALSE;
		}
	}

	return xReturn;
}
 80058fc:	bd70      	pop	{r4, r5, r6, pc}
			( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE ) )
 80058fe:	f100 010c 	add.w	r1, r0, #12
 8005902:	4628      	mov	r0, r5
 8005904:	f7ff fa8a 	bl	8004e1c <xTaskCheckForTimeOut>
		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
 8005908:	2800      	cmp	r0, #0
 800590a:	d1e8      	bne.n	80058de <prvIPTimerCheck+0x18>
 800590c:	e7e0      	b.n	80058d0 <prvIPTimerCheck+0xa>
		pxTimer->bExpired = pdFALSE_UNSIGNED;
 800590e:	f36f 0341 	bfc	r3, #1, #1
 8005912:	e7ed      	b.n	80058f0 <prvIPTimerCheck+0x2a>

08005914 <xIsCallingFromIPTask>:
{
 8005914:	b508      	push	{r3, lr}
	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 8005916:	f7ff fac3 	bl	8004ea0 <xTaskGetCurrentTaskHandle>
 800591a:	4b03      	ldr	r3, [pc, #12]	; (8005928 <xIsCallingFromIPTask+0x14>)
 800591c:	681b      	ldr	r3, [r3, #0]
}
 800591e:	1a1b      	subs	r3, r3, r0
 8005920:	4258      	negs	r0, r3
 8005922:	4158      	adcs	r0, r3
 8005924:	bd08      	pop	{r3, pc}
 8005926:	bf00      	nop
 8005928:	20004e80 	.word	0x20004e80

0800592c <FreeRTOS_NetworkDownFromISR>:
	iptraceNETWORK_DOWN();
}
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_NetworkDownFromISR( void )
{
 800592c:	b513      	push	{r0, r1, r4, lr}
static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	/* Simply send the network task the appropriate event. */
	if( xQueueSendToBackFromISR( xNetworkEventQueue, &xNetworkDownEvent, &xHigherPriorityTaskWoken ) != pdPASS )
 800592e:	4809      	ldr	r0, [pc, #36]	; (8005954 <FreeRTOS_NetworkDownFromISR+0x28>)
 8005930:	4909      	ldr	r1, [pc, #36]	; (8005958 <FreeRTOS_NetworkDownFromISR+0x2c>)
 8005932:	6800      	ldr	r0, [r0, #0]
BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005934:	aa02      	add	r2, sp, #8
 8005936:	2400      	movs	r4, #0
 8005938:	f842 4d04 	str.w	r4, [r2, #-4]!
	if( xQueueSendToBackFromISR( xNetworkEventQueue, &xNetworkDownEvent, &xHigherPriorityTaskWoken ) != pdPASS )
 800593c:	4623      	mov	r3, r4
 800593e:	f7fe fc5d 	bl	80041fc <xQueueGenericSendFromISR>
 8005942:	4b06      	ldr	r3, [pc, #24]	; (800595c <FreeRTOS_NetworkDownFromISR+0x30>)
 8005944:	2801      	cmp	r0, #1
	}

	iptraceNETWORK_DOWN();

	return xHigherPriorityTaskWoken;
}
 8005946:	9801      	ldr	r0, [sp, #4]
		xNetworkDownEventPending = pdFALSE;
 8005948:	bf0e      	itee	eq
 800594a:	601c      	streq	r4, [r3, #0]
		xNetworkDownEventPending = pdTRUE;
 800594c:	2201      	movne	r2, #1
 800594e:	601a      	strne	r2, [r3, #0]
}
 8005950:	b002      	add	sp, #8
 8005952:	bd10      	pop	{r4, pc}
 8005954:	20004ea0 	.word	0x20004ea0
 8005958:	08008dac 	.word	0x08008dac
 800595c:	20004e9c 	.word	0x20004e9c

08005960 <pxDuplicateNetworkBufferWithDescriptor>:
}
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxDuplicateNetworkBufferWithDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer,
	BaseType_t xNewLength )
{
 8005960:	b570      	push	{r4, r5, r6, lr}
 8005962:	460e      	mov	r6, r1
 8005964:	4605      	mov	r5, r0
NetworkBufferDescriptor_t * pxNewBuffer;

	/* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
	The transmit routine wants to have ownership of the network buffer
	descriptor, because it will pass the buffer straight to DMA. */
	pxNewBuffer = pxGetNetworkBufferWithDescriptor( ( size_t ) xNewLength, ( TickType_t ) 0 );
 8005966:	2100      	movs	r1, #0
 8005968:	4630      	mov	r0, r6
 800596a:	f002 fdc5 	bl	80084f8 <pxGetNetworkBufferWithDescriptor>

	if( pxNewBuffer != NULL )
 800596e:	4604      	mov	r4, r0
 8005970:	b158      	cbz	r0, 800598a <pxDuplicateNetworkBufferWithDescriptor+0x2a>
        /* Set the actual packet size in case a bigger buffer than requested 
        was returned. */
        pxNewBuffer->xDataLength = xNewLength;

        /* Copy the original packet information. */
		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 8005972:	696b      	ldr	r3, [r5, #20]
 8005974:	6143      	str	r3, [r0, #20]
		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 8005976:	8c2b      	ldrh	r3, [r5, #32]
        pxNewBuffer->xDataLength = xNewLength;
 8005978:	61c6      	str	r6, [r0, #28]
		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800597a:	8403      	strh	r3, [r0, #32]
		pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800597c:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800597e:	8443      	strh	r3, [r0, #34]	; 0x22
		memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8005980:	69ea      	ldr	r2, [r5, #28]
 8005982:	69a9      	ldr	r1, [r5, #24]
 8005984:	6980      	ldr	r0, [r0, #24]
 8005986:	f002 ffbc 	bl	8008902 <memcpy>
	}

	return pxNewBuffer;
}
 800598a:	4620      	mov	r0, r4
 800598c:	bd70      	pop	{r4, r5, r6, pc}

0800598e <pxUDPPayloadBuffer_to_NetworkBuffer>:
NetworkBufferDescriptor_t *pxUDPPayloadBuffer_to_NetworkBuffer( void *pvBuffer )
{
uint8_t *pucBuffer;
NetworkBufferDescriptor_t *pxResult;

	if( pvBuffer == NULL )
 800598e:	b128      	cbz	r0, 800599c <pxUDPPayloadBuffer_to_NetworkBuffer+0xe>
		the network buffer, usually 8 + 2 bytes. */
		pucBuffer -= ( sizeof( UDPPacket_t ) + ipBUFFER_PADDING );

		/* Here a pointer was placed to the network descriptor,
		As a pointer is dereferenced, make sure it is well aligned */
		if( ( ( ( uint32_t ) pucBuffer ) & ( sizeof( pucBuffer ) - 1 ) ) == 0 )
 8005990:	0783      	lsls	r3, r0, #30
 8005992:	d102      	bne.n	800599a <pxUDPPayloadBuffer_to_NetworkBuffer+0xc>
		{
			/* The following statement may trigger a:
			warning: cast increases required alignment of target type [-Wcast-align].
			It has been confirmed though that the alignment is suitable. */
			pxResult = * ( ( NetworkBufferDescriptor_t ** ) pucBuffer );
 8005994:	f850 0c34 	ldr.w	r0, [r0, #-52]
 8005998:	4770      	bx	lr
		pxResult = NULL;
 800599a:	2000      	movs	r0, #0
			pxResult = NULL;
		}
	}

	return pxResult;
}
 800599c:	4770      	bx	lr
	...

080059a0 <FreeRTOS_IPInit>:
/*_RB_ Should we add an error or assert if the task priorities are set such that the servers won't function as expected? */
/*_HT_ There was a bug in FreeRTOS_TCP_IP.c that only occurred when the applications' priority was too high.
 As that bug has been repaired, there is not an urgent reason to warn.
 It is better though to use the advised priority scheme. */
BaseType_t FreeRTOS_IPInit( const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
{
 80059a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a4:	4698      	mov	r8, r3
#endif /* ipconfigDNS_USE_CALLBACKS != 0 */
/*-----------------------------------------------------------*/

BaseType_t xIPIsNetworkTaskReady( void )
{
	return xIPTaskInitialised;
 80059a6:	4b42      	ldr	r3, [pc, #264]	; (8005ab0 <FreeRTOS_IPInit+0x110>)
{
 80059a8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 80059aa:	681b      	ldr	r3, [r3, #0]
{
 80059ac:	4683      	mov	fp, r0
 80059ae:	468a      	mov	sl, r1
 80059b0:	4691      	mov	r9, r2
	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 80059b2:	b143      	cbz	r3, 80059c6 <FreeRTOS_IPInit+0x26>
	__asm volatile
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	e7fe      	b.n	80059c4 <FreeRTOS_IPInit+0x24>
	configASSERT( xNetworkEventQueue == NULL );
 80059c6:	4d3b      	ldr	r5, [pc, #236]	; (8005ab4 <FreeRTOS_IPInit+0x114>)
 80059c8:	682b      	ldr	r3, [r5, #0]
 80059ca:	b143      	cbz	r3, 80059de <FreeRTOS_IPInit+0x3e>
 80059cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	e7fe      	b.n	80059dc <FreeRTOS_IPInit+0x3c>
	configASSERT( xIPTaskHandle == NULL );
 80059de:	4e36      	ldr	r6, [pc, #216]	; (8005ab8 <FreeRTOS_IPInit+0x118>)
 80059e0:	6834      	ldr	r4, [r6, #0]
 80059e2:	b144      	cbz	r4, 80059f6 <FreeRTOS_IPInit+0x56>
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	e7fe      	b.n	80059f4 <FreeRTOS_IPInit+0x54>
	xNetworkEventQueue = xQueueCreate( ( UBaseType_t ) ipconfigEVENT_QUEUE_LENGTH, ( UBaseType_t ) sizeof( IPStackEvent_t ) );
 80059f6:	4622      	mov	r2, r4
 80059f8:	2108      	movs	r1, #8
 80059fa:	2041      	movs	r0, #65	; 0x41
 80059fc:	f7fe fb08 	bl	8004010 <xQueueGenericCreate>
 8005a00:	6028      	str	r0, [r5, #0]
	configASSERT( xNetworkEventQueue );
 8005a02:	b940      	cbnz	r0, 8005a16 <FreeRTOS_IPInit+0x76>
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	e7fe      	b.n	8005a14 <FreeRTOS_IPInit+0x74>
			vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 8005a16:	4929      	ldr	r1, [pc, #164]	; (8005abc <FreeRTOS_IPInit+0x11c>)
 8005a18:	f7fe fdca 	bl	80045b0 <vQueueAddToRegistry>
		if( xNetworkBuffersInitialise() == pdPASS )
 8005a1c:	f002 fd02 	bl	8008424 <xNetworkBuffersInitialise>
 8005a20:	2801      	cmp	r0, #1
 8005a22:	d13e      	bne.n	8005aa2 <FreeRTOS_IPInit+0x102>
			xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 8005a24:	4c26      	ldr	r4, [pc, #152]	; (8005ac0 <FreeRTOS_IPInit+0x120>)
 8005a26:	f8db 5000 	ldr.w	r5, [fp]
 8005a2a:	6025      	str	r5, [r4, #0]
			xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 8005a2c:	f8da c000 	ldr.w	ip, [sl]
 8005a30:	f8c4 c004 	str.w	ip, [r4, #4]
			xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 8005a34:	f8d9 9000 	ldr.w	r9, [r9]
 8005a38:	f8c4 9008 	str.w	r9, [r4, #8]
			xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 8005a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8005a40:	60e3      	str	r3, [r4, #12]
			xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) |  ~xNetworkAddressing.ulNetMask;
 8005a42:	ea65 080c 	orn	r8, r5, ip
 8005a46:	f8c4 8010 	str.w	r8, [r4, #16]
			memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 8005a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a4c:	f8df e080 	ldr.w	lr, [pc, #128]	; 8005ad0 <FreeRTOS_IPInit+0x130>
 8005a50:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
				*ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 8005a54:	4b1b      	ldr	r3, [pc, #108]	; (8005ac4 <FreeRTOS_IPInit+0x124>)
			memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 8005a56:	f8ce 8000 	str.w	r8, [lr]
				*ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 8005a5a:	615d      	str	r5, [r3, #20]
				configASSERT( ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) == ( xNetworkAddressing.ulGatewayAddress & xNetworkAddressing.ulNetMask ) );
 8005a5c:	ea85 0509 	eor.w	r5, r5, r9
 8005a60:	ea15 050c 	ands.w	r5, r5, ip
 8005a64:	d008      	beq.n	8005a78 <FreeRTOS_IPInit+0xd8>
 8005a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	e7fe      	b.n	8005a76 <FreeRTOS_IPInit+0xd6>
			memcpy( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8005a78:	6838      	ldr	r0, [r7, #0]
 8005a7a:	6018      	str	r0, [r3, #0]
 8005a7c:	88ba      	ldrh	r2, [r7, #4]
 8005a7e:	809a      	strh	r2, [r3, #4]
            xReturn = vNetworkSocketsInit();
 8005a80:	f000 fb76 	bl	8006170 <vNetworkSocketsInit>
            if( pdTRUE == xReturn )
 8005a84:	2801      	cmp	r0, #1
 8005a86:	d109      	bne.n	8005a9c <FreeRTOS_IPInit+0xfc>
                xReturn = xTaskCreate( prvIPTask, "IP-task", ( uint16_t )ipconfigIP_TASK_STACK_SIZE_WORDS, NULL, ( UBaseType_t )ipconfigIP_TASK_PRIORITY, &xIPTaskHandle );
 8005a88:	2305      	movs	r3, #5
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	9601      	str	r6, [sp, #4]
 8005a8e:	462b      	mov	r3, r5
 8005a90:	f44f 7220 	mov.w	r2, #640	; 0x280
 8005a94:	490c      	ldr	r1, [pc, #48]	; (8005ac8 <FreeRTOS_IPInit+0x128>)
 8005a96:	480d      	ldr	r0, [pc, #52]	; (8005acc <FreeRTOS_IPInit+0x12c>)
 8005a98:	f7fe fe52 	bl	8004740 <xTaskCreate>
}
 8005a9c:	b003      	add	sp, #12
 8005a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			vQueueDelete( xNetworkEventQueue );
 8005aa2:	6828      	ldr	r0, [r5, #0]
 8005aa4:	f7fe fdaa 	bl	80045fc <vQueueDelete>
			xNetworkEventQueue = NULL;
 8005aa8:	602c      	str	r4, [r5, #0]
BaseType_t xReturn = pdFALSE;
 8005aaa:	4620      	mov	r0, r4
	return xReturn;
 8005aac:	e7f6      	b.n	8005a9c <FreeRTOS_IPInit+0xfc>
 8005aae:	bf00      	nop
 8005ab0:	20004e84 	.word	0x20004e84
 8005ab4:	20004ea0 	.word	0x20004ea0
 8005ab8:	20004e80 	.word	0x20004e80
 8005abc:	08008d8e 	.word	0x08008d8e
 8005ac0:	20004e88 	.word	0x20004e88
 8005ac4:	200001b4 	.word	0x200001b4
 8005ac8:	08008d96 	.word	0x08008d96
 8005acc:	08005dd9 	.word	0x08005dd9
 8005ad0:	20004e6c 	.word	0x20004e6c

08005ad4 <xSendEventStructToIPTask>:
	return xIPTaskInitialised;
 8005ad4:	4b12      	ldr	r3, [pc, #72]	; (8005b20 <xSendEventStructToIPTask+0x4c>)
{
 8005ad6:	b570      	push	{r4, r5, r6, lr}
 8005ad8:	4605      	mov	r5, r0
	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 8005ada:	6818      	ldr	r0, [r3, #0]
 8005adc:	f995 3000 	ldrsb.w	r3, [r5]
{
 8005ae0:	460e      	mov	r6, r1
	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 8005ae2:	b900      	cbnz	r0, 8005ae6 <xSendEventStructToIPTask+0x12>
 8005ae4:	b9db      	cbnz	r3, 8005b1e <xSendEventStructToIPTask+0x4a>
			if( pxEvent->eEventType == eTCPTimerEvent )
 8005ae6:	2b05      	cmp	r3, #5
 8005ae8:	4c0e      	ldr	r4, [pc, #56]	; (8005b24 <xSendEventStructToIPTask+0x50>)
 8005aea:	d10a      	bne.n	8005b02 <xSendEventStructToIPTask+0x2e>
				xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8005aec:	4a0e      	ldr	r2, [pc, #56]	; (8005b28 <xSendEventStructToIPTask+0x54>)
				if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0u )
 8005aee:	6820      	ldr	r0, [r4, #0]
				xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8005af0:	7813      	ldrb	r3, [r2, #0]
 8005af2:	f043 0302 	orr.w	r3, r3, #2
 8005af6:	7013      	strb	r3, [r2, #0]
				if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0u )
 8005af8:	f7fe fd46 	bl	8004588 <uxQueueMessagesWaiting>
 8005afc:	b108      	cbz	r0, 8005b02 <xSendEventStructToIPTask+0x2e>
			xReturn = pdPASS;
 8005afe:	2001      	movs	r0, #1
	return xReturn;
 8005b00:	bd70      	pop	{r4, r5, r6, pc}
			if( ( xIsCallingFromIPTask() == pdTRUE ) && ( xTimeout > ( TickType_t ) 0 ) )
 8005b02:	f7ff ff07 	bl	8005914 <xIsCallingFromIPTask>
			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, xTimeout );
 8005b06:	2300      	movs	r3, #0
				xTimeout = ( TickType_t ) 0;
 8005b08:	2801      	cmp	r0, #1
			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, xTimeout );
 8005b0a:	bf18      	it	ne
 8005b0c:	4632      	movne	r2, r6
 8005b0e:	4629      	mov	r1, r5
 8005b10:	6820      	ldr	r0, [r4, #0]
 8005b12:	bf08      	it	eq
 8005b14:	461a      	moveq	r2, r3
}
 8005b16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, xTimeout );
 8005b1a:	f7fe bab9 	b.w	8004090 <xQueueGenericSend>
}
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	20004e84 	.word	0x20004e84
 8005b24:	20004ea0 	.word	0x20004ea0
 8005b28:	20004eac 	.word	0x20004eac

08005b2c <FreeRTOS_NetworkDown>:
{
 8005b2c:	b508      	push	{r3, lr}
	if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 8005b2e:	2100      	movs	r1, #0
 8005b30:	4804      	ldr	r0, [pc, #16]	; (8005b44 <FreeRTOS_NetworkDown+0x18>)
 8005b32:	f7ff ffcf 	bl	8005ad4 <xSendEventStructToIPTask>
 8005b36:	4b04      	ldr	r3, [pc, #16]	; (8005b48 <FreeRTOS_NetworkDown+0x1c>)
 8005b38:	2801      	cmp	r0, #1
		xNetworkDownEventPending = pdTRUE;
 8005b3a:	bf14      	ite	ne
 8005b3c:	2201      	movne	r2, #1
		xNetworkDownEventPending = pdFALSE;
 8005b3e:	2200      	moveq	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	bd08      	pop	{r3, pc}
 8005b44:	08008da4 	.word	0x08008da4
 8005b48:	20004e9c 	.word	0x20004e9c

08005b4c <xSendEventToIPTask>:
{
 8005b4c:	b507      	push	{r0, r1, r2, lr}
	xEventMessage.pvData = ( void* )NULL;
 8005b4e:	2100      	movs	r1, #0
	xEventMessage.eEventType = eEvent;
 8005b50:	f88d 0000 	strb.w	r0, [sp]
	return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 8005b54:	4668      	mov	r0, sp
	xEventMessage.pvData = ( void* )NULL;
 8005b56:	9101      	str	r1, [sp, #4]
	return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 8005b58:	f7ff ffbc 	bl	8005ad4 <xSendEventStructToIPTask>
}
 8005b5c:	b003      	add	sp, #12
 8005b5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005b64 <eConsiderFrameForProcessing>:
{
 8005b64:	b510      	push	{r4, lr}
	if( memcmp( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) &( pxEthernetHeader->xDestinationAddress ), sizeof( MACAddress_t ) ) == 0 )
 8005b66:	4601      	mov	r1, r0
{
 8005b68:	4604      	mov	r4, r0
	if( memcmp( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) &( pxEthernetHeader->xDestinationAddress ), sizeof( MACAddress_t ) ) == 0 )
 8005b6a:	2206      	movs	r2, #6
 8005b6c:	480e      	ldr	r0, [pc, #56]	; (8005ba8 <eConsiderFrameForProcessing+0x44>)
 8005b6e:	f002 feb9 	bl	80088e4 <memcmp>
 8005b72:	b168      	cbz	r0, 8005b90 <eConsiderFrameForProcessing+0x2c>
	else if( memcmp( ( void * ) xBroadcastMACAddress.ucBytes, ( void * ) pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8005b74:	2206      	movs	r2, #6
 8005b76:	4621      	mov	r1, r4
 8005b78:	480c      	ldr	r0, [pc, #48]	; (8005bac <eConsiderFrameForProcessing+0x48>)
 8005b7a:	f002 feb3 	bl	80088e4 <memcmp>
 8005b7e:	b138      	cbz	r0, 8005b90 <eConsiderFrameForProcessing+0x2c>
	if( memcmp( ( void * ) xLLMNR_MacAdress.ucBytes, ( void * ) pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8005b80:	2206      	movs	r2, #6
 8005b82:	4621      	mov	r1, r4
 8005b84:	480a      	ldr	r0, [pc, #40]	; (8005bb0 <eConsiderFrameForProcessing+0x4c>)
 8005b86:	f002 fead 	bl	80088e4 <memcmp>
 8005b8a:	b108      	cbz	r0, 8005b90 <eConsiderFrameForProcessing+0x2c>
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	bd10      	pop	{r4, pc}
			usFrameType = pxEthernetHeader->usFrameType;
 8005b90:	89a3      	ldrh	r3, [r4, #12]
			usFrameType = FreeRTOS_ntohs( usFrameType );
 8005b92:	0a18      	lsrs	r0, r3, #8
 8005b94:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			if( usFrameType <= 0x600U )
 8005b98:	b280      	uxth	r0, r0
 8005b9a:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
 8005b9e:	bf94      	ite	ls
 8005ba0:	2000      	movls	r0, #0
 8005ba2:	2001      	movhi	r0, #1
}
 8005ba4:	bd10      	pop	{r4, pc}
 8005ba6:	bf00      	nop
 8005ba8:	200001b4 	.word	0x200001b4
 8005bac:	08008d9e 	.word	0x08008d9e
 8005bb0:	08008d88 	.word	0x08008d88

08005bb4 <vIPNetworkUpCalls>:
{
 8005bb4:	b538      	push	{r3, r4, r5, lr}
	pxTimer->ulReloadTime = xTime;
 8005bb6:	4c09      	ldr	r4, [pc, #36]	; (8005bdc <vIPNetworkUpCalls+0x28>)
	xNetworkUp = pdTRUE;
 8005bb8:	4b09      	ldr	r3, [pc, #36]	; (8005be0 <vIPNetworkUpCalls+0x2c>)
 8005bba:	2201      	movs	r2, #1
	pxTimer->ulReloadTime = xTime;
 8005bbc:	f242 7510 	movw	r5, #10000	; 0x2710
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 8005bc0:	1d20      	adds	r0, r4, #4
	xNetworkUp = pdTRUE;
 8005bc2:	601a      	str	r2, [r3, #0]
	pxTimer->ulReloadTime = xTime;
 8005bc4:	6125      	str	r5, [r4, #16]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 8005bc6:	f7ff f901 	bl	8004dcc <vTaskSetTimeOutState>
		pxTimer->bExpired = pdFALSE_UNSIGNED;
 8005bca:	7823      	ldrb	r3, [r4, #0]
	pxTimer->ulRemainingTime = xTime;
 8005bcc:	60e5      	str	r5, [r4, #12]
	pxTimer->bActive = pdTRUE_UNSIGNED;
 8005bce:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	7023      	strb	r3, [r4, #0]
 8005bd8:	bd38      	pop	{r3, r4, r5, pc}
 8005bda:	bf00      	nop
 8005bdc:	20004e58 	.word	0x20004e58
 8005be0:	20004ea4 	.word	0x20004ea4

08005be4 <usGenerateChecksum>:
	xSum.u32 = FreeRTOS_ntohs( ulSum );
 8005be4:	0a03      	lsrs	r3, r0, #8
 8005be6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
{
 8005bea:	b5f0      	push	{r4, r5, r6, r7, lr}
	xSum.u32 = FreeRTOS_ntohs( ulSum );
 8005bec:	b280      	uxth	r0, r0
	if( ( ( ulAlignBits & 1ul ) != 0ul ) && ( uxDataLengthBytes >= ( size_t ) 1 ) )
 8005bee:	f011 0701 	ands.w	r7, r1, #1
	xSum.u32 = FreeRTOS_ntohs( ulSum );
 8005bf2:	4603      	mov	r3, r0
	xTerm.u32 = 0ul;
 8005bf4:	f04f 0500 	mov.w	r5, #0
	ulAlignBits = ( ( ( uint32_t ) pucNextData ) & 0x03u ); /* gives 0, 1, 2, or 3 */
 8005bf8:	f001 0403 	and.w	r4, r1, #3
	if( ( ( ulAlignBits & 1ul ) != 0ul ) && ( uxDataLengthBytes >= ( size_t ) 1 ) )
 8005bfc:	d005      	beq.n	8005c0a <usGenerateChecksum+0x26>
 8005bfe:	b122      	cbz	r2, 8005c0a <usGenerateChecksum+0x26>
		xTerm.u8[ 1 ] = *( xSource.u8ptr );
 8005c00:	f811 6b01 	ldrb.w	r6, [r1], #1
		uxDataLengthBytes--;
 8005c04:	3a01      	subs	r2, #1
		xTerm.u8[ 1 ] = *( xSource.u8ptr );
 8005c06:	f366 250f 	bfi	r5, r6, #8, #8
	if( ( ( ulAlignBits == 1u ) || ( ulAlignBits == 2u ) ) && ( uxDataLengthBytes >= 2u ) )
 8005c0a:	3c01      	subs	r4, #1
 8005c0c:	2c01      	cmp	r4, #1
 8005c0e:	d805      	bhi.n	8005c1c <usGenerateChecksum+0x38>
 8005c10:	2a01      	cmp	r2, #1
		xSum.u32 += *(xSource.u16ptr);
 8005c12:	bf82      	ittt	hi
 8005c14:	f831 3b02 	ldrhhi.w	r3, [r1], #2
		uxDataLengthBytes -= 2u;
 8005c18:	3a02      	subhi	r2, #2
		xSum.u32 += *(xSource.u16ptr);
 8005c1a:	181b      	addhi	r3, r3, r0
	xLastSource.u32ptr = ( xSource.u32ptr + ( uxDataLengthBytes / 4u ) ) - 3u;
 8005c1c:	f022 0e03 	bic.w	lr, r2, #3
 8005c20:	f1ae 0e0c 	sub.w	lr, lr, #12
	while( xSource.u32ptr < xLastSource.u32ptr )
 8005c24:	f04f 0c00 	mov.w	ip, #0
	xLastSource.u32ptr = ( xSource.u32ptr + ( uxDataLengthBytes / 4u ) ) - 3u;
 8005c28:	448e      	add	lr, r1
 8005c2a:	4618      	mov	r0, r3
uint32_t ulAlignBits, ulCarry = 0ul;
 8005c2c:	4664      	mov	r4, ip
	while( xSource.u32ptr < xLastSource.u32ptr )
 8005c2e:	458e      	cmp	lr, r1
 8005c30:	460e      	mov	r6, r1
 8005c32:	d82b      	bhi.n	8005c8c <usGenerateChecksum+0xa8>
 8005c34:	f1bc 0f00 	cmp.w	ip, #0
 8005c38:	bf18      	it	ne
 8005c3a:	4603      	movne	r3, r0
	xSum.u32 = ( uint32_t )xSum.u16[ 0 ] + xSum.u16[ 1 ] + ulCarry;
 8005c3c:	0c18      	lsrs	r0, r3, #16
 8005c3e:	fa10 f383 	uxtah	r3, r0, r3
 8005c42:	4423      	add	r3, r4
	xLastSource.u8ptr = ( uint8_t * ) ( xSource.u8ptr + ( uxDataLengthBytes & ~( ( size_t ) 1 ) ) );
 8005c44:	f002 000e 	and.w	r0, r2, #14
	xSum.u32 = ( uint32_t )xSum.u16[ 0 ] + xSum.u16[ 1 ] + ulCarry;
 8005c48:	4619      	mov	r1, r3
	xLastSource.u8ptr = ( uint8_t * ) ( xSource.u8ptr + ( uxDataLengthBytes & ~( ( size_t ) 1 ) ) );
 8005c4a:	4430      	add	r0, r6
	while( xSource.u16ptr < xLastSource.u16ptr )
 8005c4c:	2400      	movs	r4, #0
 8005c4e:	42b0      	cmp	r0, r6
 8005c50:	d830      	bhi.n	8005cb4 <usGenerateChecksum+0xd0>
 8005c52:	2c00      	cmp	r4, #0
 8005c54:	bf18      	it	ne
 8005c56:	460b      	movne	r3, r1
	if( ( uxDataLengthBytes & ( size_t ) 1 ) != 0u )	/* Maybe one more ? */
 8005c58:	07d2      	lsls	r2, r2, #31
		xTerm.u8[ 0 ] = xSource.u8ptr[ 0 ];
 8005c5a:	bf44      	itt	mi
 8005c5c:	7832      	ldrbmi	r2, [r6, #0]
 8005c5e:	f362 0507 	bfimi	r5, r2, #0, #8
	xSum.u32 += xTerm.u32;
 8005c62:	442b      	add	r3, r5
	xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
 8005c64:	0c1a      	lsrs	r2, r3, #16
 8005c66:	fa12 f383 	uxtah	r3, r2, r3
	xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
 8005c6a:	0c18      	lsrs	r0, r3, #16
 8005c6c:	fa10 f383 	uxtah	r3, r0, r3
	if( ( ulAlignBits & 1u ) != 0u )
 8005c70:	b127      	cbz	r7, 8005c7c <usGenerateChecksum+0x98>
		xSum.u32 = ( ( xSum.u32 & 0xffu ) << 8 ) | ( ( xSum.u32 & 0xff00u ) >> 8 );
 8005c72:	0218      	lsls	r0, r3, #8
 8005c74:	b280      	uxth	r0, r0
 8005c76:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005c7a:	4303      	orrs	r3, r0
	return FreeRTOS_htons( ( (uint16_t) xSum.u32 ) );
 8005c7c:	4810      	ldr	r0, [pc, #64]	; (8005cc0 <usGenerateChecksum+0xdc>)
 8005c7e:	ea00 2003 	and.w	r0, r0, r3, lsl #8
 8005c82:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005c86:	4318      	orrs	r0, r3
}
 8005c88:	b280      	uxth	r0, r0
 8005c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xSum2.u32 = xSum.u32 + xSource.u32ptr[ 0 ];
 8005c8c:	680e      	ldr	r6, [r1, #0]
		if( xSum2.u32 < xSum.u32 )
 8005c8e:	1980      	adds	r0, r0, r6
		if( xSum2.u32 > xSum.u32 )
 8005c90:	684e      	ldr	r6, [r1, #4]
			ulCarry++;
 8005c92:	bf28      	it	cs
 8005c94:	3401      	addcs	r4, #1
		if( xSum2.u32 > xSum.u32 )
 8005c96:	1980      	adds	r0, r0, r6
		xSum2.u32 = xSum.u32 + xSource.u32ptr[ 2 ];
 8005c98:	688e      	ldr	r6, [r1, #8]
			ulCarry++;
 8005c9a:	bf28      	it	cs
 8005c9c:	3401      	addcs	r4, #1
		if( xSum2.u32 < xSum.u32 )
 8005c9e:	1980      	adds	r0, r0, r6
		xSum.u32 = xSum2.u32 + xSource.u32ptr[ 3 ];
 8005ca0:	68ce      	ldr	r6, [r1, #12]
			ulCarry++;
 8005ca2:	bf28      	it	cs
 8005ca4:	3401      	addcs	r4, #1
		if( xSum2.u32 > xSum.u32 )
 8005ca6:	1980      	adds	r0, r0, r6
			ulCarry++;
 8005ca8:	bf28      	it	cs
 8005caa:	3401      	addcs	r4, #1
 8005cac:	3110      	adds	r1, #16
 8005cae:	f04f 0c01 	mov.w	ip, #1
 8005cb2:	e7bc      	b.n	8005c2e <usGenerateChecksum+0x4a>
		xSum.u32 += xSource.u16ptr[ 0 ];
 8005cb4:	f836 4b02 	ldrh.w	r4, [r6], #2
 8005cb8:	4421      	add	r1, r4
 8005cba:	2401      	movs	r4, #1
 8005cbc:	e7c7      	b.n	8005c4e <usGenerateChecksum+0x6a>
 8005cbe:	bf00      	nop
 8005cc0:	00ffff00 	.word	0x00ffff00

08005cc4 <usGenerateProtocolChecksum>:
    if( uxBufferLength < sizeof( IPPacket_t ) )
 8005cc4:	2921      	cmp	r1, #33	; 0x21
{
 8005cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc8:	4615      	mov	r5, r2
    if( uxBufferLength < sizeof( IPPacket_t ) )
 8005cca:	d802      	bhi.n	8005cd2 <usGenerateProtocolChecksum+0xe>
        return ipINVALID_LENGTH;
 8005ccc:	f241 2034 	movw	r0, #4660	; 0x1234
 8005cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uxIPHeaderLength = ( UBaseType_t ) 
 8005cd2:	7b83      	ldrb	r3, [r0, #14]
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	009b      	lsls	r3, r3, #2
    if( uxBufferLength < sizeof( IPPacket_t ) + uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER )
 8005cda:	f103 020e 	add.w	r2, r3, #14
 8005cde:	4291      	cmp	r1, r2
 8005ce0:	d3f4      	bcc.n	8005ccc <usGenerateProtocolChecksum+0x8>
    if( uxBufferLength < FreeRTOS_ntohs( pxIPPacket->xIPHeader.usLength ) )
 8005ce2:	8a04      	ldrh	r4, [r0, #16]
 8005ce4:	0a22      	lsrs	r2, r4, #8
 8005ce6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8005cea:	b292      	uxth	r2, r2
 8005cec:	4291      	cmp	r1, r2
 8005cee:	d3ed      	bcc.n	8005ccc <usGenerateProtocolChecksum+0x8>
    ucProtocol = pxIPPacket->xIPHeader.ucProtocol; 
 8005cf0:	7dc6      	ldrb	r6, [r0, #23]
    pxProtPack = ( ProtocolPacket_t * ) ( pucEthernetBuffer + ( uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ) );
 8005cf2:	f1a3 0714 	sub.w	r7, r3, #20
	if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 8005cf6:	2e11      	cmp	r6, #17
    pxProtPack = ( ProtocolPacket_t * ) ( pucEthernetBuffer + ( uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ) );
 8005cf8:	4407      	add	r7, r0
	if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 8005cfa:	d12f      	bne.n	8005d5c <usGenerateProtocolChecksum+0x98>
        if( uxBufferLength < uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER )
 8005cfc:	f103 0216 	add.w	r2, r3, #22
 8005d00:	4291      	cmp	r1, r2
 8005d02:	d3e3      	bcc.n	8005ccc <usGenerateProtocolChecksum+0x8>
		pusChecksum = ( uint16_t * ) ( &( pxProtPack->xUDPPacket.xUDPHeader.usChecksum ) );
 8005d04:	f107 0428 	add.w	r4, r7, #40	; 0x28
	if( xOutgoingPacket != pdFALSE )
 8005d08:	2d00      	cmp	r5, #0
 8005d0a:	d03a      	beq.n	8005d82 <usGenerateProtocolChecksum+0xbe>
		*( pusChecksum ) = 0u;
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	8022      	strh	r2, [r4, #0]
		( FreeRTOS_ntohs( pxIPPacket->xIPHeader.usLength ) - ( ( uint16_t ) uxIPHeaderLength ) ); /* normally minus 20 */
 8005d10:	8a01      	ldrh	r1, [r0, #16]
 8005d12:	0a0a      	lsrs	r2, r1, #8
 8005d14:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005d18:	b292      	uxth	r2, r2
 8005d1a:	1ad2      	subs	r2, r2, r3
	if( ( ulLength < sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ||
 8005d1c:	2a07      	cmp	r2, #7
 8005d1e:	d9d5      	bls.n	8005ccc <usGenerateProtocolChecksum+0x8>
		( ulLength > ( uint32_t )( ipconfigNETWORK_MTU - uxIPHeaderLength ) ) )
 8005d20:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
	if( ( ulLength < sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ||
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d8d1      	bhi.n	8005ccc <usGenerateProtocolChecksum+0x8>
	if( ucProtocol <= ( uint8_t ) ipPROTOCOL_IGMP )
 8005d28:	2e02      	cmp	r6, #2
		usChecksum = ( uint16_t ) ( ulLength + ( ( uint16_t ) ucProtocol ) );
 8005d2a:	bf87      	ittee	hi
 8005d2c:	1993      	addhi	r3, r2, r6
			( ~usGenerateChecksum( ( uint32_t ) usChecksum, ( uint8_t * )&( pxIPPacket->xIPHeader.ulSourceIPAddress ),
 8005d2e:	f100 011a 	addhi.w	r1, r0, #26
			( ~usGenerateChecksum( 0UL,
 8005d32:	f107 0122 	addls.w	r1, r7, #34	; 0x22
 8005d36:	2000      	movls	r0, #0
			( ~usGenerateChecksum( ( uint32_t ) usChecksum, ( uint8_t * )&( pxIPPacket->xIPHeader.ulSourceIPAddress ),
 8005d38:	bf84      	itt	hi
 8005d3a:	3208      	addhi	r2, #8
 8005d3c:	b298      	uxthhi	r0, r3
 8005d3e:	f7ff ff51 	bl	8005be4 <usGenerateChecksum>
		usChecksum = ( uint16_t )
 8005d42:	43c0      	mvns	r0, r0
 8005d44:	b280      	uxth	r0, r0
	if( xOutgoingPacket == pdFALSE )
 8005d46:	bb25      	cbnz	r5, 8005d92 <usGenerateProtocolChecksum+0xce>
			usChecksum = ( uint16_t )ipCORRECT_CRC;
 8005d48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	bf08      	it	eq
 8005d50:	4618      	moveq	r0, r3
 8005d52:	ba43      	rev16	r3, r0
 8005d54:	b298      	uxth	r0, r3
	if( xOutgoingPacket != pdFALSE )
 8005d56:	b1dd      	cbz	r5, 8005d90 <usGenerateProtocolChecksum+0xcc>
		*( pusChecksum ) = usChecksum;
 8005d58:	8023      	strh	r3, [r4, #0]
 8005d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 8005d5c:	2e06      	cmp	r6, #6
 8005d5e:	d106      	bne.n	8005d6e <usGenerateProtocolChecksum+0xaa>
        if( uxBufferLength < uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER )
 8005d60:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8005d64:	4291      	cmp	r1, r2
 8005d66:	d3b1      	bcc.n	8005ccc <usGenerateProtocolChecksum+0x8>
        pusChecksum = ( uint16_t * ) ( &( pxProtPack->xTCPPacket.xTCPHeader.usChecksum ) );
 8005d68:	f107 0432 	add.w	r4, r7, #50	; 0x32
 8005d6c:	e7cc      	b.n	8005d08 <usGenerateProtocolChecksum+0x44>
	else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 8005d6e:	1e72      	subs	r2, r6, #1
 8005d70:	2a01      	cmp	r2, #1
 8005d72:	d817      	bhi.n	8005da4 <usGenerateProtocolChecksum+0xe0>
        if( uxBufferLength < uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMP_HEADER )
 8005d74:	f103 0216 	add.w	r2, r3, #22
 8005d78:	4291      	cmp	r1, r2
 8005d7a:	d3a7      	bcc.n	8005ccc <usGenerateProtocolChecksum+0x8>
        pusChecksum = ( uint16_t * ) ( &( pxProtPack->xICMPPacket.xICMPHeader.usChecksum ) );
 8005d7c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8005d80:	e7c2      	b.n	8005d08 <usGenerateProtocolChecksum+0x44>
	else if( ( *pusChecksum == 0u ) && ( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP ) )
 8005d82:	8822      	ldrh	r2, [r4, #0]
 8005d84:	2a00      	cmp	r2, #0
 8005d86:	d1c3      	bne.n	8005d10 <usGenerateProtocolChecksum+0x4c>
 8005d88:	2e11      	cmp	r6, #17
 8005d8a:	d1c1      	bne.n	8005d10 <usGenerateProtocolChecksum+0x4c>
		return ipCORRECT_CRC;
 8005d8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8005d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( usChecksum == 0u ) && ( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP ) )
 8005d92:	2800      	cmp	r0, #0
 8005d94:	d1dd      	bne.n	8005d52 <usGenerateProtocolChecksum+0x8e>
 8005d96:	2e11      	cmp	r6, #17
 8005d98:	f04f 30ff 	mov.w	r0, #4294967295
 8005d9c:	bf18      	it	ne
 8005d9e:	2000      	movne	r0, #0
 8005da0:	b280      	uxth	r0, r0
 8005da2:	e7d6      	b.n	8005d52 <usGenerateProtocolChecksum+0x8e>
		return ipUNHANDLED_PROTOCOL;
 8005da4:	f244 3021 	movw	r0, #17185	; 0x4321
 8005da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005dac <vReturnEthernetFrame>:
{
 8005dac:	b430      	push	{r4, r5}
		pxEthernetHeader = ( EthernetHeader_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 8005dae:	6982      	ldr	r2, [r0, #24]
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8005db0:	4d08      	ldr	r5, [pc, #32]	; (8005dd4 <vReturnEthernetFrame+0x28>)
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ), sizeof( pxEthernetHeader->xDestinationAddress ) );
 8005db2:	4613      	mov	r3, r2
{
 8005db4:	4604      	mov	r4, r0
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ), sizeof( pxEthernetHeader->xDestinationAddress ) );
 8005db6:	f853 0f06 	ldr.w	r0, [r3, #6]!
 8005dba:	6010      	str	r0, [r2, #0]
 8005dbc:	8898      	ldrh	r0, [r3, #4]
 8005dbe:	8090      	strh	r0, [r2, #4]
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8005dc0:	6828      	ldr	r0, [r5, #0]
 8005dc2:	f8c2 0006 	str.w	r0, [r2, #6]
 8005dc6:	88aa      	ldrh	r2, [r5, #4]
 8005dc8:	809a      	strh	r2, [r3, #4]
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 8005dca:	4620      	mov	r0, r4
}
 8005dcc:	bc30      	pop	{r4, r5}
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 8005dce:	f7fc bc89 	b.w	80026e4 <xNetworkInterfaceOutput>
 8005dd2:	bf00      	nop
 8005dd4:	200001b4 	.word	0x200001b4

08005dd8 <prvIPTask>:
{
 8005dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pxTimer->ulReloadTime = xTime;
 8005ddc:	4db6      	ldr	r5, [pc, #728]	; (80060b8 <prvIPTask+0x2e0>)
	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 8005dde:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 80060d4 <prvIPTask+0x2fc>
{
 8005de2:	b087      	sub	sp, #28
	FreeRTOS_NetworkDown();
 8005de4:	f7ff fea2 	bl	8005b2c <FreeRTOS_NetworkDown>
	pxTimer->ulReloadTime = xTime;
 8005de8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 8005dec:	1d28      	adds	r0, r5, #4
	pxTimer->ulReloadTime = xTime;
 8005dee:	612c      	str	r4, [r5, #16]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 8005df0:	f7fe ffec 	bl	8004dcc <vTaskSetTimeOutState>
		pxTimer->bExpired = pdFALSE_UNSIGNED;
 8005df4:	782b      	ldrb	r3, [r5, #0]
	pxTimer->ulRemainingTime = xTime;
 8005df6:	60ec      	str	r4, [r5, #12]
	pxTimer->bActive = pdTRUE_UNSIGNED;
 8005df8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8005dfc:	f043 0301 	orr.w	r3, r3, #1
 8005e00:	702b      	strb	r3, [r5, #0]
	xIPTaskInitialised = pdTRUE;
 8005e02:	4bae      	ldr	r3, [pc, #696]	; (80060bc <prvIPTask+0x2e4>)
 8005e04:	2201      	movs	r2, #1
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	46c2      	mov	sl, r8
	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 8005e0a:	4650      	mov	r0, sl
 8005e0c:	f7ff fd5b 	bl	80058c6 <prvIPTimerCheck>
 8005e10:	b110      	cbz	r0, 8005e18 <prvIPTask+0x40>
		xSendEventToIPTask( eARPTimerEvent );
 8005e12:	2002      	movs	r0, #2
 8005e14:	f7ff fe9a 	bl	8005b4c <xSendEventToIPTask>
		if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0u )
 8005e18:	4ba9      	ldr	r3, [pc, #676]	; (80060c0 <prvIPTask+0x2e8>)
		if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 8005e1a:	4faa      	ldr	r7, [pc, #680]	; (80060c4 <prvIPTask+0x2ec>)
		if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0u )
 8005e1c:	6818      	ldr	r0, [r3, #0]
 8005e1e:	f7fe fbb3 	bl	8004588 <uxQueueMessagesWaiting>
 8005e22:	4604      	mov	r4, r0
		xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 8005e24:	48a4      	ldr	r0, [pc, #656]	; (80060b8 <prvIPTask+0x2e0>)
 8005e26:	f7ff fd4e 	bl	80058c6 <prvIPTimerCheck>
		if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	b103      	cbz	r3, 8005e30 <prvIPTask+0x58>
 8005e2e:	b104      	cbz	r4, 8005e32 <prvIPTask+0x5a>
		if( xCheckTCPSockets != pdFALSE )
 8005e30:	b1a0      	cbz	r0, 8005e5c <prvIPTask+0x84>
			xNextTime = xTCPTimerCheck( xWillSleep );
 8005e32:	fab4 f084 	clz	r0, r4
 8005e36:	0940      	lsrs	r0, r0, #5
 8005e38:	f000 fb3c 	bl	80064b4 <xTCPTimerCheck>
 8005e3c:	4604      	mov	r4, r0
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 8005e3e:	48a2      	ldr	r0, [pc, #648]	; (80060c8 <prvIPTask+0x2f0>)
 8005e40:	f7fe ffc4 	bl	8004dcc <vTaskSetTimeOutState>
	pxTimer->ulRemainingTime = xTime;
 8005e44:	60ec      	str	r4, [r5, #12]
 8005e46:	782b      	ldrb	r3, [r5, #0]
	if( xTime == ( TickType_t ) 0 )
 8005e48:	bb94      	cbnz	r4, 8005eb0 <prvIPTask+0xd8>
		pxTimer->bExpired = pdTRUE_UNSIGNED;
 8005e4a:	f043 0302 	orr.w	r3, r3, #2
		pxTimer->bExpired = pdFALSE_UNSIGNED;
 8005e4e:	702b      	strb	r3, [r5, #0]
	pxTimer->bActive = pdTRUE_UNSIGNED;
 8005e50:	782b      	ldrb	r3, [r5, #0]
 8005e52:	f043 0301 	orr.w	r3, r3, #1
 8005e56:	702b      	strb	r3, [r5, #0]
			xProcessedTCPMessage = 0;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	603b      	str	r3, [r7, #0]
	if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 8005e5c:	f898 3000 	ldrb.w	r3, [r8]
 8005e60:	07db      	lsls	r3, r3, #31
 8005e62:	d528      	bpl.n	8005eb6 <prvIPTask+0xde>
		if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 8005e64:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8005e68:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d822      	bhi.n	8005eb6 <prvIPTask+0xde>
			xMaximumSleepTime = xARPTimer.ulReloadTime;
 8005e70:	f8d8 3010 	ldr.w	r3, [r8, #16]
		if ( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE ) {
 8005e74:	68ea      	ldr	r2, [r5, #12]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	bf28      	it	cs
 8005e7a:	461a      	movcs	r2, r3
 8005e7c:	4b90      	ldr	r3, [pc, #576]	; (80060c0 <prvIPTask+0x2e8>)
 8005e7e:	a902      	add	r1, sp, #8
 8005e80:	6818      	ldr	r0, [r3, #0]
 8005e82:	f7fe fa1d 	bl	80042c0 <xQueueReceive>
 8005e86:	b910      	cbnz	r0, 8005e8e <prvIPTask+0xb6>
			xReceivedEvent.eEventType = eNoEvent;
 8005e88:	23ff      	movs	r3, #255	; 0xff
 8005e8a:	f88d 3008 	strb.w	r3, [sp, #8]
		switch( xReceivedEvent.eEventType )
 8005e8e:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 8005e92:	2b0a      	cmp	r3, #10
 8005e94:	d825      	bhi.n	8005ee2 <prvIPTask+0x10a>
 8005e96:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005e9a:	0011      	.short	0x0011
 8005e9c:	00f1002e 	.word	0x00f1002e
 8005ea0:	00240125 	.word	0x00240125
 8005ea4:	0132012d 	.word	0x0132012d
 8005ea8:	00f40024 	.word	0x00f40024
 8005eac:	0129010b 	.word	0x0129010b
		pxTimer->bExpired = pdFALSE_UNSIGNED;
 8005eb0:	f36f 0341 	bfc	r3, #1, #1
 8005eb4:	e7cb      	b.n	8005e4e <prvIPTask+0x76>
	xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 8005eb6:	f242 7310 	movw	r3, #10000	; 0x2710
 8005eba:	e7db      	b.n	8005e74 <prvIPTask+0x9c>
				xNetworkUp = pdFALSE;
 8005ebc:	4b83      	ldr	r3, [pc, #524]	; (80060cc <prvIPTask+0x2f4>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	601a      	str	r2, [r3, #0]
	xARPTimer.bActive = pdFALSE_UNSIGNED;
 8005ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ec6:	f362 0300 	bfi	r3, r2, #0, #1
 8005eca:	f88a 3000 	strb.w	r3, [sl]
	if( xNetworkInterfaceInitialise() != pdPASS )
 8005ece:	f7fc fbeb 	bl	80026a8 <xNetworkInterfaceInitialise>
 8005ed2:	2801      	cmp	r0, #1
 8005ed4:	d00c      	beq.n	8005ef0 <prvIPTask+0x118>
		vTaskDelay( ipINITIALISATION_RETRY_DELAY );
 8005ed6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005eda:	f7fe fe61 	bl	8004ba0 <vTaskDelay>
		FreeRTOS_NetworkDown();
 8005ede:	f7ff fe25 	bl	8005b2c <FreeRTOS_NetworkDown>
		if( xNetworkDownEventPending != pdFALSE )
 8005ee2:	4b7b      	ldr	r3, [pc, #492]	; (80060d0 <prvIPTask+0x2f8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d08f      	beq.n	8005e0a <prvIPTask+0x32>
			FreeRTOS_NetworkDown();
 8005eea:	f7ff fe1f 	bl	8005b2c <FreeRTOS_NetworkDown>
 8005eee:	e78c      	b.n	8005e0a <prvIPTask+0x32>
			vIPNetworkUpCalls();
 8005ef0:	f7ff fe60 	bl	8005bb4 <vIPNetworkUpCalls>
 8005ef4:	e7f5      	b.n	8005ee2 <prvIPTask+0x10a>
				prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 8005ef6:	9c03      	ldr	r4, [sp, #12]
	configASSERT( pxNetworkBuffer );
 8005ef8:	b944      	cbnz	r4, 8005f0c <prvIPTask+0x134>
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	e7fe      	b.n	8005f0a <prvIPTask+0x132>
    if( pxNetworkBuffer->xDataLength >= sizeof( EthernetHeader_t ) )
 8005f0c:	69e2      	ldr	r2, [r4, #28]
 8005f0e:	2a0d      	cmp	r2, #13
 8005f10:	d95e      	bls.n	8005fd0 <prvIPTask+0x1f8>
        pxEthernetHeader = ( EthernetHeader_t * )( pxNetworkBuffer->pucEthernetBuffer );
 8005f12:	69a6      	ldr	r6, [r4, #24]
            switch( pxEthernetHeader->usFrameType )
 8005f14:	89b3      	ldrh	r3, [r6, #12]
 8005f16:	2b08      	cmp	r3, #8
 8005f18:	d00b      	beq.n	8005f32 <prvIPTask+0x15a>
 8005f1a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8005f1e:	d157      	bne.n	8005fd0 <prvIPTask+0x1f8>
                if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 8005f20:	2a29      	cmp	r2, #41	; 0x29
 8005f22:	d955      	bls.n	8005fd0 <prvIPTask+0x1f8>
                    eReturned = eARPProcessPacket( ( ARPPacket_t * )pxNetworkBuffer->pucEthernetBuffer );
 8005f24:	4630      	mov	r0, r6
 8005f26:	f7ff f9ef 	bl	8005308 <eARPProcessPacket>
	switch( eReturned )
 8005f2a:	2802      	cmp	r0, #2
 8005f2c:	d074      	beq.n	8006018 <prvIPTask+0x240>
 8005f2e:	2803      	cmp	r0, #3
 8005f30:	e095      	b.n	800605e <prvIPTask+0x286>
                if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 8005f32:	2a21      	cmp	r2, #33	; 0x21
 8005f34:	d94c      	bls.n	8005fd0 <prvIPTask+0x1f8>
UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0x0Fu ) << 2 );
 8005f36:	7bb0      	ldrb	r0, [r6, #14]
 8005f38:	0081      	lsls	r1, r0, #2
 8005f3a:	f001 013c 	and.w	r1, r1, #60	; 0x3c
    if( uxHeaderLength > pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ||
 8005f3e:	f1a2 030e 	sub.w	r3, r2, #14
 8005f42:	4299      	cmp	r1, r3
 8005f44:	d844      	bhi.n	8005fd0 <prvIPTask+0x1f8>
 8005f46:	2913      	cmp	r1, #19
 8005f48:	d942      	bls.n	8005fd0 <prvIPTask+0x1f8>
			if( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U )
 8005f4a:	f8b6 e014 	ldrh.w	lr, [r6, #20]
	ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8005f4e:	f896 9017 	ldrb.w	r9, [r6, #23]
		uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 8005f52:	f8d6 301e 	ldr.w	r3, [r6, #30]
			if( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U )
 8005f56:	f02e 0ef0 	bic.w	lr, lr, #240	; 0xf0
 8005f5a:	f1be 0f00 	cmp.w	lr, #0
 8005f5e:	d137      	bne.n	8005fd0 <prvIPTask+0x1f8>
			else if( ( pxIPHeader->ucVersionHeaderLength < 0x45u ) || ( pxIPHeader->ucVersionHeaderLength > 0x4Fu ) )
 8005f60:	3845      	subs	r0, #69	; 0x45
 8005f62:	280a      	cmp	r0, #10
 8005f64:	d834      	bhi.n	8005fd0 <prvIPTask+0x1f8>
			else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
 8005f66:	f8df b170 	ldr.w	fp, [pc, #368]	; 80060d8 <prvIPTask+0x300>
 8005f6a:	f8db 0014 	ldr.w	r0, [fp, #20]
 8005f6e:	4283      	cmp	r3, r0
 8005f70:	d00d      	beq.n	8005f8e <prvIPTask+0x1b6>
 8005f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f76:	d00a      	beq.n	8005f8e <prvIPTask+0x1b6>
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 8005f78:	f8df e160 	ldr.w	lr, [pc, #352]	; 80060dc <prvIPTask+0x304>
				( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
 8005f7c:	f8de e010 	ldr.w	lr, [lr, #16]
 8005f80:	4573      	cmp	r3, lr
 8005f82:	d004      	beq.n	8005f8e <prvIPTask+0x1b6>
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 8005f84:	f8df e158 	ldr.w	lr, [pc, #344]	; 80060e0 <prvIPTask+0x308>
 8005f88:	4573      	cmp	r3, lr
 8005f8a:	d000      	beq.n	8005f8e <prvIPTask+0x1b6>
				( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
 8005f8c:	bb00      	cbnz	r0, 8005fd0 <prvIPTask+0x1f8>
		if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 8005f8e:	2914      	cmp	r1, #20
 8005f90:	d010      	beq.n	8005fb4 <prvIPTask+0x1dc>
			const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 8005f92:	f1a1 0314 	sub.w	r3, r1, #20
			const size_t  xMoveLen = pxNetworkBuffer->xDataLength - optlen - ipSIZE_OF_IPv4_HEADER - ipSIZE_OF_ETH_HEADER;
 8005f96:	3a22      	subs	r2, #34	; 0x22
			uint8_t *pucSource = ( uint8_t* )(pxNetworkBuffer->pucEthernetBuffer + sizeof( EthernetHeader_t ) + uxHeaderLength);
 8005f98:	310e      	adds	r1, #14
			memmove( pucTarget, pucSource, xMoveLen );
 8005f9a:	1ad2      	subs	r2, r2, r3
 8005f9c:	4431      	add	r1, r6
 8005f9e:	f106 0022 	add.w	r0, r6, #34	; 0x22
 8005fa2:	9301      	str	r3, [sp, #4]
 8005fa4:	f002 fcb8 	bl	8008918 <memmove>
			pxNetworkBuffer->xDataLength -= optlen;
 8005fa8:	69e2      	ldr	r2, [r4, #28]
 8005faa:	9b01      	ldr	r3, [sp, #4]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	61e3      	str	r3, [r4, #28]
            pxIPHeader->ucVersionHeaderLength =
 8005fb0:	2345      	movs	r3, #69	; 0x45
 8005fb2:	73b3      	strb	r3, [r6, #14]
		if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 8005fb4:	f1b9 0f11 	cmp.w	r9, #17
 8005fb8:	d033      	beq.n	8006022 <prvIPTask+0x24a>
			vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 8005fba:	f8d6 101a 	ldr.w	r1, [r6, #26]
 8005fbe:	1db0      	adds	r0, r6, #6
 8005fc0:	f7ff f924 	bl	800520c <vARPRefreshCacheEntry>
		switch( ucProtocol )
 8005fc4:	f1b9 0f01 	cmp.w	r9, #1
 8005fc8:	d006      	beq.n	8005fd8 <prvIPTask+0x200>
 8005fca:	f1b9 0f06 	cmp.w	r9, #6
 8005fce:	d049      	beq.n	8006064 <prvIPTask+0x28c>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f002 fa6d 	bl	80084b0 <vReleaseNetworkBufferAndDescriptor>
 8005fd6:	e784      	b.n	8005ee2 <prvIPTask+0x10a>
                    if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 8005fd8:	69e3      	ldr	r3, [r4, #28]
 8005fda:	2b29      	cmp	r3, #41	; 0x29
 8005fdc:	d9f8      	bls.n	8005fd0 <prvIPTask+0x1f8>
                        if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 8005fde:	f8d6 201e 	ldr.w	r2, [r6, #30]
 8005fe2:	f8db 1014 	ldr.w	r1, [fp, #20]
                        ICMPPacket_t *pxICMPPacket = ( ICMPPacket_t * )( pxNetworkBuffer->pucEthernetBuffer );
 8005fe6:	69a3      	ldr	r3, [r4, #24]
                        if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 8005fe8:	428a      	cmp	r2, r1
 8005fea:	d1f1      	bne.n	8005fd0 <prvIPTask+0x1f8>
		switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 8005fec:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8005ff0:	2908      	cmp	r1, #8
 8005ff2:	d1ed      	bne.n	8005fd0 <prvIPTask+0x1f8>
		pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8005ffa:	f8d3 101a 	ldr.w	r1, [r3, #26]
		pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8005ffe:	f8c3 201a 	str.w	r2, [r3, #26]
		if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFu - usRequest ) )
 8006002:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8006004:	f8c3 101e 	str.w	r1, [r3, #30]
		if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFu - usRequest ) )
 8006008:	f64f 71f6 	movw	r1, #65526	; 0xfff6
 800600c:	428a      	cmp	r2, r1
			pxICMPHeader->usChecksum = ( uint16_t )
 800600e:	bf8c      	ite	hi
 8006010:	f502 7284 	addhi.w	r2, r2, #264	; 0x108
			pxICMPHeader->usChecksum = ( uint16_t )
 8006014:	3208      	addls	r2, #8
 8006016:	849a      	strh	r2, [r3, #36]	; 0x24
			vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 8006018:	2101      	movs	r1, #1
 800601a:	4620      	mov	r0, r4
 800601c:	f7ff fec6 	bl	8005dac <vReturnEthernetFrame>
 8006020:	e75f      	b.n	8005ee2 <prvIPTask+0x10a>
                    if ( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) )
 8006022:	69e1      	ldr	r1, [r4, #28]
					UDPPacket_t *pxUDPPacket = ( UDPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 8006024:	69a2      	ldr	r2, [r4, #24]
                    if ( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) )
 8006026:	2929      	cmp	r1, #41	; 0x29
 8006028:	d9d2      	bls.n	8005fd0 <prvIPTask+0x1f8>
                        pxNetworkBuffer->xDataLength -= sizeof( UDPPacket_t );
 800602a:	392a      	subs	r1, #42	; 0x2a
 800602c:	61e1      	str	r1, [r4, #28]
                        if( ( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength ) - sizeof( UDPHeader_t ) ) <
 800602e:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8006030:	0a03      	lsrs	r3, r0, #8
 8006032:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006036:	b29b      	uxth	r3, r3
 8006038:	3b08      	subs	r3, #8
 800603a:	4299      	cmp	r1, r3
                            pxNetworkBuffer->xDataLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength ) - 
 800603c:	bf88      	it	hi
 800603e:	61e3      	strhi	r3, [r4, #28]
                        pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
 8006040:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 8006044:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8006048:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800604c:	8423      	strh	r3, [r4, #32]
                        pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 800604e:	f8d2 301a 	ldr.w	r3, [r2, #26]
 8006052:	6163      	str	r3, [r4, #20]
                        if( xProcessReceivedUDPPacket( pxNetworkBuffer, 
 8006054:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8006056:	4620      	mov	r0, r4
 8006058:	f002 f9a6 	bl	80083a8 <xProcessReceivedUDPPacket>
 800605c:	2801      	cmp	r0, #1
	switch( eReturned )
 800605e:	f43f af40 	beq.w	8005ee2 <prvIPTask+0x10a>
 8006062:	e7b5      	b.n	8005fd0 <prvIPTask+0x1f8>
					if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 8006064:	4620      	mov	r0, r4
 8006066:	f001 f8d7 	bl	8007218 <xProcessReceivedTCPPacket>
					xProcessedTCPMessage++;
 800606a:	683b      	ldr	r3, [r7, #0]
						eReturn = eFrameConsumed;
 800606c:	2801      	cmp	r0, #1
					xProcessedTCPMessage++;
 800606e:	f103 0301 	add.w	r3, r3, #1
						eReturn = eFrameConsumed;
 8006072:	bf14      	ite	ne
 8006074:	2001      	movne	r0, #1
 8006076:	2003      	moveq	r0, #3
					xProcessedTCPMessage++;
 8006078:	603b      	str	r3, [r7, #0]
 800607a:	e756      	b.n	8005f2a <prvIPTask+0x152>
				vARPAgeCache();
 800607c:	f7ff fa0c 	bl	8005498 <vARPAgeCache>
				break;
 8006080:	e72f      	b.n	8005ee2 <prvIPTask+0x10a>
				pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 8006082:	9c03      	ldr	r4, [sp, #12]
				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 8006084:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8006086:	0a0a      	lsrs	r2, r1, #8
				xAddress.sin_addr = 0u;	/* For the moment. */
 8006088:	2300      	movs	r3, #0
				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 800608a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800608e:	f8ad 2012 	strh.w	r2, [sp, #18]
				pxSocket->usLocalPort = 0u;
 8006092:	84a3      	strh	r3, [r4, #36]	; 0x24
				vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8006094:	2208      	movs	r2, #8
 8006096:	a904      	add	r1, sp, #16
 8006098:	4620      	mov	r0, r4
				xAddress.sin_addr = 0u;	/* For the moment. */
 800609a:	9305      	str	r3, [sp, #20]
				vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 800609c:	f000 f90e 	bl	80062bc <vSocketBind>
				pxSocket->xEventBits |= eSOCKET_BOUND;
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	f043 0310 	orr.w	r3, r3, #16
						pxSocket->xEventBits |= eSOCKET_ACCEPT;
 80060a6:	6023      	str	r3, [r4, #0]
						vSocketWakeUpUser( pxSocket );
 80060a8:	4620      	mov	r0, r4
 80060aa:	f000 f9e9 	bl	8006480 <vSocketWakeUpUser>
 80060ae:	e718      	b.n	8005ee2 <prvIPTask+0x10a>
				vSocketClose( ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData ) );
 80060b0:	9803      	ldr	r0, [sp, #12]
 80060b2:	f000 f981 	bl	80063b8 <vSocketClose>
				break;
 80060b6:	e714      	b.n	8005ee2 <prvIPTask+0x10a>
 80060b8:	20004eac 	.word	0x20004eac
 80060bc:	20004e84 	.word	0x20004e84
 80060c0:	20004ea0 	.word	0x20004ea0
 80060c4:	20004ea8 	.word	0x20004ea8
 80060c8:	20004eb0 	.word	0x20004eb0
 80060cc:	20004ea4 	.word	0x20004ea4
 80060d0:	20004e9c 	.word	0x20004e9c
 80060d4:	20004e58 	.word	0x20004e58
 80060d8:	200001b4 	.word	0x200001b4
 80060dc:	20004e88 	.word	0x20004e88
 80060e0:	fc0000e0 	.word	0xfc0000e0
				vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 80060e4:	9803      	ldr	r0, [sp, #12]
 80060e6:	f002 f8f3 	bl	80082d0 <vProcessGeneratedUDPPacket>
				break;
 80060ea:	e6fa      	b.n	8005ee2 <prvIPTask+0x10a>
					vSocketSelect( ( SocketSelect_t * ) ( xReceivedEvent.pvData ) );
 80060ec:	9803      	ldr	r0, [sp, #12]
 80060ee:	f000 facb 	bl	8006688 <vSocketSelect>
				break;
 80060f2:	e6f6      	b.n	8005ee2 <prvIPTask+0x10a>
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 80060f4:	782b      	ldrb	r3, [r5, #0]
 80060f6:	f043 0302 	orr.w	r3, r3, #2
 80060fa:	702b      	strb	r3, [r5, #0]
				break;
 80060fc:	e6f1      	b.n	8005ee2 <prvIPTask+0x10a>
					pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 80060fe:	9c03      	ldr	r4, [sp, #12]
					if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 8006100:	4620      	mov	r0, r4
 8006102:	f001 fd59 	bl	8007bb8 <xTCPCheckNewClient>
 8006106:	2800      	cmp	r0, #0
 8006108:	f43f aeeb 	beq.w	8005ee2 <prvIPTask+0x10a>
						pxSocket->xEventBits |= eSOCKET_ACCEPT;
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	f043 0304 	orr.w	r3, r3, #4
 8006112:	e7c8      	b.n	80060a6 <prvIPTask+0x2ce>

08006114 <xIPIsNetworkTaskReady>:
}
 8006114:	4b01      	ldr	r3, [pc, #4]	; (800611c <xIPIsNetworkTaskReady+0x8>)
 8006116:	6818      	ldr	r0, [r3, #0]
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	20004e84 	.word	0x20004e84

08006120 <uxStreamBufferGetSize>:
static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper )
{
/* Returns the distance between uxLower and uxUpper */
size_t uxCount;

	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8006120:	6902      	ldr	r2, [r0, #16]
static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer )
{
/* Returns the number of items which can be read from uxTail
before reaching uxHead */
size_t uxHead = pxBuffer->uxHead;
 8006122:	6883      	ldr	r3, [r0, #8]
size_t uxTail = pxBuffer->uxTail;
 8006124:	6801      	ldr	r1, [r0, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8006126:	1898      	adds	r0, r3, r2
 8006128:	1a40      	subs	r0, r0, r1
	if ( uxCount >= pxBuffer->LENGTH )
 800612a:	4282      	cmp	r2, r0
		uxCount -= pxBuffer->LENGTH;
 800612c:	bf98      	it	ls
 800612e:	1a80      	subls	r0, r0, r2

	return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
}
 8006130:	4770      	bx	lr

08006132 <pxListFindListItemWithValue>:
/*-----------------------------------------------------------*/

/* pxListFindListItemWithValue: find a list item in a bound socket list
'xWantedItemValue' refers to a port number */
static const ListItem_t * pxListFindListItemWithValue( const List_t *pxList, TickType_t xWantedItemValue )
{
 8006132:	b538      	push	{r3, r4, r5, lr}
 8006134:	4604      	mov	r4, r0
 8006136:	460d      	mov	r5, r1
const ListItem_t * pxResult = NULL;

	if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 8006138:	f7ff ffec 	bl	8006114 <xIPIsNetworkTaskReady>
 800613c:	b168      	cbz	r0, 800615a <pxListFindListItemWithValue+0x28>
 800613e:	b15c      	cbz	r4, 8006158 <pxListFindListItemWithValue+0x26>
	{
		const ListItem_t *pxIterator;
		const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( pxList );
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 8006140:	68e0      	ldr	r0, [r4, #12]
		const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( pxList );
 8006142:	f104 0308 	add.w	r3, r4, #8
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 8006146:	4298      	cmp	r0, r3
 8006148:	d101      	bne.n	800614e <pxListFindListItemWithValue+0x1c>
const ListItem_t * pxResult = NULL;
 800614a:	2000      	movs	r0, #0
 800614c:	bd38      	pop	{r3, r4, r5, pc}
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800614e:	6802      	ldr	r2, [r0, #0]
 8006150:	42aa      	cmp	r2, r5
 8006152:	d002      	beq.n	800615a <pxListFindListItemWithValue+0x28>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8006154:	6840      	ldr	r0, [r0, #4]
 8006156:	e7f6      	b.n	8006146 <pxListFindListItemWithValue+0x14>
const ListItem_t * pxResult = NULL;
 8006158:	4620      	mov	r0, r4
			}
		}
	}

	return pxResult;
} /* Tested */
 800615a:	bd38      	pop	{r3, r4, r5, pc}

0800615c <uxStreamBufferGetSpace>:
size_t uxHead = pxBuffer->uxHead;
 800615c:	6881      	ldr	r1, [r0, #8]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800615e:	6902      	ldr	r2, [r0, #16]
size_t uxTail = pxBuffer->uxTail;
 8006160:	6803      	ldr	r3, [r0, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 8006162:	1898      	adds	r0, r3, r2
 8006164:	3801      	subs	r0, #1
 8006166:	1a40      	subs	r0, r0, r1
	if( uxCount >= pxBuffer->LENGTH )
 8006168:	4282      	cmp	r2, r0
		uxCount -= pxBuffer->LENGTH;
 800616a:	bf98      	it	ls
 800616c:	1a80      	subls	r0, r0, r2
}
 800616e:	4770      	bx	lr

08006170 <vNetworkSocketsInit>:
{
 8006170:	b508      	push	{r3, lr}
    vListInitialise( &xBoundUDPSocketsList );
 8006172:	4804      	ldr	r0, [pc, #16]	; (8006184 <vNetworkSocketsInit+0x14>)
 8006174:	f7fd fb9d 	bl	80038b2 <vListInitialise>
        vListInitialise( &xBoundTCPSocketsList );
 8006178:	4803      	ldr	r0, [pc, #12]	; (8006188 <vNetworkSocketsInit+0x18>)
 800617a:	f7fd fb9a 	bl	80038b2 <vListInitialise>
}
 800617e:	2001      	movs	r0, #1
 8006180:	bd08      	pop	{r3, pc}
 8006182:	bf00      	nop
 8006184:	2000699c 	.word	0x2000699c
 8006188:	20006988 	.word	0x20006988

0800618c <FreeRTOS_socket>:
{
 800618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618e:	4606      	mov	r6, r0
 8006190:	460c      	mov	r4, r1
 8006192:	4615      	mov	r5, r2
	if( xIPIsNetworkTaskReady() == pdFALSE )
 8006194:	f7ff ffbe 	bl	8006114 <xIPIsNetworkTaskReady>
 8006198:	b910      	cbnz	r0, 80061a0 <FreeRTOS_socket+0x14>
			pxSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
 800619a:	f04f 30ff 	mov.w	r0, #4294967295
 800619e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		configASSERT( xDomain == FREERTOS_AF_INET );
 80061a0:	2e02      	cmp	r6, #2
 80061a2:	d008      	beq.n	80061b6 <FreeRTOS_socket+0x2a>
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	e7fe      	b.n	80061b4 <FreeRTOS_socket+0x28>
		configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 80061b6:	4b3f      	ldr	r3, [pc, #252]	; (80062b4 <FreeRTOS_socket+0x128>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	3301      	adds	r3, #1
 80061bc:	d008      	beq.n	80061d0 <FreeRTOS_socket+0x44>
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	e7fe      	b.n	80061ce <FreeRTOS_socket+0x42>
			configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 80061d0:	4b39      	ldr	r3, [pc, #228]	; (80062b8 <FreeRTOS_socket+0x12c>)
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	3301      	adds	r3, #1
 80061d6:	d008      	beq.n	80061ea <FreeRTOS_socket+0x5e>
 80061d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	e7fe      	b.n	80061e8 <FreeRTOS_socket+0x5c>
		if( xProtocol == FREERTOS_IPPROTO_UDP )
 80061ea:	2d11      	cmp	r5, #17
 80061ec:	d10a      	bne.n	8006204 <FreeRTOS_socket+0x78>
			if( xType != FREERTOS_SOCK_DGRAM )
 80061ee:	2c02      	cmp	r4, #2
 80061f0:	d04c      	beq.n	800628c <FreeRTOS_socket+0x100>
 80061f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	e7fe      	b.n	8006202 <FreeRTOS_socket+0x76>
		else if( xProtocol == FREERTOS_IPPROTO_TCP )
 8006204:	2d06      	cmp	r5, #6
 8006206:	d10a      	bne.n	800621e <FreeRTOS_socket+0x92>
			if( xType != FREERTOS_SOCK_STREAM )
 8006208:	2c01      	cmp	r4, #1
 800620a:	d050      	beq.n	80062ae <FreeRTOS_socket+0x122>
 800620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	e7fe      	b.n	800621c <FreeRTOS_socket+0x90>
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	e7fe      	b.n	800622e <FreeRTOS_socket+0xa2>
			memset( pxSocket, '\0', uxSocketSize );
 8006230:	4632      	mov	r2, r6
 8006232:	2100      	movs	r1, #0
 8006234:	4620      	mov	r0, r4
 8006236:	f002 fb89 	bl	800894c <memset>
			if( xProtocol == FREERTOS_IPPROTO_UDP )
 800623a:	2d11      	cmp	r5, #17
			pxSocket->xEventGroup = xEventGroup;
 800623c:	6067      	str	r7, [r4, #4]
			if( xProtocol == FREERTOS_IPPROTO_UDP )
 800623e:	d103      	bne.n	8006248 <FreeRTOS_socket+0xbc>
				vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 8006240:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8006244:	f7fd fb35 	bl	80038b2 <vListInitialise>
			vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 8006248:	f104 0008 	add.w	r0, r4, #8
 800624c:	f7fd fb3c 	bl	80038c8 <vListInitialiseItem>
			pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 8006250:	f241 3388 	movw	r3, #5000	; 0x1388
 8006254:	61e3      	str	r3, [r4, #28]
			pxSocket->xSendBlockTime    = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 8006256:	6223      	str	r3, [r4, #32]
				if( xProtocol == FREERTOS_IPPROTO_TCP )
 8006258:	2d06      	cmp	r5, #6
			pxSocket->ucSocketOptions   = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800625a:	f04f 0302 	mov.w	r3, #2
			listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800625e:	6164      	str	r4, [r4, #20]
			pxSocket->ucSocketOptions   = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 8006260:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			pxSocket->ucProtocol        = ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 8006264:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
				if( xProtocol == FREERTOS_IPPROTO_TCP )
 8006268:	d10e      	bne.n	8006288 <FreeRTOS_socket+0xfc>
					pxSocket->u.xTCP.usInitMSS    = pxSocket->u.xTCP.usCurMSS = ipconfigTCP_MSS;
 800626a:	f44f 6391 	mov.w	r3, #1160	; 0x488
 800626e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 8006272:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
					pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 8006276:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
					pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800627a:	6723      	str	r3, [r4, #112]	; 0x70
						pxSocket->u.xTCP.uxRxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2 ) / ipconfigTCP_MSS );
 800627c:	2301      	movs	r3, #1
					pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800627e:	66e2      	str	r2, [r4, #108]	; 0x6c
						pxSocket->u.xTCP.uxRxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2 ) / ipconfigTCP_MSS );
 8006280:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
						pxSocket->u.xTCP.uxTxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2 ) / ipconfigTCP_MSS );
 8006284:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8006288:	4620      	mov	r0, r4
	return xReturn;
 800628a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800628c:	264c      	movs	r6, #76	; 0x4c
		pxSocket = ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize );
 800628e:	4630      	mov	r0, r6
 8006290:	f7fd fd28 	bl	8003ce4 <pvPortMalloc>
		if( pxSocket == NULL )
 8006294:	4604      	mov	r4, r0
 8006296:	2800      	cmp	r0, #0
 8006298:	f43f af7f 	beq.w	800619a <FreeRTOS_socket+0xe>
		else if( ( xEventGroup = xEventGroupCreate() ) == NULL )
 800629c:	f7fd fa78 	bl	8003790 <xEventGroupCreate>
 80062a0:	4607      	mov	r7, r0
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d1c4      	bne.n	8006230 <FreeRTOS_socket+0xa4>
			vPortFreeSocket( pxSocket );
 80062a6:	4620      	mov	r0, r4
 80062a8:	f7fd fdae 	bl	8003e08 <vPortFree>
 80062ac:	e775      	b.n	800619a <FreeRTOS_socket+0xe>
			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 80062ae:	f44f 76d0 	mov.w	r6, #416	; 0x1a0
 80062b2:	e7ec      	b.n	800628e <FreeRTOS_socket+0x102>
 80062b4:	2000699c 	.word	0x2000699c
 80062b8:	20006988 	.word	0x20006988

080062bc <vSocketBind>:
{
 80062bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c0:	4699      	mov	r9, r3
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 80062c2:	f890 2027 	ldrb.w	r2, [r0, #39]	; 0x27
		pxSocketList = &xBoundUDPSocketsList;
 80062c6:	4b2f      	ldr	r3, [pc, #188]	; (8006384 <vSocketBind+0xc8>)
 80062c8:	4e2f      	ldr	r6, [pc, #188]	; (8006388 <vSocketBind+0xcc>)
 80062ca:	2a06      	cmp	r2, #6
 80062cc:	bf18      	it	ne
 80062ce:	461e      	movne	r6, r3
	configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 80062d0:	f1b0 3fff 	cmp.w	r0, #4294967295
{
 80062d4:	4682      	mov	sl, r0
 80062d6:	460d      	mov	r5, r1
	configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 80062d8:	d108      	bne.n	80062ec <vSocketBind+0x30>
 80062da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	e7fe      	b.n	80062ea <vSocketBind+0x2e>
		if( pxAddress == NULL )
 80062ec:	b911      	cbnz	r1, 80062f4 <vSocketBind+0x38>
			pxAddress->sin_port = 0u;
 80062ee:	f8ad 1002 	strh.w	r1, [sp, #2]
			pxAddress = &xAddress;
 80062f2:	466d      	mov	r5, sp
		if( pxAddress->sin_port == 0u )
 80062f4:	886f      	ldrh	r7, [r5, #2]
 80062f6:	b967      	cbnz	r7, 8006312 <vSocketBind+0x56>
 80062f8:	f44f 4b7c 	mov.w	fp, #64512	; 0xfc00
            socketAUTO_PORT_ALLOCATION_START_NUMBER +
 80062fc:	46d8      	mov	r8, fp
        ulRandomSeed = ipconfigRAND32( );
 80062fe:	f002 fbd9 	bl	8008ab4 <rand>
        if( 0 == ulRandomSeed )
 8006302:	b998      	cbnz	r0, 800632c <vSocketBind+0x70>
            if( pdFALSE == xGotZeroOnce )
 8006304:	b187      	cbz	r7, 8006328 <vSocketBind+0x6c>
                xGotZeroOnce = pdTRUE;
 8006306:	2400      	movs	r4, #0
			pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t )pxSocket->ucProtocol );            
 8006308:	806c      	strh	r4, [r5, #2]
            if( 0 == pxAddress->sin_port )
 800630a:	b914      	cbnz	r4, 8006312 <vSocketBind+0x56>
                return -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800630c:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8006310:	e035      	b.n	800637e <vSocketBind+0xc2>
		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 8006312:	f1b9 0f00 	cmp.w	r9, #0
 8006316:	d120      	bne.n	800635a <vSocketBind+0x9e>
			( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 8006318:	8869      	ldrh	r1, [r5, #2]
 800631a:	4630      	mov	r0, r6
 800631c:	f7ff ff09 	bl	8006132 <pxListFindListItemWithValue>
		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 8006320:	b1f8      	cbz	r0, 8006362 <vSocketBind+0xa6>
			xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 8006322:	f06f 006f 	mvn.w	r0, #111	; 0x6f
 8006326:	e02a      	b.n	800637e <vSocketBind+0xc2>
                xGotZeroOnce = pdTRUE;
 8006328:	2701      	movs	r7, #1
 800632a:	e7e8      	b.n	80062fe <vSocketBind+0x42>
            socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800632c:	b280      	uxth	r0, r0
 800632e:	fbb0 f4f8 	udiv	r4, r0, r8
 8006332:	fb08 0414 	mls	r4, r8, r4, r0
        usResult =
 8006336:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800633a:	ba64      	rev16	r4, r4
 800633c:	b2a4      	uxth	r4, r4
        if( NULL == pxListFindListItemWithValue( 
 800633e:	4621      	mov	r1, r4
 8006340:	4630      	mov	r0, r6
 8006342:	f7ff fef6 	bl	8006132 <pxListFindListItemWithValue>
 8006346:	2800      	cmp	r0, #0
 8006348:	d0de      	beq.n	8006308 <vSocketBind+0x4c>
        usIterations--;
 800634a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800634e:	fa1f fb8b 	uxth.w	fp, fp
    while( usIterations > 0 );
 8006352:	f1bb 0f00 	cmp.w	fp, #0
 8006356:	d1d2      	bne.n	80062fe <vSocketBind+0x42>
 8006358:	e7d5      	b.n	8006306 <vSocketBind+0x4a>
		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800635a:	f89a 3027 	ldrb.w	r3, [sl, #39]	; 0x27
 800635e:	2b06      	cmp	r3, #6
 8006360:	d1da      	bne.n	8006318 <vSocketBind+0x5c>
			socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 8006362:	886a      	ldrh	r2, [r5, #2]
 8006364:	f8ca 2008 	str.w	r2, [sl, #8]
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 8006368:	0a13      	lsrs	r3, r2, #8
 800636a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800636e:	4630      	mov	r0, r6
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 8006370:	f8aa 3024 	strh.w	r3, [sl, #36]	; 0x24
				vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 8006374:	f10a 0108 	add.w	r1, sl, #8
 8006378:	f7fd faa9 	bl	80038ce <vListInsertEnd>
BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800637c:	2000      	movs	r0, #0
} /* Tested */
 800637e:	b003      	add	sp, #12
 8006380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006384:	2000699c 	.word	0x2000699c
 8006388:	20006988 	.word	0x20006988

0800638c <FreeRTOS_closesocket>:
{
 800638c:	b507      	push	{r0, r1, r2, lr}
xCloseEvent.pvData = ( void * ) xSocket;
 800638e:	9001      	str	r0, [sp, #4]
	if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 8006390:	3801      	subs	r0, #1
xCloseEvent.eEventType = eSocketCloseEvent;
 8006392:	2309      	movs	r3, #9
	if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 8006394:	3003      	adds	r0, #3
xCloseEvent.eEventType = eSocketCloseEvent;
 8006396:	f88d 3000 	strb.w	r3, [sp]
	if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 800639a:	d80b      	bhi.n	80063b4 <FreeRTOS_closesocket+0x28>
		if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 800639c:	2100      	movs	r1, #0
 800639e:	4668      	mov	r0, sp
 80063a0:	f7ff fb98 	bl	8005ad4 <xSendEventStructToIPTask>
 80063a4:	2800      	cmp	r0, #0
			xResult = 1;
 80063a6:	bf0c      	ite	eq
 80063a8:	f04f 30ff 	moveq.w	r0, #4294967295
 80063ac:	2001      	movne	r0, #1
}
 80063ae:	b003      	add	sp, #12
 80063b0:	f85d fb04 	ldr.w	pc, [sp], #4
		xResult = 0;
 80063b4:	2000      	movs	r0, #0
 80063b6:	e7fa      	b.n	80063ae <FreeRTOS_closesocket+0x22>

080063b8 <vSocketClose>:
{
 80063b8:	b538      	push	{r3, r4, r5, lr}
		if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 80063ba:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 80063be:	2b06      	cmp	r3, #6
{
 80063c0:	4604      	mov	r4, r0
		if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 80063c2:	d123      	bne.n	800640c <vSocketClose+0x54>
				if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80063c4:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80063c6:	b108      	cbz	r0, 80063cc <vSocketClose+0x14>
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 80063c8:	f002 f872 	bl	80084b0 <vReleaseNetworkBufferAndDescriptor>
				vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 80063cc:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 80063d0:	f001 fd15 	bl	8007dfe <vTCPWindowDestroy>
			if( pxSocket->u.xTCP.rxStream != NULL )
 80063d4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80063d6:	b108      	cbz	r0, 80063dc <vSocketClose+0x24>
				vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 80063d8:	f7fd fd16 	bl	8003e08 <vPortFree>
			if( pxSocket->u.xTCP.txStream != NULL )
 80063dc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80063de:	b108      	cbz	r0, 80063e4 <vSocketClose+0x2c>
				vPortFreeLarge( pxSocket->u.xTCP.txStream );
 80063e0:	f7fd fd12 	bl	8003e08 <vPortFree>
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 80063e4:	4b1b      	ldr	r3, [pc, #108]	; (8006454 <vSocketClose+0x9c>)
	uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 80063e6:	8ca5      	ldrh	r5, [r4, #36]	; 0x24
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	3308      	adds	r3, #8
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d00d      	beq.n	800640c <vSocketClose+0x54>
			pxOtherSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 80063f0:	68d1      	ldr	r1, [r2, #12]
			if( ( pxOtherSocket->u.xTCP.ucTCPState == eTCP_LISTEN ) &&
 80063f2:	f891 0053 	ldrb.w	r0, [r1, #83]	; 0x53
 80063f6:	2801      	cmp	r0, #1
 80063f8:	d115      	bne.n	8006426 <vSocketClose+0x6e>
 80063fa:	8c88      	ldrh	r0, [r1, #36]	; 0x24
 80063fc:	42a8      	cmp	r0, r5
 80063fe:	d112      	bne.n	8006426 <vSocketClose+0x6e>
				( pxOtherSocket->u.xTCP.usChildCount ) )
 8006400:	f8b1 004e 	ldrh.w	r0, [r1, #78]	; 0x4e
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 8006404:	b178      	cbz	r0, 8006426 <vSocketClose+0x6e>
				pxOtherSocket->u.xTCP.usChildCount--;
 8006406:	3801      	subs	r0, #1
 8006408:	f8a1 004e 	strh.w	r0, [r1, #78]	; 0x4e
	if( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE )
 800640c:	69a3      	ldr	r3, [r4, #24]
 800640e:	b9db      	cbnz	r3, 8006448 <vSocketClose+0x90>
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 8006410:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8006414:	2b11      	cmp	r3, #17
 8006416:	d010      	beq.n	800643a <vSocketClose+0x82>
	if( pxSocket->xEventGroup )
 8006418:	6860      	ldr	r0, [r4, #4]
 800641a:	b990      	cbnz	r0, 8006442 <vSocketClose+0x8a>
	vPortFreeSocket( pxSocket );
 800641c:	4620      	mov	r0, r4
 800641e:	f7fd fcf3 	bl	8003e08 <vPortFree>
} /* Tested */
 8006422:	2000      	movs	r0, #0
 8006424:	bd38      	pop	{r3, r4, r5, pc}
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8006426:	6852      	ldr	r2, [r2, #4]
 8006428:	e7e0      	b.n	80063ec <vSocketClose+0x34>
			pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800642a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800642c:	68dd      	ldr	r5, [r3, #12]
			uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800642e:	4628      	mov	r0, r5
 8006430:	f7fd fa70 	bl	8003914 <uxListRemove>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8006434:	4628      	mov	r0, r5
 8006436:	f002 f83b 	bl	80084b0 <vReleaseNetworkBufferAndDescriptor>
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800643a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1f4      	bne.n	800642a <vSocketClose+0x72>
 8006440:	e7ea      	b.n	8006418 <vSocketClose+0x60>
		vEventGroupDelete( pxSocket->xEventGroup );
 8006442:	f7fd fa16 	bl	8003872 <vEventGroupDelete>
 8006446:	e7e9      	b.n	800641c <vSocketClose+0x64>
		uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 8006448:	f104 0008 	add.w	r0, r4, #8
 800644c:	f7fd fa62 	bl	8003914 <uxListRemove>
 8006450:	e7de      	b.n	8006410 <vSocketClose+0x58>
 8006452:	bf00      	nop
 8006454:	20006988 	.word	0x20006988

08006458 <pxUDPSocketLookup>:

/*-----------------------------------------------------------*/

FreeRTOS_Socket_t *pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 8006458:	b508      	push	{r3, lr}

	/* Looking up a socket is quite simple, find a match with the local port.

	See if there is a list item associated with the port number on the
	list of bound sockets. */
	pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800645a:	4601      	mov	r1, r0
 800645c:	4807      	ldr	r0, [pc, #28]	; (800647c <pxUDPSocketLookup+0x24>)
 800645e:	f7ff fe68 	bl	8006132 <pxListFindListItemWithValue>

	if( pxListItem != NULL )
 8006462:	b150      	cbz	r0, 800647a <pxUDPSocketLookup+0x22>
	{
		/* The owner of the list item is the socket itself. */
		pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem );
 8006464:	68c0      	ldr	r0, [r0, #12]
		configASSERT( pxSocket != NULL );
 8006466:	b940      	cbnz	r0, 800647a <pxUDPSocketLookup+0x22>
 8006468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	e7fe      	b.n	8006478 <pxUDPSocketLookup+0x20>
	}
	return pxSocket;
}
 800647a:	bd08      	pop	{r3, pc}
 800647c:	2000699c 	.word	0x2000699c

08006480 <vSocketWakeUpUser>:
	}
	#endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
	{
		if( pxSocket->pxSocketSet != NULL )
 8006480:	6a82      	ldr	r2, [r0, #40]	; 0x28
{
 8006482:	b510      	push	{r4, lr}
 8006484:	4604      	mov	r4, r0
		if( pxSocket->pxSocketSet != NULL )
 8006486:	b14a      	cbz	r2, 800649c <vSocketWakeUpUser+0x1c>
		{
			EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & eSELECT_ALL;
 8006488:	6801      	ldr	r1, [r0, #0]
 800648a:	f3c1 2103 	ubfx	r1, r1, #8, #4
			if( xSelectBits != 0ul )
 800648e:	b129      	cbz	r1, 800649c <vSocketWakeUpUser+0x1c>
			{
				pxSocket->xSocketBits |= xSelectBits;
 8006490:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006492:	430b      	orrs	r3, r1
 8006494:	6303      	str	r3, [r0, #48]	; 0x30
				xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 8006496:	6810      	ldr	r0, [r2, #0]
 8006498:	f7fd f9aa 	bl	80037f0 <xEventGroupSetBits>
			}
		}

		pxSocket->xEventBits &= eSOCKET_ALL;
 800649c:	6821      	ldr	r1, [r4, #0]
	}
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */

	if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0u ) )
 800649e:	6860      	ldr	r0, [r4, #4]
		pxSocket->xEventBits &= eSOCKET_ALL;
 80064a0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80064a4:	6021      	str	r1, [r4, #0]
	if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0u ) )
 80064a6:	b110      	cbz	r0, 80064ae <vSocketWakeUpUser+0x2e>
 80064a8:	b109      	cbz	r1, 80064ae <vSocketWakeUpUser+0x2e>
	{
		xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 80064aa:	f7fd f9a1 	bl	80037f0 <xEventGroupSetBits>
	}

	pxSocket->xEventBits = 0ul;
 80064ae:	2300      	movs	r3, #0
 80064b0:	6023      	str	r3, [r4, #0]
 80064b2:	bd10      	pop	{r4, pc}

080064b4 <xTCPTimerCheck>:
	 * - Send new data
	 * - Send a keep-alive packet
	 * - Check for timeout (in non-connected states only)
	 */
	TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
	{
 80064b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064b8:	4680      	mov	r8, r0
	FreeRTOS_Socket_t *pxSocket;
	TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
	TickType_t xNow = xTaskGetTickCount();
 80064ba:	f7fe fa61 	bl	8004980 <xTaskGetTickCount>
	static TickType_t xLastTime = 0u;
	TickType_t xDelta = xNow - xLastTime;
 80064be:	4b1d      	ldr	r3, [pc, #116]	; (8006534 <xTCPTimerCheck+0x80>)
	ListItem_t* pxEnd = ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
	ListItem_t *pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 80064c0:	4f1d      	ldr	r7, [pc, #116]	; (8006538 <xTCPTimerCheck+0x84>)
	TickType_t xDelta = xNow - xLastTime;
 80064c2:	681c      	ldr	r4, [r3, #0]
	ListItem_t *pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 80064c4:	f8d7 a00c 	ldr.w	sl, [r7, #12]

		xLastTime = xNow;
 80064c8:	6018      	str	r0, [r3, #0]

		if( xDelta == 0u )
		{
			xDelta = 1u;
 80064ca:	1b04      	subs	r4, r0, r4
 80064cc:	bf08      	it	eq
 80064ce:	2401      	moveq	r4, #1
				}
				else
				{
					/* Or else make sure this will be called again to wake-up
					the sockets' owner. */
					xShortest = ( TickType_t ) 0;
 80064d0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		while( pxIterator != pxEnd )
 80064d4:	3708      	adds	r7, #8
				pxSocket->u.xTCP.usTimeout = 0u;
 80064d6:	f04f 0900 	mov.w	r9, #0
		while( pxIterator != pxEnd )
 80064da:	45ba      	cmp	sl, r7
 80064dc:	d102      	bne.n	80064e4 <xTCPTimerCheck+0x30>
				xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
			}
		}

		return xShortest;
	}
 80064de:	4630      	mov	r0, r6
 80064e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			pxSocket = ( FreeRTOS_Socket_t * )listGET_LIST_ITEM_OWNER( pxIterator );
 80064e4:	f8da 500c 	ldr.w	r5, [sl, #12]
			pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 80064e8:	f8da a004 	ldr.w	sl, [sl, #4]
			if( pxSocket->u.xTCP.usTimeout == 0u )
 80064ec:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0f2      	beq.n	80064da <xTCPTimerCheck+0x26>
			if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 80064f4:	42a3      	cmp	r3, r4
 80064f6:	d912      	bls.n	800651e <xTCPTimerCheck+0x6a>
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 80064f8:	1b1b      	subs	r3, r3, r4
 80064fa:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
			if( pxSocket->xEventBits != 0u )
 80064fe:	682b      	ldr	r3, [r5, #0]
 8006500:	b12b      	cbz	r3, 800650e <xTCPTimerCheck+0x5a>
				if( xWillSleep != pdFALSE )
 8006502:	f1b8 0f00 	cmp.w	r8, #0
 8006506:	d012      	beq.n	800652e <xTCPTimerCheck+0x7a>
					vSocketWakeUpUser( pxSocket );
 8006508:	4628      	mov	r0, r5
 800650a:	f7ff ffb9 	bl	8006480 <vSocketWakeUpUser>
			if( ( pxSocket->u.xTCP.usTimeout != 0u ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800650e:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0e1      	beq.n	80064da <xTCPTimerCheck+0x26>
 8006516:	429e      	cmp	r6, r3
 8006518:	bf28      	it	cs
 800651a:	461e      	movcs	r6, r3
 800651c:	e7dd      	b.n	80064da <xTCPTimerCheck+0x26>
				pxSocket->u.xTCP.usTimeout = 0u;
 800651e:	f8a5 9048 	strh.w	r9, [r5, #72]	; 0x48
				rc = xTCPSocketCheck( pxSocket );
 8006522:	4628      	mov	r0, r5
 8006524:	f000 fcfc 	bl	8006f20 <xTCPSocketCheck>
				if( rc < 0 )
 8006528:	2800      	cmp	r0, #0
 800652a:	dae8      	bge.n	80064fe <xTCPTimerCheck+0x4a>
 800652c:	e7d5      	b.n	80064da <xTCPTimerCheck+0x26>
					xShortest = ( TickType_t ) 0;
 800652e:	4646      	mov	r6, r8
 8006530:	e7ed      	b.n	800650e <xTCPTimerCheck+0x5a>
 8006532:	bf00      	nop
 8006534:	20004ec0 	.word	0x20004ec0
 8006538:	20006988 	.word	0x20006988

0800653c <pxTCPSocketLookup>:
	 * looking up a socket is a little more complex:
	 * Both a local port, and a remote port and IP address are being used
	 * For a socket in listening mode, the remote port and IP address are both 0
	 */
	FreeRTOS_Socket_t *pxTCPSocketLookup( uint32_t ulLocalIP, UBaseType_t uxLocalPort, uint32_t ulRemoteIP, UBaseType_t uxRemotePort )
	{
 800653c:	b5f0      	push	{r4, r5, r6, r7, lr}
	MiniListItem_t *pxEnd = ( MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );

		/* Parameter not yet supported. */
		( void ) ulLocalIP;

		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 800653e:	4c0e      	ldr	r4, [pc, #56]	; (8006578 <pxTCPSocketLookup+0x3c>)
	FreeRTOS_Socket_t *pxResult = NULL, *pxListenSocket = NULL;
 8006540:	2600      	movs	r6, #0
		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 8006542:	68e5      	ldr	r5, [r4, #12]
			 pxIterator != ( ListItem_t * ) pxEnd;
			 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );

			if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 8006544:	b289      	uxth	r1, r1
		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 8006546:	3408      	adds	r4, #8
				{
					/* If this is a socket listening to uxLocalPort, remember it
					in case there is no perfect match. */
					pxListenSocket = pxSocket;
				}
				else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 8006548:	b29b      	uxth	r3, r3
		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 800654a:	42a5      	cmp	r5, r4
 800654c:	d101      	bne.n	8006552 <pxTCPSocketLookup+0x16>
 800654e:	4630      	mov	r0, r6
			found. */
			pxResult = pxListenSocket;
		}

		return pxResult;
	}
 8006550:	bdf0      	pop	{r4, r5, r6, r7, pc}
			FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 8006552:	68e8      	ldr	r0, [r5, #12]
			if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 8006554:	8c87      	ldrh	r7, [r0, #36]	; 0x24
 8006556:	428f      	cmp	r7, r1
 8006558:	d10b      	bne.n	8006572 <pxTCPSocketLookup+0x36>
				if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800655a:	f890 7053 	ldrb.w	r7, [r0, #83]	; 0x53
 800655e:	2f01      	cmp	r7, #1
 8006560:	d006      	beq.n	8006570 <pxTCPSocketLookup+0x34>
				else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 8006562:	8f87      	ldrh	r7, [r0, #60]	; 0x3c
 8006564:	429f      	cmp	r7, r3
 8006566:	d104      	bne.n	8006572 <pxTCPSocketLookup+0x36>
 8006568:	6b87      	ldr	r7, [r0, #56]	; 0x38
 800656a:	4297      	cmp	r7, r2
 800656c:	d101      	bne.n	8006572 <pxTCPSocketLookup+0x36>
 800656e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006570:	4606      	mov	r6, r0
			 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
 8006572:	686d      	ldr	r5, [r5, #4]
 8006574:	e7e9      	b.n	800654a <pxTCPSocketLookup+0xe>
 8006576:	bf00      	nop
 8006578:	20006988 	.word	0x20006988

0800657c <lTCPAddRxdata>:
	/*
	 * Add data to the RxStream.  When uxOffset > 0, data has come in out-of-order
	 * and will be put in front of the head so it can not be popped by the user.
	 */
	int32_t lTCPAddRxdata( FreeRTOS_Socket_t *pxSocket, size_t uxOffset, const uint8_t *pcData, uint32_t ulByteCount )
	{
 800657c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	StreamBuffer_t *pxStream = pxSocket->u.xTCP.rxStream;
 8006580:	6f46      	ldr	r6, [r0, #116]	; 0x74
	{
 8006582:	4604      	mov	r4, r0
 8006584:	460f      	mov	r7, r1
 8006586:	4690      	mov	r8, r2
 8006588:	4699      	mov	r9, r3
		/* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
		if( pucData != NULL ) copy data the the buffer
		if( pucData == NULL ) no copying, just advance rxHead
		if( uxOffset != 0 ) Just store data which has come out-of-order
		if( uxOffset == 0 ) Also advance rxHead */
		if( pxStream == NULL )
 800658a:	bb5e      	cbnz	r6, 80065e4 <lTCPAddRxdata+0x68>
			if( pxSocket->u.xTCP.uxLittleSpace == 0ul )
 800658c:	6e42      	ldr	r2, [r0, #100]	; 0x64
			uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800658e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
			if( pxSocket->u.xTCP.uxLittleSpace == 0ul )
 8006590:	b91a      	cbnz	r2, 800659a <lTCPAddRxdata+0x1e>
				pxSocket->u.xTCP.uxLittleSpace  = ( 1ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why divide by 5?  Can this be changed to a #define? */
 8006592:	2205      	movs	r2, #5
 8006594:	fbb3 f2f2 	udiv	r2, r3, r2
 8006598:	6642      	str	r2, [r0, #100]	; 0x64
			if( pxSocket->u.xTCP.uxEnoughSpace == 0ul )
 800659a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800659c:	b922      	cbnz	r2, 80065a8 <lTCPAddRxdata+0x2c>
				pxSocket->u.xTCP.uxEnoughSpace = ( 4ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why multiply by 4?  Maybe sock80_PERCENT?*/
 800659e:	009a      	lsls	r2, r3, #2
 80065a0:	2105      	movs	r1, #5
 80065a2:	fbb2 f2f1 	udiv	r2, r2, r1
 80065a6:	66a2      	str	r2, [r4, #104]	; 0x68
		uxLength += sizeof( size_t );
 80065a8:	3304      	adds	r3, #4
		uxLength &= ~( sizeof( size_t ) - 1u );
 80065aa:	f023 0503 	bic.w	r5, r3, #3
		pxBuffer = ( StreamBuffer_t * )pvPortMallocLarge( uxSize );
 80065ae:	f105 0014 	add.w	r0, r5, #20
 80065b2:	f7fd fb97 	bl	8003ce4 <pvPortMalloc>
		if( pxBuffer == NULL )
 80065b6:	4606      	mov	r6, r0
 80065b8:	b970      	cbnz	r0, 80065d8 <lTCPAddRxdata+0x5c>
			pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 80065ba:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80065be:	f043 0308 	orr.w	r3, r3, #8
 80065c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80065c6:	2108      	movs	r1, #8
 80065c8:	4620      	mov	r0, r4
 80065ca:	f000 faf0 	bl	8006bae <vTCPStateChange>
		{
			pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
			if( pxStream == NULL )
			{
				return -1;
 80065ce:	f04f 35ff 	mov.w	r5, #4294967295
				#endif
			}
		}

		return xResult;
	}
 80065d2:	4628      	mov	r0, r5
 80065d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			memset( pxBuffer, '\0', sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 80065d8:	2214      	movs	r2, #20
 80065da:	2100      	movs	r1, #0
 80065dc:	f002 f9b6 	bl	800894c <memset>
			pxBuffer->LENGTH = ( size_t ) uxLength ;
 80065e0:	6135      	str	r5, [r6, #16]
				pxSocket->u.xTCP.rxStream = pxBuffer;
 80065e2:	6766      	str	r6, [r4, #116]	; 0x74
		xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 80065e4:	464b      	mov	r3, r9
 80065e6:	4642      	mov	r2, r8
 80065e8:	4639      	mov	r1, r7
 80065ea:	4630      	mov	r0, r6
 80065ec:	f000 f8da 	bl	80067a4 <uxStreamBufferAdd>
 80065f0:	4605      	mov	r5, r0
		if( uxOffset == 0u )
 80065f2:	2f00      	cmp	r7, #0
 80065f4:	d1ed      	bne.n	80065d2 <lTCPAddRxdata+0x56>
				if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 80065f6:	f994 3040 	ldrsb.w	r3, [r4, #64]	; 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	db1e      	blt.n	800663c <lTCPAddRxdata+0xc0>
					size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 80065fe:	6f62      	ldr	r2, [r4, #116]	; 0x74
size_t uxFront = pxBuffer->uxFront;
 8006600:	68d1      	ldr	r1, [r2, #12]
size_t uxTail = pxBuffer->uxTail;
 8006602:	6813      	ldr	r3, [r2, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 8006604:	6912      	ldr	r2, [r2, #16]
 8006606:	4413      	add	r3, r2
 8006608:	3b01      	subs	r3, #1
 800660a:	1a5b      	subs	r3, r3, r1
	if( uxCount >= pxBuffer->LENGTH )
 800660c:	429a      	cmp	r2, r3
		uxCount -= pxBuffer->LENGTH;
 800660e:	bf98      	it	ls
 8006610:	1a9b      	subls	r3, r3, r2
					if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace  )
 8006612:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006614:	429a      	cmp	r2, r3
 8006616:	d311      	bcc.n	800663c <lTCPAddRxdata+0xc0>
						pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 8006618:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800661c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006620:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
						pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8006624:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006628:	f043 0301 	orr.w	r3, r3, #1
 800662c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
						pxSocket->u.xTCP.usTimeout = 1u;
 8006630:	2301      	movs	r3, #1
 8006632:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
						xSendEventToIPTask( eTCPTimerEvent );
 8006636:	2005      	movs	r0, #5
 8006638:	f7ff fa88 	bl	8005b4c <xSendEventToIPTask>
				pxSocket->xEventBits |= eSOCKET_RECEIVE;
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	f043 0201 	orr.w	r2, r3, #1
 8006642:	6022      	str	r2, [r4, #0]
					if( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 )
 8006644:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006646:	07d2      	lsls	r2, r2, #31
						pxSocket->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
 8006648:	bf42      	ittt	mi
 800664a:	f443 7380 	orrmi.w	r3, r3, #256	; 0x100
 800664e:	f043 0301 	orrmi.w	r3, r3, #1
 8006652:	6023      	strmi	r3, [r4, #0]
 8006654:	e7bd      	b.n	80065d2 <lTCPAddRxdata+0x56>

08006656 <FreeRTOS_tx_space>:
	BaseType_t FreeRTOS_tx_space( Socket_t xSocket )
	{
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8006656:	f890 2027 	ldrb.w	r2, [r0, #39]	; 0x27
 800665a:	2a06      	cmp	r2, #6
	{
 800665c:	4603      	mov	r3, r0
		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800665e:	d105      	bne.n	800666c <FreeRTOS_tx_space+0x16>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
		}
		else
		{
			if( pxSocket->u.xTCP.txStream != NULL )
 8006660:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8006662:	b108      	cbz	r0, 8006668 <FreeRTOS_tx_space+0x12>
			{
				xReturn = ( BaseType_t ) uxStreamBufferGetSpace ( pxSocket->u.xTCP.txStream );
 8006664:	f7ff bd7a 	b.w	800615c <uxStreamBufferGetSpace>
			}
			else
			{
				xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 8006668:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800666a:	4770      	bx	lr
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800666c:	f06f 0015 	mvn.w	r0, #21
			}
		}

		return xReturn;
	}
 8006670:	4770      	bx	lr

08006672 <FreeRTOS_rx_size>:
	BaseType_t FreeRTOS_rx_size( Socket_t xSocket )
	{
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8006672:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8006676:	2b06      	cmp	r3, #6
 8006678:	d103      	bne.n	8006682 <FreeRTOS_rx_size+0x10>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
		}
		else if( pxSocket->u.xTCP.rxStream != NULL )
 800667a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800667c:	b118      	cbz	r0, 8006686 <FreeRTOS_rx_size+0x14>
		{
			xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800667e:	f7ff bd4f 	b.w	8006120 <uxStreamBufferGetSize>
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8006682:	f06f 0015 	mvn.w	r0, #21
		{
			xReturn = 0;
		}

		return xReturn;
	}
 8006686:	4770      	bx	lr

08006688 <vSocketSelect>:
/*-----------------------------------------------------------*/

#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )

	void vSocketSelect( SocketSelect_t *pxSocketSet )
	{
 8006688:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BaseType_t xLastRound = 0;
	#endif

		/* These flags will be switched on after checking the socket status. */
		EventBits_t xGroupBits = 0;
		pxSocketSet->pxSocket = NULL;
 800668c:	2500      	movs	r5, #0
		{
			const ListItem_t *pxIterator;
			const MiniListItem_t *pxEnd;
			if( xRound == 0 )
			{
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundUDPSocketsList );
 800668e:	f8df b10c 	ldr.w	fp, [pc, #268]	; 800679c <vSocketSelect+0x114>
 8006692:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80067a0 <vSocketSelect+0x118>
		pxSocketSet->pxSocket = NULL;
 8006696:	6085      	str	r5, [r0, #8]
	{
 8006698:	4606      	mov	r6, r0
		for( xRound = 0; xRound <= xLastRound; xRound++ )
 800669a:	462f      	mov	r7, r5
			else
			{
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
			}
		#endif /* ipconfigUSE_TCP == 1 */
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
 800669c:	f8db a004 	ldr.w	sl, [fp, #4]
 80066a0:	45da      	cmp	sl, fp
 80066a2:	d117      	bne.n	80066d4 <vSocketSelect+0x4c>
 80066a4:	46c3      	mov	fp, r8
		for( xRound = 0; xRound <= xLastRound; xRound++ )
 80066a6:	b19f      	cbz	r7, 80066d0 <vSocketSelect+0x48>
				xGroupBits |= xSocketBits;

			}	/* for( pxIterator ... ) */
		}	/* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

		xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 80066a8:	2100      	movs	r1, #0
 80066aa:	6830      	ldr	r0, [r6, #0]
 80066ac:	f7fd f87d 	bl	80037aa <xEventGroupClearBits>
 80066b0:	f000 000f 	and.w	r0, r0, #15
			and cleared in FreeRTOS_select(). */
			xBitsToClear &= ( EventBits_t ) ~eSELECT_INTR;
		}
		#endif /* ipconfigSUPPORT_SIGNALS */

		if( xBitsToClear != 0 )
 80066b4:	ea30 0105 	bics.w	r1, r0, r5
 80066b8:	d002      	beq.n	80066c0 <vSocketSelect+0x38>
		{
			xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 80066ba:	6830      	ldr	r0, [r6, #0]
 80066bc:	f7fd f875 	bl	80037aa <xEventGroupClearBits>
		}

		/* Now include eSELECT_CALL_IP to wakeup the caller. */
		xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | eSELECT_CALL_IP );
 80066c0:	6830      	ldr	r0, [r6, #0]
 80066c2:	f045 0110 	orr.w	r1, r5, #16
	}
 80066c6:	b003      	add	sp, #12
 80066c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | eSELECT_CALL_IP );
 80066cc:	f7fd b890 	b.w	80037f0 <xEventGroupSetBits>
 80066d0:	2701      	movs	r7, #1
 80066d2:	e7e3      	b.n	800669c <vSocketSelect+0x14>
				FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 80066d4:	f8da 900c 	ldr.w	r9, [sl, #12]
				if( pxSocket->pxSocketSet != pxSocketSet )
 80066d8:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 80066dc:	429e      	cmp	r6, r3
 80066de:	d159      	bne.n	8006794 <vSocketSelect+0x10c>
					if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP )
 80066e0:	f899 3027 	ldrb.w	r3, [r9, #39]	; 0x27
 80066e4:	f8d9 402c 	ldr.w	r4, [r9, #44]	; 0x2c
 80066e8:	2b06      	cmp	r3, #6
 80066ea:	d148      	bne.n	800677e <vSocketSelect+0xf6>
						if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 80066ec:	f899 2040 	ldrb.w	r2, [r9, #64]	; 0x40
						if( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 )
 80066f0:	f014 0401 	ands.w	r4, r4, #1
 80066f4:	f002 0306 	and.w	r3, r2, #6
 80066f8:	d00a      	beq.n	8006710 <vSocketSelect+0x88>
							if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 80066fa:	f899 1053 	ldrb.w	r1, [r9, #83]	; 0x53
 80066fe:	2901      	cmp	r1, #1
 8006700:	d12a      	bne.n	8006758 <vSocketSelect+0xd0>
								if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != 0 ) )
 8006702:	f8d9 4054 	ldr.w	r4, [r9, #84]	; 0x54
 8006706:	b11c      	cbz	r4, 8006710 <vSocketSelect+0x88>
 8006708:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
 800670c:	f3c4 0440 	ubfx	r4, r4, #1, #1
						if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
 8006710:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 8006714:	0751      	lsls	r1, r2, #29
 8006716:	d506      	bpl.n	8006726 <vSocketSelect+0x9e>
							if( ( pxSocket->u.xTCP.ucTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.ucTCPState == eCLOSED ) )
 8006718:	f899 1053 	ldrb.w	r1, [r9, #83]	; 0x53
 800671c:	f011 0ff7 	tst.w	r1, #247	; 0xf7
								xSocketBits |= eSELECT_EXCEPT;
 8006720:	bf08      	it	eq
 8006722:	f044 0404 	orreq.w	r4, r4, #4
						if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
 8006726:	0790      	lsls	r0, r2, #30
 8006728:	d531      	bpl.n	800678e <vSocketSelect+0x106>
							if( bAccepted != 0 )
 800672a:	b923      	cbnz	r3, 8006736 <vSocketSelect+0xae>
								if( FreeRTOS_tx_space( pxSocket ) > 0 )
 800672c:	4648      	mov	r0, r9
 800672e:	f7ff ff92 	bl	8006656 <FreeRTOS_tx_space>
 8006732:	2800      	cmp	r0, #0
 8006734:	dc0d      	bgt.n	8006752 <vSocketSelect+0xca>
								if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 8006736:	f899 3041 	ldrb.w	r3, [r9, #65]	; 0x41
 800673a:	071a      	lsls	r2, r3, #28
 800673c:	d527      	bpl.n	800678e <vSocketSelect+0x106>
 800673e:	f899 2053 	ldrb.w	r2, [r9, #83]	; 0x53
 8006742:	2a04      	cmp	r2, #4
 8006744:	d923      	bls.n	800678e <vSocketSelect+0x106>
									( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 8006746:	06d9      	lsls	r1, r3, #27
 8006748:	d421      	bmi.n	800678e <vSocketSelect+0x106>
									pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 800674a:	f043 0310 	orr.w	r3, r3, #16
 800674e:	f889 3041 	strb.w	r3, [r9, #65]	; 0x41
								xSocketBits |= eSELECT_WRITE;
 8006752:	f044 0402 	orr.w	r4, r4, #2
 8006756:	e01a      	b.n	800678e <vSocketSelect+0x106>
							else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8006758:	f002 020a 	and.w	r2, r2, #10
 800675c:	2a0a      	cmp	r2, #10
 800675e:	d00a      	beq.n	8006776 <vSocketSelect+0xee>
							else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 8006760:	b95b      	cbnz	r3, 800677a <vSocketSelect+0xf2>
 8006762:	4648      	mov	r0, r9
 8006764:	9301      	str	r3, [sp, #4]
 8006766:	f7ff ff84 	bl	8006672 <FreeRTOS_rx_size>
 800676a:	2800      	cmp	r0, #0
 800676c:	bfd4      	ite	le
 800676e:	2400      	movle	r4, #0
 8006770:	2401      	movgt	r4, #1
 8006772:	9b01      	ldr	r3, [sp, #4]
 8006774:	e7cc      	b.n	8006710 <vSocketSelect+0x88>
								xSocketBits |= eSELECT_READ;
 8006776:	2401      	movs	r4, #1
 8006778:	e7ca      	b.n	8006710 <vSocketSelect+0x88>
				xSocketBits = 0;
 800677a:	2400      	movs	r4, #0
 800677c:	e7c8      	b.n	8006710 <vSocketSelect+0x88>
					if( ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) &&
 800677e:	f014 0401 	ands.w	r4, r4, #1
 8006782:	d004      	beq.n	800678e <vSocketSelect+0x106>
						( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 8006784:	f8d9 4038 	ldr.w	r4, [r9, #56]	; 0x38
					if( ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) &&
 8006788:	3400      	adds	r4, #0
 800678a:	bf18      	it	ne
 800678c:	2401      	movne	r4, #1
				pxSocket->xSocketBits = xSocketBits;
 800678e:	f8c9 4030 	str.w	r4, [r9, #48]	; 0x30
				xGroupBits |= xSocketBits;
 8006792:	4325      	orrs	r5, r4
				 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8006794:	f8da a004 	ldr.w	sl, [sl, #4]
 8006798:	e782      	b.n	80066a0 <vSocketSelect+0x18>
 800679a:	bf00      	nop
 800679c:	200069a4 	.word	0x200069a4
 80067a0:	20006990 	.word	0x20006990

080067a4 <uxStreamBufferAdd>:
 * an offset from uxHead while uxHead will not be moved yet.  This possibility
 * will be used when TCP data is received while earlier data is still missing.
 * If 'pucData' equals NULL, the function is called to advance 'uxHead' only.
 */
size_t uxStreamBufferAdd( StreamBuffer_t *pxBuffer, size_t uxOffset, const uint8_t *pucData, size_t uxCount )
{
 80067a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a8:	4605      	mov	r5, r0
size_t uxHead = pxBuffer->uxHead;
 80067aa:	6884      	ldr	r4, [r0, #8]
size_t uxTail = pxBuffer->uxTail;
 80067ac:	6800      	ldr	r0, [r0, #0]
 80067ae:	4617      	mov	r7, r2
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 80067b0:	692a      	ldr	r2, [r5, #16]
 80067b2:	4410      	add	r0, r2
 80067b4:	3801      	subs	r0, #1
 80067b6:	1b00      	subs	r0, r0, r4
	if( uxCount >= pxBuffer->LENGTH )
 80067b8:	4282      	cmp	r2, r0
		uxCount -= pxBuffer->LENGTH;
 80067ba:	bf98      	it	ls
 80067bc:	1a80      	subls	r0, r0, r2
size_t uxSpace, uxNextHead, uxFirst;

	uxSpace = uxStreamBufferGetSpace( pxBuffer );

	/* If uxOffset > 0, items can be placed in front of uxHead */
	if( uxSpace > uxOffset )
 80067be:	4281      	cmp	r1, r0
	{
		uxSpace -= uxOffset;
	}
	else
	{
		uxSpace = 0u;
 80067c0:	bf2c      	ite	cs
 80067c2:	2400      	movcs	r4, #0
		uxSpace -= uxOffset;
 80067c4:	1a44      	subcc	r4, r0, r1


	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b) { return a >= b ? a : b; }
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 80067c6:	429c      	cmp	r4, r3
 80067c8:	bf28      	it	cs
 80067ca:	461c      	movcs	r4, r3
{
 80067cc:	460e      	mov	r6, r1

	/* The number of bytes that can be written is the minimum of the number of
	bytes requested and the number available. */
	uxCount = FreeRTOS_min_uint32( uxSpace, uxCount );

	if( uxCount != 0u )
 80067ce:	2c00      	cmp	r4, #0
 80067d0:	d03c      	beq.n	800684c <uxStreamBufferAdd+0xa8>
	{
		uxNextHead = pxBuffer->uxHead;
 80067d2:	f8d5 8008 	ldr.w	r8, [r5, #8]

		if( uxOffset != 0u )
 80067d6:	b159      	cbz	r1, 80067f0 <uxStreamBufferAdd+0x4c>
		{
			/* ( uxOffset > 0 ) means: write in front if the uxHead marker */
			uxNextHead += uxOffset;
 80067d8:	4488      	add	r8, r1
			if( uxNextHead >= pxBuffer->LENGTH )
 80067da:	4590      	cmp	r8, r2
 80067dc:	d301      	bcc.n	80067e2 <uxStreamBufferAdd+0x3e>
			{
				uxNextHead -= pxBuffer->LENGTH;
 80067de:	eba8 0802 	sub.w	r8, r8, r2
			}
		}

		if( pucData != NULL )
 80067e2:	b32f      	cbz	r7, 8006830 <uxStreamBufferAdd+0x8c>
 80067e4:	e005      	b.n	80067f2 <uxStreamBufferAdd+0x4e>
			xReturn = pdFALSE;
		}
	}
	else
	{
		if( uxLeft <= uxRight )
 80067e6:	4590      	cmp	r8, r2
 80067e8:	d330      	bcc.n	800684c <uxStreamBufferAdd+0xa8>
		}

		if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
		{
			/* Advance the front pointer */
			pxBuffer->uxFront = uxNextHead;
 80067ea:	f8c5 800c 	str.w	r8, [r5, #12]
		}
	}

	return uxCount;
 80067ee:	e02d      	b.n	800684c <uxStreamBufferAdd+0xa8>
		if( pucData != NULL )
 80067f0:	b1b7      	cbz	r7, 8006820 <uxStreamBufferAdd+0x7c>
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 80067f2:	eba2 0908 	sub.w	r9, r2, r8
 80067f6:	45a1      	cmp	r9, r4
 80067f8:	bf28      	it	cs
 80067fa:	46a1      	movcs	r9, r4
			memcpy( ( void* ) ( pxBuffer->ucArray + uxNextHead ), pucData, uxFirst );
 80067fc:	f105 0a14 	add.w	sl, r5, #20
 8006800:	464a      	mov	r2, r9
 8006802:	4639      	mov	r1, r7
 8006804:	eb0a 0008 	add.w	r0, sl, r8
 8006808:	f002 f87b 	bl	8008902 <memcpy>
			if( uxCount > uxFirst )
 800680c:	45a1      	cmp	r9, r4
 800680e:	d206      	bcs.n	800681e <uxStreamBufferAdd+0x7a>
				memcpy( ( void * )pxBuffer->ucArray, pucData + uxFirst, uxCount - uxFirst );
 8006810:	eba4 0209 	sub.w	r2, r4, r9
 8006814:	eb07 0109 	add.w	r1, r7, r9
 8006818:	4650      	mov	r0, sl
 800681a:	f002 f872 	bl	8008902 <memcpy>
		if( uxOffset == 0u )
 800681e:	b93e      	cbnz	r6, 8006830 <uxStreamBufferAdd+0x8c>
			if( uxNextHead >= pxBuffer->LENGTH )
 8006820:	692b      	ldr	r3, [r5, #16]
			uxNextHead += uxCount;
 8006822:	44a0      	add	r8, r4
			if( uxNextHead >= pxBuffer->LENGTH )
 8006824:	4598      	cmp	r8, r3
				uxNextHead -= pxBuffer->LENGTH;
 8006826:	bf28      	it	cs
 8006828:	eba8 0803 	subcs.w	r8, r8, r3
			pxBuffer->uxHead = uxNextHead;
 800682c:	f8c5 8008 	str.w	r8, [r5, #8]
		if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 8006830:	68ea      	ldr	r2, [r5, #12]
size_t uxTail = pxBuffer->uxTail;
 8006832:	682b      	ldr	r3, [r5, #0]
	if( ( uxLeft < uxTail ) ^ ( uxRight < uxTail ) )
 8006834:	429a      	cmp	r2, r3
 8006836:	bf2c      	ite	cs
 8006838:	2000      	movcs	r0, #0
 800683a:	2001      	movcc	r0, #1
 800683c:	4598      	cmp	r8, r3
 800683e:	bf2c      	ite	cs
 8006840:	2100      	movcs	r1, #0
 8006842:	2101      	movcc	r1, #1
 8006844:	4288      	cmp	r0, r1
 8006846:	d0ce      	beq.n	80067e6 <uxStreamBufferAdd+0x42>
		if( uxRight < uxTail )
 8006848:	4598      	cmp	r8, r3
 800684a:	d3ce      	bcc.n	80067ea <uxStreamBufferAdd+0x46>
}
 800684c:	4620      	mov	r0, r4
 800684e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006852 <uxStreamBufferGet>:
 * If 'pucData' equals NULL, the function is called to advance 'lTail' only.
 * if 'xPeek' is pdTRUE, or if 'uxOffset' is non-zero, the 'lTail' pointer will
 * not be advanced.
 */
size_t uxStreamBufferGet( StreamBuffer_t *pxBuffer, size_t uxOffset, uint8_t *pucData, size_t uxMaxCount, BaseType_t xPeek )
{
 8006852:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8006856:	460e      	mov	r6, r1
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8006858:	6907      	ldr	r7, [r0, #16]
size_t uxHead = pxBuffer->uxHead;
 800685a:	6881      	ldr	r1, [r0, #8]
size_t uxTail = pxBuffer->uxTail;
 800685c:	6804      	ldr	r4, [r0, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800685e:	4439      	add	r1, r7
 8006860:	1b09      	subs	r1, r1, r4
	if ( uxCount >= pxBuffer->LENGTH )
 8006862:	428f      	cmp	r7, r1
		uxCount -= pxBuffer->LENGTH;
 8006864:	bf98      	it	ls
 8006866:	1bc9      	subls	r1, r1, r7
size_t uxSize, uxCount, uxFirst, uxNextTail;

	/* How much data is available? */
	uxSize = uxStreamBufferGetSize( pxBuffer );

	if( uxSize > uxOffset )
 8006868:	428e      	cmp	r6, r1
	{
		uxSize -= uxOffset;
	}
	else
	{
		uxSize = 0u;
 800686a:	bf2c      	ite	cs
 800686c:	2400      	movcs	r4, #0
		uxSize -= uxOffset;
 800686e:	1b8c      	subcc	r4, r1, r6
 8006870:	429c      	cmp	r4, r3
 8006872:	bf28      	it	cs
 8006874:	461c      	movcs	r4, r3
{
 8006876:	4680      	mov	r8, r0
 8006878:	4692      	mov	sl, r2
	}

	/* Use the minimum of the wanted bytes and the available bytes. */
	uxCount = FreeRTOS_min_uint32( uxSize, uxMaxCount );

	if( uxCount > 0u )
 800687a:	b33c      	cbz	r4, 80068cc <uxStreamBufferGet+0x7a>
	{
		uxNextTail = pxBuffer->uxTail;
 800687c:	6805      	ldr	r5, [r0, #0]

		if( uxOffset != 0u )
 800687e:	b11e      	cbz	r6, 8006888 <uxStreamBufferGet+0x36>
		{
			uxNextTail += uxOffset;
 8006880:	4435      	add	r5, r6
			if( uxNextTail >= pxBuffer->LENGTH )
 8006882:	42bd      	cmp	r5, r7
			{
				uxNextTail -= pxBuffer->LENGTH;
 8006884:	bf28      	it	cs
 8006886:	1bed      	subcs	r5, r5, r7
			}
		}

		if( pucData != NULL )
 8006888:	f1ba 0f00 	cmp.w	sl, #0
 800688c:	d013      	beq.n	80068b6 <uxStreamBufferGet+0x64>
		{
			/* Calculate the number of bytes that can be read - which may be
			less than the number wanted if the data wraps around to the start of
			the buffer. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextTail, uxCount );
 800688e:	1b7f      	subs	r7, r7, r5
 8006890:	42a7      	cmp	r7, r4
 8006892:	bf28      	it	cs
 8006894:	4627      	movcs	r7, r4

			/* Obtain the number of bytes it is possible to obtain in the first
			read. */
			memcpy( pucData, pxBuffer->ucArray + uxNextTail, uxFirst );
 8006896:	f108 0b14 	add.w	fp, r8, #20
 800689a:	463a      	mov	r2, r7
 800689c:	eb0b 0105 	add.w	r1, fp, r5
 80068a0:	4650      	mov	r0, sl
 80068a2:	f002 f82e 	bl	8008902 <memcpy>

			/* If the total number of wanted bytes is greater than the number
			that could be read in the first read... */
			if( uxCount > uxFirst )
 80068a6:	42a7      	cmp	r7, r4
 80068a8:	d205      	bcs.n	80068b6 <uxStreamBufferGet+0x64>
			{
				/*...then read the remaining bytes from the start of the buffer. */
				memcpy( pucData + uxFirst, pxBuffer->ucArray, uxCount - uxFirst );
 80068aa:	1be2      	subs	r2, r4, r7
 80068ac:	4659      	mov	r1, fp
 80068ae:	eb0a 0007 	add.w	r0, sl, r7
 80068b2:	f002 f826 	bl	8008902 <memcpy>
			}
		}

		if( ( xPeek == pdFALSE ) && ( uxOffset == 0UL ) )
 80068b6:	9b08      	ldr	r3, [sp, #32]
 80068b8:	b943      	cbnz	r3, 80068cc <uxStreamBufferGet+0x7a>
 80068ba:	b93e      	cbnz	r6, 80068cc <uxStreamBufferGet+0x7a>
		{
			/* Move the tail pointer to effecively remove the data read from
			the buffer. */
			uxNextTail += uxCount;

			if( uxNextTail >= pxBuffer->LENGTH )
 80068bc:	f8d8 3010 	ldr.w	r3, [r8, #16]
			uxNextTail += uxCount;
 80068c0:	4425      	add	r5, r4
			if( uxNextTail >= pxBuffer->LENGTH )
 80068c2:	429d      	cmp	r5, r3
			{
				uxNextTail -= pxBuffer->LENGTH;
 80068c4:	bf28      	it	cs
 80068c6:	1aed      	subcs	r5, r5, r3
			}

			pxBuffer->uxTail = uxNextTail;
 80068c8:	f8c8 5000 	str.w	r5, [r8]
		}
	}

	return uxCount;
}
 80068cc:	4620      	mov	r0, r4
 80068ce:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

080068d2 <prvTCPCreateWindow>:
 * random starting value, are being synchronised.  The sliding window manager
 * (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 * Size (MSS) in use.
 */
static void prvTCPCreateWindow( FreeRTOS_Socket_t *pxSocket )
{
 80068d2:	b513      	push	{r0, r1, r4, lr}
		FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %lu Water %lu <= %lu <= %lu\n",
			pxSocket->u.xTCP.uxRxWinSize * ipconfigTCP_MSS,
			pxSocket->u.xTCP.uxLittleSpace ,
			pxSocket->u.xTCP.uxEnoughSpace,
			pxSocket->u.xTCP.uxRxStreamSize ) );
	vTCPWindowCreate(
 80068d4:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
		&pxSocket->u.xTCP.xTCPWindow,
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 80068d8:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
 80068dc:	f8d0 40d4 	ldr.w	r4, [r0, #212]	; 0xd4
	vTCPWindowCreate(
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80068e6:	9300      	str	r3, [sp, #0]
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 80068e8:	f44f 6191 	mov.w	r1, #1160	; 0x488
	vTCPWindowCreate(
 80068ec:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 80068f0:	434a      	muls	r2, r1
 80068f2:	30dc      	adds	r0, #220	; 0xdc
 80068f4:	4361      	muls	r1, r4
 80068f6:	f001 fac3 	bl	8007e80 <vTCPWindowCreate>
		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
		( uint32_t ) pxSocket->u.xTCP.usInitMSS );
}
 80068fa:	b002      	add	sp, #8
 80068fc:	bd10      	pop	{r4, pc}

080068fe <prvTCPNextTimeout>:

/*
 * Calculate after how much time this socket needs to be checked again.
 */
static TickType_t prvTCPNextTimeout ( FreeRTOS_Socket_t *pxSocket )
{
 80068fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;

	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 8006900:	f890 3053 	ldrb.w	r3, [r0, #83]	; 0x53
TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8006904:	f644 6520 	movw	r5, #20000	; 0x4e20
	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 8006908:	2b02      	cmp	r3, #2
{
 800690a:	4604      	mov	r4, r0
TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800690c:	9501      	str	r5, [sp, #4]
	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800690e:	d122      	bne.n	8006956 <prvTCPNextTimeout+0x58>
	{
		/* The socket is actively connecting to a peer. */
		if( pxSocket->u.xTCP.bits.bConnPrepared )
 8006910:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006914:	071b      	lsls	r3, r3, #28
 8006916:	d51b      	bpl.n	8006950 <prvTCPNextTimeout+0x52>
		{
			/* Ethernet address has been found, use progressive timeout for
			active connect(). */
			if( pxSocket->u.xTCP.ucRepCount < 3u )
 8006918:	f890 3052 	ldrb.w	r3, [r0, #82]	; 0x52
 800691c:	2b02      	cmp	r3, #2
			{
				ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1u ) );
 800691e:	bf9d      	ittte	ls
 8006920:	f103 33ff 	addls.w	r3, r3, #4294967295
 8006924:	f640 32b8 	movwls	r2, #3000	; 0xbb8
 8006928:	fa02 f303 	lslls.w	r3, r2, r3
			}
			else
			{
				ulDelayMs = 11000UL;
 800692c:	f642 23f8 	movwhi	r3, #11000	; 0x2af8
			}
		}
		else
		{
			/* Still in the ARP phase: check every half second. */
			ulDelayMs = 500UL;
 8006930:	9301      	str	r3, [sp, #4]
		}
		else
		{
			/* ulDelayMs contains the time to wait before a re-transmission. */
		}
		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
 8006932:	9b01      	ldr	r3, [sp, #4]
 8006934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006938:	4353      	muls	r3, r2
 800693a:	4293      	cmp	r3, r2
 800693c:	bf34      	ite	cc
 800693e:	2301      	movcc	r3, #1
 8006940:	fbb3 f3f2 	udivcs	r3, r3, r2
 8006944:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		keep-alive/delayed-ACK mechanism). */
	}

	/* Return the number of clock ticks before the timer expires. */
	return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
}
 8006948:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 800694c:	b003      	add	sp, #12
 800694e:	bd30      	pop	{r4, r5, pc}
			ulDelayMs = 500UL;
 8006950:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006954:	e7ec      	b.n	8006930 <prvTCPNextTimeout+0x32>
	else if( pxSocket->u.xTCP.usTimeout == 0u )
 8006956:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1f4      	bne.n	8006948 <prvTCPNextTimeout+0x4a>
		BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 800695e:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
 8006962:	aa01      	add	r2, sp, #4
 8006964:	30dc      	adds	r0, #220	; 0xdc
 8006966:	f001 fbca 	bl	80080fe <xTCPWindowTxHasData>
		if( ulDelayMs == 0u )
 800696a:	9b01      	ldr	r3, [sp, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1e0      	bne.n	8006932 <prvTCPNextTimeout+0x34>
			if( xResult != ( BaseType_t )0 )
 8006970:	b108      	cbz	r0, 8006976 <prvTCPNextTimeout+0x78>
				ulDelayMs = 1UL;
 8006972:	2301      	movs	r3, #1
 8006974:	e7dc      	b.n	8006930 <prvTCPNextTimeout+0x32>
				ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8006976:	9501      	str	r5, [sp, #4]
 8006978:	e7db      	b.n	8006932 <prvTCPNextTimeout+0x34>
	...

0800697c <prvTCPReturnPacket.constprop.3>:
static void prvTCPReturnPacket( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer, uint32_t ulLen, BaseType_t xReleaseAfterSend )
 800697c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800697e:	4616      	mov	r6, r2
 8006980:	b08b      	sub	sp, #44	; 0x2c
	if( pxNetworkBuffer == NULL )
 8006982:	460d      	mov	r5, r1
 8006984:	b929      	cbnz	r1, 8006992 <prvTCPReturnPacket.constprop.3+0x16>
		xTempBuffer.pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8006986:	f100 0382 	add.w	r3, r0, #130	; 0x82
 800698a:	9307      	str	r3, [sp, #28]
		xTempBuffer.xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800698c:	2346      	movs	r3, #70	; 0x46
 800698e:	9308      	str	r3, [sp, #32]
		pxNetworkBuffer = &xTempBuffer;
 8006990:	ad01      	add	r5, sp, #4
		pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 8006992:	69ac      	ldr	r4, [r5, #24]
		if( pxSocket != NULL )
 8006994:	2800      	cmp	r0, #0
 8006996:	f000 80c1 	beq.w	8006b1c <prvTCPReturnPacket.constprop.3+0x1a0>
			if( pxSocket->u.xTCP.rxStream != NULL )
 800699a:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800699c:	2a00      	cmp	r2, #0
 800699e:	f000 80a4 	beq.w	8006aea <prvTCPReturnPacket.constprop.3+0x16e>
size_t uxFront = pxBuffer->uxFront;
 80069a2:	68d1      	ldr	r1, [r2, #12]
size_t uxTail = pxBuffer->uxTail;
 80069a4:	6813      	ldr	r3, [r2, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 80069a6:	6912      	ldr	r2, [r2, #16]
 80069a8:	4413      	add	r3, r2
 80069aa:	3b01      	subs	r3, #1
 80069ac:	1a5b      	subs	r3, r3, r1
	if( uxCount >= pxBuffer->LENGTH )
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d800      	bhi.n	80069b4 <prvTCPReturnPacket.constprop.3+0x38>
		uxCount -= pxBuffer->LENGTH;
 80069b2:	1a9b      	subs	r3, r3, r2
			if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 80069b4:	495d      	ldr	r1, [pc, #372]	; (8006b2c <prvTCPReturnPacket.constprop.3+0x1b0>)
 80069b6:	6c02      	ldr	r2, [r0, #64]	; 0x40
			ulSpace = FreeRTOS_min_uint32( pxSocket->u.xTCP.ulRxCurWinSize, pxTCPWindow->xSize.ulRxWindowLength );
 80069b8:	f8d0 70d0 	ldr.w	r7, [r0, #208]	; 0xd0
 80069bc:	f8d0 e0e0 	ldr.w	lr, [r0, #224]	; 0xe0
			if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 80069c0:	4011      	ands	r1, r2
 80069c2:	2900      	cmp	r1, #0
 80069c4:	f040 8093 	bne.w	8006aee <prvTCPReturnPacket.constprop.3+0x172>
 80069c8:	45be      	cmp	lr, r7
 80069ca:	4672      	mov	r2, lr
 80069cc:	bf28      	it	cs
 80069ce:	463a      	movcs	r2, r7
			if( ( ulSpace < pxSocket->u.xTCP.usCurMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usCurMSS ) )
 80069d0:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
 80069d4:	4291      	cmp	r1, r2
 80069d6:	d902      	bls.n	80069de <prvTCPReturnPacket.constprop.3+0x62>
 80069d8:	4299      	cmp	r1, r3
 80069da:	bf98      	it	ls
 80069dc:	460a      	movls	r2, r1
				ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 80069de:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
 80069e2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 80069e6:	fa22 f303 	lsr.w	r3, r2, r3
 80069ea:	428b      	cmp	r3, r1
 80069ec:	bf28      	it	cs
 80069ee:	460b      	movcs	r3, r1
			pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 80069f0:	494f      	ldr	r1, [pc, #316]	; (8006b30 <prvTCPReturnPacket.constprop.3+0x1b4>)
 80069f2:	ea01 2103 	and.w	r1, r1, r3, lsl #8
 80069f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80069fa:	430b      	orrs	r3, r1
 80069fc:	8623      	strh	r3, [r4, #48]	; 0x30
			pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 80069fe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
			pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 8006a02:	f8d0 10ec 	ldr.w	r1, [r0, #236]	; 0xec
			pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 8006a06:	f36f 0300 	bfc	r3, #0, #1
 8006a0a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
				if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 8006a0e:	b2db      	uxtb	r3, r3
			pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 8006a10:	440a      	add	r2, r1
				if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 8006a12:	0799      	lsls	r1, r3, #30
			pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 8006a14:	6442      	str	r2, [r0, #68]	; 0x44
				if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 8006a16:	d56c      	bpl.n	8006af2 <prvTCPReturnPacket.constprop.3+0x176>
					pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 8006a18:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8006a1c:	f043 0304 	orr.w	r3, r3, #4
 8006a20:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
					pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
 8006a24:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	ba1b      	rev	r3, r3
					pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8006a2c:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 8006a30:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8006a34:	ba1b      	rev	r3, r3
			vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 8006a36:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
		pxIPHeader->ucTimeToLive           = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8006a3a:	2380      	movs	r3, #128	; 0x80
 8006a3c:	75a3      	strb	r3, [r4, #22]
		pxIPHeader->usLength               = FreeRTOS_htons( ulLen );
 8006a3e:	0a33      	lsrs	r3, r6, #8
 8006a40:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8006a44:	8223      	strh	r3, [r4, #16]
 8006a46:	4f3b      	ldr	r7, [pc, #236]	; (8006b34 <prvTCPReturnPacket.constprop.3+0x1b8>)
		if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ) )
 8006a48:	b108      	cbz	r0, 8006a4e <prvTCPReturnPacket.constprop.3+0xd2>
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	b90b      	cbnz	r3, 8006a52 <prvTCPReturnPacket.constprop.3+0xd6>
			ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
 8006a4e:	f8d4 301e 	ldr.w	r3, [r4, #30]
		pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8006a52:	4939      	ldr	r1, [pc, #228]	; (8006b38 <prvTCPReturnPacket.constprop.3+0x1bc>)
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8006a54:	f8d4 201a 	ldr.w	r2, [r4, #26]
		pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 8006a58:	f8c4 301a 	str.w	r3, [r4, #26]
		vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8006a5c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8006a5e:	f8c4 201e 	str.w	r2, [r4, #30]
		vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8006a62:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8006a64:	84a3      	strh	r3, [r4, #36]	; 0x24
		pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8006a66:	880b      	ldrh	r3, [r1, #0]
		vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8006a68:	8462      	strh	r2, [r4, #34]	; 0x22
		pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8006a6a:	0a1a      	lsrs	r2, r3, #8
		pxIPHeader->usFragmentOffset = 0u;
 8006a6c:	2000      	movs	r0, #0
		pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8006a6e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		usPacketIdentifier++;
 8006a72:	3301      	adds	r3, #1
 8006a74:	800b      	strh	r3, [r1, #0]
		pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8006a76:	8262      	strh	r2, [r4, #18]
			pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0UL, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
 8006a78:	f104 010e 	add.w	r1, r4, #14
 8006a7c:	2214      	movs	r2, #20
		pxIPHeader->usFragmentOffset = 0u;
 8006a7e:	7520      	strb	r0, [r4, #20]
 8006a80:	7560      	strb	r0, [r4, #21]
			pxIPHeader->usHeaderChecksum = 0x00u;
 8006a82:	7620      	strb	r0, [r4, #24]
 8006a84:	7660      	strb	r0, [r4, #25]
			pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0UL, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
 8006a86:	f7ff f8ad 	bl	8005be4 <usGenerateChecksum>
			pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 8006a8a:	ba40      	rev16	r0, r0
 8006a8c:	43c0      	mvns	r0, r0
 8006a8e:	8320      	strh	r0, [r4, #24]
			usGenerateProtocolChecksum( (uint8_t*)pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
 8006a90:	2201      	movs	r2, #1
 8006a92:	69e9      	ldr	r1, [r5, #28]
 8006a94:	4620      	mov	r0, r4
 8006a96:	f7ff f915 	bl	8005cc4 <usGenerateProtocolChecksum>
			if( pxTCPPacket->xTCPHeader.usChecksum == 0x00u )
 8006a9a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006a9c:	b92b      	cbnz	r3, 8006aaa <prvTCPReturnPacket.constprop.3+0x12e>
				pxTCPPacket->xTCPHeader.usChecksum = 0xffffU;
 8006a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 8006aa6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
		pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 8006aaa:	360e      	adds	r6, #14
 8006aac:	61ee      	str	r6, [r5, #28]
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ),
 8006aae:	4626      	mov	r6, r4
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 8006ab0:	2100      	movs	r1, #0
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ),
 8006ab2:	f856 3f06 	ldr.w	r3, [r6, #6]!
 8006ab6:	6023      	str	r3, [r4, #0]
 8006ab8:	88b3      	ldrh	r3, [r6, #4]
 8006aba:	80a3      	strh	r3, [r4, #4]
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8006abc:	6838      	ldr	r0, [r7, #0]
 8006abe:	f8c4 0006 	str.w	r0, [r4, #6]
 8006ac2:	88bb      	ldrh	r3, [r7, #4]
 8006ac4:	80b3      	strh	r3, [r6, #4]
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	f7fb fe0c 	bl	80026e4 <xNetworkInterfaceOutput>
			vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort);
 8006acc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8006ace:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8006ad0:	84a3      	strh	r3, [r4, #36]	; 0x24
			pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 8006ad2:	f8d4 301e 	ldr.w	r3, [r4, #30]
 8006ad6:	f8c4 301a 	str.w	r3, [r4, #26]
			memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	f8c4 3006 	str.w	r3, [r4, #6]
 8006ae0:	88a3      	ldrh	r3, [r4, #4]
			vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort);
 8006ae2:	8462      	strh	r2, [r4, #34]	; 0x22
			memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8006ae4:	80b3      	strh	r3, [r6, #4]
}
 8006ae6:	b00b      	add	sp, #44	; 0x2c
 8006ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8006aea:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006aec:	e762      	b.n	80069b4 <prvTCPReturnPacket.constprop.3+0x38>
				ulSpace = 0u;
 8006aee:	2200      	movs	r2, #0
 8006af0:	e76e      	b.n	80069d0 <prvTCPReturnPacket.constprop.3+0x54>
 8006af2:	f8d0 1108 	ldr.w	r1, [r0, #264]	; 0x108
 8006af6:	ba0b      	rev	r3, r1
				pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 8006af8:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
				if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u )
 8006afc:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8006b00:	07da      	lsls	r2, r3, #31
 8006b02:	d595      	bpl.n	8006a30 <prvTCPReturnPacket.constprop.3+0xb4>
					uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) );
 8006b04:	f1a6 0228 	sub.w	r2, r6, #40	; 0x28
					if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 8006b08:	440a      	add	r2, r1
 8006b0a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006b0e:	428a      	cmp	r2, r1
						pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_FIN );
 8006b10:	bf1c      	itt	ne
 8006b12:	f023 0301 	bicne.w	r3, r3, #1
 8006b16:	f884 302f 	strbne.w	r3, [r4, #47]	; 0x2f
 8006b1a:	e789      	b.n	8006a30 <prvTCPReturnPacket.constprop.3+0xb4>
			vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 8006b1c:	f8d4 202a 	ldr.w	r2, [r4, #42]	; 0x2a
 8006b20:	f8d4 3026 	ldr.w	r3, [r4, #38]	; 0x26
 8006b24:	f8c4 2026 	str.w	r2, [r4, #38]	; 0x26
 8006b28:	e785      	b.n	8006a36 <prvTCPReturnPacket.constprop.3+0xba>
 8006b2a:	bf00      	nop
 8006b2c:	00040080 	.word	0x00040080
 8006b30:	00ffff00 	.word	0x00ffff00
 8006b34:	200001b4 	.word	0x200001b4
 8006b38:	20004e54 	.word	0x20004e54

08006b3c <prvTCPSendReset>:
	return xSendLength;
}
/*-----------------------------------------------------------*/

static BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 8006b3c:	b508      	push	{r3, lr}
	#if( ipconfigIGNORE_UNKNOWN_PACKETS == 0 )
	{
	TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 8006b3e:	6983      	ldr	r3, [r0, #24]
	const BaseType_t xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + 0u );	/* Plus 0 options. */

		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_RST;
 8006b40:	2214      	movs	r2, #20
 8006b42:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER + 0u ) << 2;
 8006b46:	2250      	movs	r2, #80	; 0x50
{
 8006b48:	4601      	mov	r1, r0
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER + 0u ) << 2;
 8006b4a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		prvTCPReturnPacket( NULL, pxNetworkBuffer, ( uint32_t ) xSendLength, pdFALSE );
 8006b4e:	2000      	movs	r0, #0
 8006b50:	2228      	movs	r2, #40	; 0x28
 8006b52:	f7ff ff13 	bl	800697c <prvTCPReturnPacket.constprop.3>
	/* Remove compiler warnings if ipconfigIGNORE_UNKNOWN_PACKETS == 1. */
	( void ) pxNetworkBuffer;

	/* The packet was not consumed. */
	return pdFAIL;
}
 8006b56:	2000      	movs	r0, #0
 8006b58:	bd08      	pop	{r3, pc}

08006b5a <prvTCPAddTxData>:
{
 8006b5a:	b510      	push	{r4, lr}
	lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 8006b5c:	6f82      	ldr	r2, [r0, #120]	; 0x78
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8006b5e:	6913      	ldr	r3, [r2, #16]
size_t uxHead = pxBuffer->uxHead;
 8006b60:	6891      	ldr	r1, [r2, #8]
{
 8006b62:	4604      	mov	r4, r0
size_t uxMid = pxBuffer->uxMid;
 8006b64:	6850      	ldr	r0, [r2, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8006b66:	4419      	add	r1, r3
 8006b68:	1a09      	subs	r1, r1, r0
	if ( uxCount >= pxBuffer->LENGTH )
 8006b6a:	428b      	cmp	r3, r1
		uxCount -= pxBuffer->LENGTH;
 8006b6c:	bf98      	it	ls
 8006b6e:	1ac9      	subls	r1, r1, r3
	if( lLength > 0 )
 8006b70:	2900      	cmp	r1, #0
 8006b72:	dd1b      	ble.n	8006bac <prvTCPAddTxData+0x52>
								( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 8006b74:	6852      	ldr	r2, [r2, #4]
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 8006b76:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 8006b7a:	f001 fa5b 	bl	8008034 <lTCPWindowTxAdd>
		if( lCount > 0 )
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	dd14      	ble.n	8006bac <prvTCPAddTxData+0x52>
			vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 8006b82:	6fa3      	ldr	r3, [r4, #120]	; 0x78
size_t uxHead = pxBuffer->uxHead;
 8006b84:	689a      	ldr	r2, [r3, #8]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8006b86:	6919      	ldr	r1, [r3, #16]
size_t uxMid = pxBuffer->uxMid;
 8006b88:	685c      	ldr	r4, [r3, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8006b8a:	440a      	add	r2, r1
 8006b8c:	1b12      	subs	r2, r2, r4
	if ( uxCount >= pxBuffer->LENGTH )
 8006b8e:	4291      	cmp	r1, r2
	pxBuffer->uxMid += uxCount;
 8006b90:	685c      	ldr	r4, [r3, #4]
		uxCount -= pxBuffer->LENGTH;
 8006b92:	bf98      	it	ls
 8006b94:	1a52      	subls	r2, r2, r1
	pxBuffer->uxMid += uxCount;
 8006b96:	4290      	cmp	r0, r2
 8006b98:	bf94      	ite	ls
 8006b9a:	1822      	addls	r2, r4, r0
 8006b9c:	18a2      	addhi	r2, r4, r2
 8006b9e:	605a      	str	r2, [r3, #4]
	if( pxBuffer->uxMid >= pxBuffer->LENGTH )
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	428a      	cmp	r2, r1
		pxBuffer->uxMid -= pxBuffer->LENGTH;
 8006ba4:	bf22      	ittt	cs
 8006ba6:	685a      	ldrcs	r2, [r3, #4]
 8006ba8:	1a51      	subcs	r1, r2, r1
 8006baa:	6059      	strcs	r1, [r3, #4]
 8006bac:	bd10      	pop	{r4, pc}

08006bae <vTCPStateChange>:
{
 8006bae:	b570      	push	{r4, r5, r6, lr}
BaseType_t bBefore = ( BaseType_t ) NOW_CONNECTED( pxSocket->u.xTCP.ucTCPState );	/* Was it connected ? */
 8006bb0:	f890 2053 	ldrb.w	r2, [r0, #83]	; 0x53
 8006bb4:	2a04      	cmp	r2, #4
{
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	460e      	mov	r6, r1
BaseType_t bBefore = ( BaseType_t ) NOW_CONNECTED( pxSocket->u.xTCP.ucTCPState );	/* Was it connected ? */
 8006bba:	d92f      	bls.n	8006c1c <vTCPStateChange+0x6e>
 8006bbc:	f1b2 0508 	subs.w	r5, r2, #8
 8006bc0:	bf18      	it	ne
 8006bc2:	2501      	movne	r5, #1
BaseType_t bAfter  = ( BaseType_t ) NOW_CONNECTED( eTCPState );						/* Is it connected now ? */
 8006bc4:	2e04      	cmp	r6, #4
 8006bc6:	d901      	bls.n	8006bcc <vTCPStateChange+0x1e>
 8006bc8:	2e08      	cmp	r6, #8
 8006bca:	d166      	bne.n	8006c9a <vTCPStateChange+0xec>
	if( bBefore != bAfter )
 8006bcc:	2d00      	cmp	r5, #0
 8006bce:	d159      	bne.n	8006c84 <vTCPStateChange+0xd6>
		if( eTCPState == eCLOSED )
 8006bd0:	b956      	cbnz	r6, 8006be8 <vTCPStateChange+0x3a>
			if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 8006bd2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006bd6:	f013 0f06 	tst.w	r3, #6
 8006bda:	d004      	beq.n	8006be6 <vTCPStateChange+0x38>
				if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 8006bdc:	071b      	lsls	r3, r3, #28
 8006bde:	d402      	bmi.n	8006be6 <vTCPStateChange+0x38>
					FreeRTOS_closesocket( pxSocket );
 8006be0:	4620      	mov	r0, r4
 8006be2:	f7ff fbd3 	bl	800638c <FreeRTOS_closesocket>
FreeRTOS_Socket_t *xParent = NULL;
 8006be6:	2500      	movs	r5, #0
	pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 8006be8:	f884 6053 	strb.w	r6, [r4, #83]	; 0x53
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
 8006bec:	f7fd fec8 	bl	8004980 <xTaskGetTickCount>
		pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 8006bf0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
 8006bf4:	6620      	str	r0, [r4, #96]	; 0x60
		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8006bf6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8006bfa:	f36f 0341 	bfc	r3, #1, #1
 8006bfe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.ucKeepRepCount = 0u;
 8006c02:	2300      	movs	r3, #0
 8006c04:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8006c08:	f7fd feba 	bl	8004980 <xTaskGetTickCount>
 8006c0c:	65e0      	str	r0, [r4, #92]	; 0x5c
	if( xParent != NULL )
 8006c0e:	2d00      	cmp	r5, #0
 8006c10:	d057      	beq.n	8006cc2 <vTCPStateChange+0x114>
		vSocketWakeUpUser( xParent );
 8006c12:	4628      	mov	r0, r5
}
 8006c14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		vSocketWakeUpUser( xParent );
 8006c18:	f7ff bc32 	b.w	8006480 <vSocketWakeUpUser>
 8006c1c:	2500      	movs	r5, #0
 8006c1e:	e7d1      	b.n	8006bc4 <vTCPStateChange+0x16>
 8006c20:	4625      	mov	r5, r4
					if( xParent->u.xTCP.pxPeerSocket == NULL )
 8006c22:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8006c24:	b903      	cbnz	r3, 8006c28 <vTCPStateChange+0x7a>
						xParent->u.xTCP.pxPeerSocket = pxSocket;
 8006c26:	656c      	str	r4, [r5, #84]	; 0x54
					xParent->xEventBits |= eSOCKET_ACCEPT;
 8006c28:	682b      	ldr	r3, [r5, #0]
 8006c2a:	f043 0104 	orr.w	r1, r3, #4
 8006c2e:	6029      	str	r1, [r5, #0]
						if( ( xParent->xSelectBits & eSELECT_READ ) != 0 )
 8006c30:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8006c32:	07c9      	lsls	r1, r1, #31
							xParent->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
 8006c34:	bf44      	itt	mi
 8006c36:	f443 7382 	orrmi.w	r3, r3, #260	; 0x104
 8006c3a:	602b      	strmi	r3, [r5, #0]
				pxSocket->u.xTCP.pxPeerSocket = NULL;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	6563      	str	r3, [r4, #84]	; 0x54
				pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 8006c40:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
				pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 8006c44:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8006c48:	f043 0302 	orr.w	r3, r3, #2
 8006c4c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006c50:	2a0b      	cmp	r2, #11
 8006c52:	d8c9      	bhi.n	8006be8 <vTCPStateChange+0x3a>
 8006c54:	2301      	movs	r3, #1
 8006c56:	fa03 f202 	lsl.w	r2, r3, r2
 8006c5a:	f640 3381 	movw	r3, #2945	; 0xb81
 8006c5e:	421a      	tst	r2, r3
 8006c60:	d0c2      	beq.n	8006be8 <vTCPStateChange+0x3a>
			pxSocket->u.xTCP.usTimeout = 0u;
 8006c62:	2300      	movs	r3, #0
 8006c64:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8006c68:	e7be      	b.n	8006be8 <vTCPStateChange+0x3a>
				pxSocket->xEventBits |= eSOCKET_CONNECT;
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	f043 0108 	orr.w	r1, r3, #8
 8006c70:	6021      	str	r1, [r4, #0]
					if( pxSocket->xSelectBits & eSELECT_WRITE )
 8006c72:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006c74:	0788      	lsls	r0, r1, #30
 8006c76:	d401      	bmi.n	8006c7c <vTCPStateChange+0xce>
FreeRTOS_Socket_t *xParent = NULL;
 8006c78:	2500      	movs	r5, #0
 8006c7a:	e7e9      	b.n	8006c50 <vTCPStateChange+0xa2>
						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 8006c7c:	f443 7302 	orr.w	r3, r3, #520	; 0x208
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	e7e5      	b.n	8006c50 <vTCPStateChange+0xa2>
			pxSocket->xEventBits |= eSOCKET_CLOSED;
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	f043 0120 	orr.w	r1, r3, #32
 8006c8a:	6021      	str	r1, [r4, #0]
				if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
 8006c8c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006c8e:	0749      	lsls	r1, r1, #29
					pxSocket->xEventBits |= ( eSELECT_EXCEPT << SOCKET_EVENT_BIT_COUNT );
 8006c90:	bf44      	itt	mi
 8006c92:	f443 6384 	orrmi.w	r3, r3, #1056	; 0x420
 8006c96:	6023      	strmi	r3, [r4, #0]
 8006c98:	e7ee      	b.n	8006c78 <vTCPStateChange+0xca>
	if( bBefore != bAfter )
 8006c9a:	2d00      	cmp	r5, #0
 8006c9c:	d1a3      	bne.n	8006be6 <vTCPStateChange+0x38>
			if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8006c9e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006ca2:	0759      	lsls	r1, r3, #29
 8006ca4:	d5e1      	bpl.n	8006c6a <vTCPStateChange+0xbc>
				if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8006ca6:	0718      	lsls	r0, r3, #28
 8006ca8:	d4ba      	bmi.n	8006c20 <vTCPStateChange+0x72>
					xParent = pxSocket->u.xTCP.pxPeerSocket;
 8006caa:	6d65      	ldr	r5, [r4, #84]	; 0x54
					configASSERT( xParent != NULL );
 8006cac:	2d00      	cmp	r5, #0
 8006cae:	d1b8      	bne.n	8006c22 <vTCPStateChange+0x74>
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	e7fe      	b.n	8006cc0 <vTCPStateChange+0x112>
 8006cc2:	bd70      	pop	{r4, r5, r6, pc}

08006cc4 <prvTCPPrepareSend>:
{
 8006cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( ( *ppxNetworkBuffer ) != NULL )
 8006cc8:	680b      	ldr	r3, [r1, #0]
{
 8006cca:	b087      	sub	sp, #28
 8006ccc:	4604      	mov	r4, r0
 8006cce:	468b      	mov	fp, r1
 8006cd0:	4690      	mov	r8, r2
	if( ( *ppxNetworkBuffer ) != NULL )
 8006cd2:	b333      	cbz	r3, 8006d22 <prvTCPPrepareSend+0x5e>
		pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 8006cd4:	699d      	ldr	r5, [r3, #24]
	pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_ACK;
 8006cd6:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8006cda:	f043 0310 	orr.w	r3, r3, #16
 8006cde:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
	if( pxSocket->u.xTCP.txStream != NULL )
 8006ce2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
	lStreamPos = 0;
 8006ce4:	2600      	movs	r6, #0
	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8006ce6:	f104 09dc 	add.w	r9, r4, #220	; 0xdc
	lStreamPos = 0;
 8006cea:	9605      	str	r6, [sp, #20]
	if( pxSocket->u.xTCP.txStream != NULL )
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 80bb 	beq.w	8006e68 <prvTCPPrepareSend+0x1a4>
		if( pxSocket->u.xTCP.usCurMSS > 1u )
 8006cf2:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d970      	bls.n	8006ddc <prvTCPPrepareSend+0x118>
			lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 8006cfa:	aa05      	add	r2, sp, #20
 8006cfc:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
 8006d00:	4648      	mov	r0, r9
 8006d02:	f001 fa2a 	bl	800815a <ulTCPWindowTxGet>
		if( lDataLen > 0 )
 8006d06:	1e06      	subs	r6, r0, #0
 8006d08:	f340 80a5 	ble.w	8006e56 <prvTCPPrepareSend+0x192>
	if( xBufferAllocFixedSize != pdFALSE )
 8006d0c:	4b76      	ldr	r3, [pc, #472]	; (8006ee8 <prvTCPPrepareSend+0x224>)
			pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 8006d0e:	f8db 7000 	ldr.w	r7, [fp]
	if( xBufferAllocFixedSize != pdFALSE )
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	b143      	cbz	r3, 8006d28 <prvTCPPrepareSend+0x64>
	if( xResize != pdFALSE )
 8006d16:	2f00      	cmp	r7, #0
 8006d18:	f040 8097 	bne.w	8006e4a <prvTCPPrepareSend+0x186>
		lNeeded = ( int32_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 8006d1c:	f240 43c6 	movw	r3, #1222	; 0x4c6
 8006d20:	e00d      	b.n	8006d3e <prvTCPPrepareSend+0x7a>
		pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8006d22:	f100 0582 	add.w	r5, r0, #130	; 0x82
 8006d26:	e7d6      	b.n	8006cd6 <prvTCPPrepareSend+0x12>
			( int32_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen );
 8006d28:	f108 0336 	add.w	r3, r8, #54	; 0x36
 8006d2c:	4433      	add	r3, r6
	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
 8006d2e:	2b46      	cmp	r3, #70	; 0x46
 8006d30:	bfb8      	it	lt
 8006d32:	2346      	movlt	r3, #70	; 0x46
		xResize = ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < (size_t)lNeeded );
 8006d34:	b11f      	cbz	r7, 8006d3e <prvTCPPrepareSend+0x7a>
 8006d36:	69fa      	ldr	r2, [r7, #28]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	f080 8086 	bcs.w	8006e4a <prvTCPPrepareSend+0x186>
		pxReturn = pxGetNetworkBufferWithDescriptor( ( uint32_t ) lNeeded, 0u );
 8006d3e:	2100      	movs	r1, #0
 8006d40:	4618      	mov	r0, r3
 8006d42:	9303      	str	r3, [sp, #12]
 8006d44:	f001 fbd8 	bl	80084f8 <pxGetNetworkBufferWithDescriptor>
		if( pxReturn != NULL )
 8006d48:	4682      	mov	sl, r0
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	d074      	beq.n	8006e38 <prvTCPPrepareSend+0x174>
            pxReturn->xDataLength = lNeeded;
 8006d4e:	9b03      	ldr	r3, [sp, #12]
 8006d50:	61c3      	str	r3, [r0, #28]
 8006d52:	6980      	ldr	r0, [r0, #24]
			if( pxNetworkBuffer )
 8006d54:	2f00      	cmp	r7, #0
 8006d56:	d072      	beq.n	8006e3e <prvTCPPrepareSend+0x17a>
				memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8006d58:	69fa      	ldr	r2, [r7, #28]
 8006d5a:	69b9      	ldr	r1, [r7, #24]
 8006d5c:	f001 fdd1 	bl	8008902 <memcpy>
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8006d60:	4638      	mov	r0, r7
 8006d62:	f001 fba5 	bl	80084b0 <vReleaseNetworkBufferAndDescriptor>
				*ppxNetworkBuffer = pxNewBuffer;
 8006d66:	f8cb a000 	str.w	sl, [fp]
				uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 8006d6a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8006d6c:	9905      	ldr	r1, [sp, #20]
 8006d6e:	6903      	ldr	r3, [r0, #16]
 8006d70:	6802      	ldr	r2, [r0, #0]
 8006d72:	4419      	add	r1, r3
 8006d74:	1a89      	subs	r1, r1, r2
	if ( uxCount >= pxBuffer->LENGTH )
 8006d76:	428b      	cmp	r3, r1
 8006d78:	d800      	bhi.n	8006d7c <prvTCPPrepareSend+0xb8>
		uxCount -= pxBuffer->LENGTH;
 8006d7a:	1ac9      	subs	r1, r1, r3
				pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 8006d7c:	f8da 5018 	ldr.w	r5, [sl, #24]
				ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 8006d80:	2301      	movs	r3, #1
				pucSendData = pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8006d82:	f108 0236 	add.w	r2, r8, #54	; 0x36
				ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	442a      	add	r2, r5
 8006d8a:	4633      	mov	r3, r6
 8006d8c:	f7ff fd61 	bl	8006852 <uxStreamBufferGet>
				if( ( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) )
 8006d90:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8006d94:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8006d98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d9c:	045b      	lsls	r3, r3, #17
 8006d9e:	0c5b      	lsrs	r3, r3, #17
 8006da0:	2b40      	cmp	r3, #64	; 0x40
 8006da2:	d11b      	bne.n	8006ddc <prvTCPPrepareSend+0x118>
					ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 8006da4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8006da6:	9905      	ldr	r1, [sp, #20]
 8006da8:	6893      	ldr	r3, [r2, #8]
 8006daa:	6912      	ldr	r2, [r2, #16]
 8006dac:	4413      	add	r3, r2
 8006dae:	1a5b      	subs	r3, r3, r1
	if ( uxCount >= pxBuffer->LENGTH )
 8006db0:	429a      	cmp	r2, r3
		uxCount -= pxBuffer->LENGTH;
 8006db2:	bf98      	it	ls
 8006db4:	1a9b      	subls	r3, r3, r2
					if( ulDistance == ulDataGot )
 8006db6:	4298      	cmp	r0, r3
 8006db8:	d110      	bne.n	8006ddc <prvTCPPrepareSend+0x118>
						pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 8006dba:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8006dbe:	f043 0301 	orr.w	r3, r3, #1
 8006dc2:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
						pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 8006dc6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006dca:	4433      	add	r3, r6
 8006dcc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
						pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8006dd0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dd8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) )
 8006ddc:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8006de0:	2b05      	cmp	r3, #5
 8006de2:	d16a      	bne.n	8006eba <prvTCPPrepareSend+0x1f6>
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8006de4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006de8:	0699      	lsls	r1, r3, #26
 8006dea:	d51d      	bpl.n	8006e28 <prvTCPPrepareSend+0x164>
			( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 8006dec:	4648      	mov	r0, r9
 8006dee:	f001 f980 	bl	80080f2 <xTCPWindowTxDone>
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8006df2:	b1c8      	cbz	r0, 8006e28 <prvTCPPrepareSend+0x164>
			pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 8006df4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006df8:	f36f 1345 	bfc	r3, #5, #1
 8006dfc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 8006e00:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8006e04:	f043 0301 	orr.w	r3, r3, #1
 8006e08:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
			pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8006e0c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8006e10:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 8006e14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8006e18:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8006e1c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 8006e20:	2106      	movs	r1, #6
 8006e22:	4620      	mov	r0, r4
 8006e24:	f7ff fec3 	bl	8006bae <vTCPStateChange>
			if( pxSocket->u.xTCP.ucKeepRepCount > 3u )
 8006e28:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d91d      	bls.n	8006e6c <prvTCPPrepareSend+0x1a8>
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8006e30:	2108      	movs	r1, #8
 8006e32:	4620      	mov	r0, r4
 8006e34:	f7ff febb 	bl	8006bae <vTCPStateChange>
				lDataLen = -1;
 8006e38:	f04f 36ff 	mov.w	r6, #4294967295
 8006e3c:	e00c      	b.n	8006e58 <prvTCPPrepareSend+0x194>
				memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8006e3e:	2246      	movs	r2, #70	; 0x46
 8006e40:	f104 0182 	add.w	r1, r4, #130	; 0x82
 8006e44:	f001 fd5d 	bl	8008902 <memcpy>
 8006e48:	e78d      	b.n	8006d66 <prvTCPPrepareSend+0xa2>
		pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 8006e4a:	f108 0336 	add.w	r3, r8, #54	; 0x36
 8006e4e:	4433      	add	r3, r6
 8006e50:	61fb      	str	r3, [r7, #28]
 8006e52:	46ba      	mov	sl, r7
 8006e54:	e787      	b.n	8006d66 <prvTCPPrepareSend+0xa2>
	if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) )
 8006e56:	d0c1      	beq.n	8006ddc <prvTCPPrepareSend+0x118>
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 8006e58:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006e5c:	079b      	lsls	r3, r3, #30
 8006e5e:	d12e      	bne.n	8006ebe <prvTCPPrepareSend+0x1fa>
}
 8006e60:	4630      	mov	r0, r6
 8006e62:	b007      	add	sp, #28
 8006e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lDataLen = 0;
 8006e68:	461e      	mov	r6, r3
 8006e6a:	e7b7      	b.n	8006ddc <prvTCPPrepareSend+0x118>
			if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 8006e6c:	bb3e      	cbnz	r6, 8006ebe <prvTCPPrepareSend+0x1fa>
 8006e6e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006e72:	07da      	lsls	r2, r3, #31
 8006e74:	d4f0      	bmi.n	8006e58 <prvTCPPrepareSend+0x194>
				TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastAliveTime;
 8006e76:	f7fd fd83 	bl	8004980 <xTaskGetTickCount>
 8006e7a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
				if( pxSocket->u.xTCP.ucKeepRepCount )
 8006e7c:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
				TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastAliveTime;
 8006e80:	1ac0      	subs	r0, r0, r3
				xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * configTICK_RATE_HZ );
 8006e82:	f644 6220 	movw	r2, #20000	; 0x4e20
 8006e86:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006e8a:	2900      	cmp	r1, #0
 8006e8c:	bf08      	it	eq
 8006e8e:	4613      	moveq	r3, r2
				if( xAge > xMax )
 8006e90:	4283      	cmp	r3, r0
 8006e92:	d2e1      	bcs.n	8006e58 <prvTCPPrepareSend+0x194>
					pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 8006e94:	f7fd fd74 	bl	8004980 <xTaskGetTickCount>
					pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 8006e98:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
					pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 8006e9c:	65e0      	str	r0, [r4, #92]	; 0x5c
					pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 8006e9e:	f043 0302 	orr.w	r3, r3, #2
 8006ea2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
					pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500 ) );
 8006ea6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8006eaa:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
					pxSocket->u.xTCP.ucKeepRepCount++;
 8006eae:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8006eb8:	e7ce      	b.n	8006e58 <prvTCPPrepareSend+0x194>
	if( ( lDataLen > 0 ) ||
 8006eba:	2e00      	cmp	r6, #0
 8006ebc:	d0cc      	beq.n	8006e58 <prvTCPPrepareSend+0x194>
		pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_PSH );
 8006ebe:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8006ec2:	f108 0214 	add.w	r2, r8, #20
 8006ec6:	0092      	lsls	r2, r2, #2
		pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_PSH );
 8006ec8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8006ecc:	f885 202e 	strb.w	r2, [r5, #46]	; 0x2e
		if( lDataLen != 0l )
 8006ed0:	b93e      	cbnz	r6, 8006ee2 <prvTCPPrepareSend+0x21e>
		pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_ACK;
 8006ed2:	f043 0310 	orr.w	r3, r3, #16
		lDataLen += ( int32_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 8006ed6:	f108 0828 	add.w	r8, r8, #40	; 0x28
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_PSH;
 8006eda:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
		lDataLen += ( int32_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 8006ede:	4446      	add	r6, r8
	return lDataLen;
 8006ee0:	e7be      	b.n	8006e60 <prvTCPPrepareSend+0x19c>
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_PSH;
 8006ee2:	f043 0318 	orr.w	r3, r3, #24
 8006ee6:	e7f6      	b.n	8006ed6 <prvTCPPrepareSend+0x212>
 8006ee8:	08008db4 	.word	0x08008db4

08006eec <prvTCPSendRepeated>:
{
 8006eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef0:	4607      	mov	r7, r0
 8006ef2:	4688      	mov	r8, r1
 8006ef4:	2508      	movs	r5, #8
int32_t lResult = 0;
 8006ef6:	2400      	movs	r4, #0
		xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8006ef8:	2200      	movs	r2, #0
 8006efa:	4641      	mov	r1, r8
 8006efc:	4638      	mov	r0, r7
 8006efe:	f7ff fee1 	bl	8006cc4 <prvTCPPrepareSend>
		if( xSendLength <= 0 )
 8006f02:	1e06      	subs	r6, r0, #0
 8006f04:	dd08      	ble.n	8006f18 <prvTCPSendRepeated+0x2c>
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8006f06:	4632      	mov	r2, r6
 8006f08:	f8d8 1000 	ldr.w	r1, [r8]
 8006f0c:	4638      	mov	r0, r7
 8006f0e:	f7ff fd35 	bl	800697c <prvTCPReturnPacket.constprop.3>
	for( uxIndex = 0u; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8006f12:	3d01      	subs	r5, #1
		lResult += xSendLength;
 8006f14:	4434      	add	r4, r6
	for( uxIndex = 0u; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8006f16:	d1ef      	bne.n	8006ef8 <prvTCPSendRepeated+0xc>
}
 8006f18:	4620      	mov	r0, r4
 8006f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006f20 <xTCPSocketCheck>:
{
 8006f20:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 8006f22:	f890 3053 	ldrb.w	r3, [r0, #83]	; 0x53
 8006f26:	2b04      	cmp	r3, #4
{
 8006f28:	b085      	sub	sp, #20
 8006f2a:	4604      	mov	r4, r0
	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 8006f2c:	d903      	bls.n	8006f36 <xTCPSocketCheck+0x16>
 8006f2e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006f30:	b10b      	cbz	r3, 8006f36 <xTCPSocketCheck+0x16>
		prvTCPAddTxData( pxSocket );
 8006f32:	f7ff fe12 	bl	8006b5a <prvTCPAddTxData>
		if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8006f36:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8006f38:	bb69      	cbnz	r1, 8006f96 <xTCPSocketCheck+0x76>
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
 8006f3a:	f894 6053 	ldrb.w	r6, [r4, #83]	; 0x53
 8006f3e:	2e04      	cmp	r6, #4
 8006f40:	d948      	bls.n	8006fd4 <xTCPSocketCheck+0xb4>
		pxNetworkBuffer = NULL;
 8006f42:	a904      	add	r1, sp, #16
 8006f44:	2300      	movs	r3, #0
 8006f46:	f841 3d08 	str.w	r3, [r1, #-8]!
		lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f7ff ffce 	bl	8006eec <prvTCPSendRepeated>
		if( pxNetworkBuffer != NULL )
 8006f50:	9802      	ldr	r0, [sp, #8]
 8006f52:	b108      	cbz	r0, 8006f58 <xTCPSocketCheck+0x38>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8006f54:	f001 faac 	bl	80084b0 <vReleaseNetworkBufferAndDescriptor>
		prvTCPNextTimeout( pxSocket );
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f7ff fcd0 	bl	80068fe <prvTCPNextTimeout>
		switch( pxSocket->u.xTCP.ucTCPState )
 8006f5e:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 8006f62:	2a08      	cmp	r2, #8
 8006f64:	d805      	bhi.n	8006f72 <xTCPSocketCheck+0x52>
 8006f66:	2301      	movs	r3, #1
 8006f68:	4093      	lsls	r3, r2
 8006f6a:	f240 1223 	movw	r2, #291	; 0x123
 8006f6e:	4213      	tst	r3, r2
 8006f70:	d12b      	bne.n	8006fca <xTCPSocketCheck+0xaa>
			TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastActTime;
 8006f72:	f7fd fd05 	bl	8004980 <xTaskGetTickCount>
 8006f76:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006f78:	1ac0      	subs	r0, r0, r3
			if( xAge > ( ipconfigTCP_HANG_PROTECTION_TIME * configTICK_RATE_HZ ) )
 8006f7a:	f247 5330 	movw	r3, #30000	; 0x7530
 8006f7e:	4298      	cmp	r0, r3
 8006f80:	d907      	bls.n	8006f92 <xTCPSocketCheck+0x72>
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8006f82:	2108      	movs	r1, #8
 8006f84:	4620      	mov	r0, r4
 8006f86:	f7ff fe12 	bl	8006bae <vTCPStateChange>
				if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8006f8a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006f8e:	075a      	lsls	r2, r3, #29
 8006f90:	d444      	bmi.n	800701c <xTCPSocketCheck+0xfc>
					xResult = -1;
 8006f92:	2001      	movs	r0, #1
 8006f94:	e01a      	b.n	8006fcc <xTCPSocketCheck+0xac>
			if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 8006f96:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006f9a:	0698      	lsls	r0, r3, #26
 8006f9c:	d418      	bmi.n	8006fd0 <xTCPSocketCheck+0xb0>
				if( pxSocket->u.xTCP.ucTCPState != eCLOSED )
 8006f9e:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8006fa2:	b11b      	cbz	r3, 8006fac <xTCPSocketCheck+0x8c>
					prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER, ipconfigZERO_COPY_TX_DRIVER );
 8006fa4:	2228      	movs	r2, #40	; 0x28
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f7ff fce8 	bl	800697c <prvTCPReturnPacket.constprop.3>
				if( prvTCPNextTimeout( pxSocket ) > 1 )
 8006fac:	4620      	mov	r0, r4
 8006fae:	f7ff fca6 	bl	80068fe <prvTCPNextTimeout>
 8006fb2:	2801      	cmp	r0, #1
 8006fb4:	bf94      	ite	ls
 8006fb6:	2500      	movls	r5, #0
 8006fb8:	2501      	movhi	r5, #1
			if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8006fba:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006fbc:	b118      	cbz	r0, 8006fc6 <xTCPSocketCheck+0xa6>
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8006fbe:	f001 fa77 	bl	80084b0 <vReleaseNetworkBufferAndDescriptor>
				pxSocket->u.xTCP.pxAckMessage = NULL;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	67e3      	str	r3, [r4, #124]	; 0x7c
	if( xReady == pdFALSE )
 8006fc6:	2d00      	cmp	r5, #0
 8006fc8:	d0b7      	beq.n	8006f3a <xTCPSocketCheck+0x1a>
BaseType_t xResult = 0;
 8006fca:	2000      	movs	r0, #0
}
 8006fcc:	b005      	add	sp, #20
 8006fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
BaseType_t xReady = pdFALSE;
 8006fd0:	2500      	movs	r5, #0
 8006fd2:	e7f2      	b.n	8006fba <xTCPSocketCheck+0x9a>
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
 8006fd4:	2e02      	cmp	r6, #2
 8006fd6:	d1bf      	bne.n	8006f58 <xTCPSocketCheck+0x38>
		if( pxSocket->u.xTCP.ucRepCount >= 3u )
 8006fd8:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d904      	bls.n	8006fea <xTCPSocketCheck+0xca>
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8006fe0:	2108      	movs	r1, #8
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f7ff fde3 	bl	8006bae <vTCPStateChange>
 8006fe8:	e7b6      	b.n	8006f58 <xTCPSocketCheck+0x38>
		else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( pxSocket ) == pdTRUE ) )
 8006fea:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 8006fee:	f015 0508 	ands.w	r5, r5, #8
 8006ff2:	d170      	bne.n	80070d6 <xTCPSocketCheck+0x1b6>
 8006ff4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 8006ff6:	a902      	add	r1, sp, #8
 8006ff8:	ba1b      	rev	r3, r3
 8006ffa:	a801      	add	r0, sp, #4
	ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 8006ffc:	9301      	str	r3, [sp, #4]
	eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 8006ffe:	f7fe f9d1 	bl	80053a4 <eARPGetCacheEntry>
	switch( eReturned )
 8007002:	2801      	cmp	r0, #1
 8007004:	d012      	beq.n	800702c <xTCPSocketCheck+0x10c>
		pxSocket->u.xTCP.ucRepCount++;
 8007006:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
		FreeRTOS_OutputARPRequest( ulRemoteIP );
 800700a:	9801      	ldr	r0, [sp, #4]
		pxSocket->u.xTCP.ucRepCount++;
 800700c:	3301      	adds	r3, #1
 800700e:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
		FreeRTOS_OutputARPRequest( ulRemoteIP );
 8007012:	f7fe fa2f 	bl	8005474 <FreeRTOS_OutputARPRequest>
 8007016:	e79f      	b.n	8006f58 <xTCPSocketCheck+0x38>
			uxWinSize >>= 1;
 8007018:	085b      	lsrs	r3, r3, #1
 800701a:	e06d      	b.n	80070f8 <xTCPSocketCheck+0x1d8>
					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800701c:	071b      	lsls	r3, r3, #28
 800701e:	d402      	bmi.n	8007026 <xTCPSocketCheck+0x106>
						vSocketClose( pxSocket );
 8007020:	4620      	mov	r0, r4
 8007022:	f7ff f9c9 	bl	80063b8 <vSocketClose>
					xResult = -1;
 8007026:	f04f 30ff 	mov.w	r0, #4294967295
	return xResult;
 800702a:	e7cf      	b.n	8006fcc <xTCPSocketCheck+0xac>
        ulInitialSequenceNumber = ipconfigRAND32();
 800702c:	f001 fd42 	bl	8008ab4 <rand>
        if( 0 == ulInitialSequenceNumber )
 8007030:	4607      	mov	r7, r0
 8007032:	2800      	cmp	r0, #0
 8007034:	d090      	beq.n	8006f58 <xTCPSocketCheck+0x38>
		pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8007036:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.ucRepCount = 0u;
 800703a:	f884 5052 	strb.w	r5, [r4, #82]	; 0x52
		pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 800703e:	f043 0308 	orr.w	r3, r3, #8
 8007042:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, '\0', sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8007046:	2246      	movs	r2, #70	; 0x46
 8007048:	4629      	mov	r1, r5
 800704a:	f104 0082 	add.w	r0, r4, #130	; 0x82
 800704e:	f001 fc7d 	bl	800894c <memset>
		memcpy( &pxTCPPacket->xEthernetHeader.xSourceAddress, &xEthAddress, sizeof( xEthAddress ) );
 8007052:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007056:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
		pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800705a:	2308      	movs	r3, #8
 800705c:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
		pxIPHeader->ucVersionHeaderLength = 0x45u;
 8007060:	2345      	movs	r3, #69	; 0x45
 8007062:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
		pxIPHeader->usLength = FreeRTOS_htons( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 8007066:	2338      	movs	r3, #56	; 0x38
 8007068:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800706c:	2380      	movs	r3, #128	; 0x80
 800706e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
		pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 8007072:	2306      	movs	r3, #6
 8007074:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
		pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8007078:	4b34      	ldr	r3, [pc, #208]	; (800714c <xTCPSocketCheck+0x22c>)
		pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 800707a:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
		pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8007082:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		memcpy( &pxTCPPacket->xEthernetHeader.xSourceAddress, &xEthAddress, sizeof( xEthAddress ) );
 8007084:	9802      	ldr	r0, [sp, #8]
 8007086:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800708a:	ba1b      	rev	r3, r3
		pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800708c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8007090:	0a13      	lsrs	r3, r2, #8
 8007092:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8007096:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
		pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8007098:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800709c:	0a13      	lsrs	r3, r2, #8
 800709e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80070a2:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
		pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50u;
 80070a6:	2350      	movs	r3, #80	; 0x50
 80070a8:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		ulMSS = FreeRTOS_min_uint32( ( uint32_t ) REDUCED_MSS_THROUGH_INTERNET, ulMSS );
	}

	FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );

	pxSocket->u.xTCP.usInitMSS = pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
 80070ac:	f44f 6391 	mov.w	r3, #1160	; 0x488
		pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 80070b0:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
		pxIPHeader->usLength = FreeRTOS_htons( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 80070b4:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0ul;
 80070b8:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 80070bc:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_SYN;
 80070c0:	f884 60b1 	strb.w	r6, [r4, #177]	; 0xb1
	pxSocket->u.xTCP.usInitMSS = pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
 80070c4:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 80070c8:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
		pxSocket->u.xTCP.ulRxCurWinSize = pxSocket->u.xTCP.usInitMSS;
 80070cc:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
		prvTCPCreateWindow( pxSocket );
 80070d0:	4620      	mov	r0, r4
 80070d2:	f7ff fbfe 	bl	80068d2 <prvTCPCreateWindow>
uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 80070d6:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
	pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffu );
 80070da:	f884 20bb 	strb.w	r2, [r4, #187]	; 0xbb
	pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) TCP_OPT_MSS;
 80070de:	2302      	movs	r3, #2
 80070e0:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) TCP_OPT_MSS_LEN;
 80070e4:	2304      	movs	r3, #4
 80070e6:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
	pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 80070ea:	0a13      	lsrs	r3, r2, #8
 80070ec:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
		uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 80070f0:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 80070f4:	4353      	muls	r3, r2
 80070f6:	2200      	movs	r2, #0
		while( uxWinSize > 0xfffful )
 80070f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070fc:	b2d1      	uxtb	r1, r2
 80070fe:	f102 0201 	add.w	r2, r2, #1
 8007102:	d289      	bcs.n	8007018 <xTCPSocketCheck+0xf8>
		pxTCPHeader->ucOptdata[ 4 ] = TCP_OPT_NOOP;
 8007104:	2301      	movs	r3, #1
 8007106:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		pxTCPHeader->ucOptdata[ uxOptionsLength + 0 ] = TCP_OPT_NOOP;
 800710a:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
		pxTCPHeader->ucOptdata[ uxOptionsLength + 1 ] = TCP_OPT_NOOP;
 800710e:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		pxTCPHeader->ucOptdata[ uxOptionsLength + 2 ] = TCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
 8007112:	2304      	movs	r3, #4
 8007114:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		pxTCPHeader->ucOptdata[ uxOptionsLength + 3 ] = 2;	/* 2: length of this option. */
 8007118:	2302      	movs	r3, #2
 800711a:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
			pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800711e:	2380      	movs	r3, #128	; 0x80
 8007120:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
			pxSocket->u.xTCP.ucRepCount++;
 8007124:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
		pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 8007128:	f884 10c9 	strb.w	r1, [r4, #201]	; 0xc9
		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
 800712c:	2203      	movs	r2, #3
			pxSocket->u.xTCP.ucRepCount++;
 800712e:	3301      	adds	r3, #1
		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
 8007130:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
		pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( TCP_OPT_WSOPT_LEN );
 8007134:	f884 20be 	strb.w	r2, [r4, #190]	; 0xbe
		pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 8007138:	f884 10bf 	strb.w	r1, [r4, #191]	; 0xbf
			pxSocket->u.xTCP.ucRepCount++;
 800713c:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
			prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8007140:	2234      	movs	r2, #52	; 0x34
 8007142:	2100      	movs	r1, #0
 8007144:	4620      	mov	r0, r4
 8007146:	f7ff fc19 	bl	800697c <prvTCPReturnPacket.constprop.3>
 800714a:	e705      	b.n	8006f58 <xTCPSocketCheck+0x38>
 800714c:	200001b4 	.word	0x200001b4

08007150 <prvTCPHandleFin.isra.2>:
static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
 8007150:	b538      	push	{r3, r4, r5, lr}
	if( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u )
 8007152:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8007156:	f8d1 302a 	ldr.w	r3, [r1, #42]	; 0x2a
static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
 800715a:	4604      	mov	r4, r0
	if( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u )
 800715c:	07d0      	lsls	r0, r2, #31
		pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1u;
 800715e:	bf42      	ittt	mi
 8007160:	f8d4 20f0 	ldrmi.w	r2, [r4, #240]	; 0xf0
 8007164:	3201      	addmi	r2, #1
 8007166:	f8c4 20ec 	strmi.w	r2, [r4, #236]	; 0xec
	if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800716a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
 800716e:	460d      	mov	r5, r1
	if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8007170:	0651      	lsls	r1, r2, #25
 8007172:	d418      	bmi.n	80071a6 <prvTCPHandleFin.isra.2+0x56>
		pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8007174:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8007178:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800717c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007180:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
	if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 8007184:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8007188:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800718c:	f012 0f01 	tst.w	r2, #1
 8007190:	d120      	bne.n	80071d4 <prvTCPHandleFin.isra.2+0x84>
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8007192:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_FIN;
 8007196:	2311      	movs	r3, #17
 8007198:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
		vTCPStateChange( pxSocket, eLAST_ACK );
 800719c:	210a      	movs	r1, #10
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800719e:	4620      	mov	r0, r4
 80071a0:	f7ff fd05 	bl	8006bae <vTCPStateChange>
 80071a4:	e020      	b.n	80071e8 <prvTCPHandleFin.isra.2+0x98>
uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 80071a6:	0e1a      	lsrs	r2, r3, #24
 80071a8:	0219      	lsls	r1, r3, #8
 80071aa:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 80071ae:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 80071b2:	0a1b      	lsrs	r3, r3, #8
 80071b4:	430a      	orrs	r2, r1
 80071b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80071ba:	4313      	orrs	r3, r2
		if( ulAckNr == pxTCPWindow->tx.ulFINSequenceNumber + 1u )
 80071bc:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 80071c0:	3201      	adds	r2, #1
 80071c2:	4293      	cmp	r3, r2
			pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 80071c4:	bf02      	ittt	eq
 80071c6:	f894 3042 	ldrbeq.w	r3, [r4, #66]	; 0x42
 80071ca:	f043 0301 	orreq.w	r3, r3, #1
 80071ce:	f884 3042 	strbeq.w	r3, [r4, #66]	; 0x42
 80071d2:	e7d7      	b.n	8007184 <prvTCPHandleFin.isra.2+0x34>
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1u;
 80071d4:	3301      	adds	r3, #1
 80071d6:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 80071da:	f994 3041 	ldrsb.w	r3, [r4, #65]	; 0x41
 80071de:	2b00      	cmp	r3, #0
 80071e0:	db12      	blt.n	8007208 <prvTCPHandleFin.isra.2+0xb8>
			pxTCPHeader->ucTCPFlags = 0u;
 80071e2:	2300      	movs	r3, #0
 80071e4:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
	pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80071e8:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 80071ec:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	if( pxTCPHeader->ucTCPFlags != 0u )
 80071f0:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 80071f4:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
 80071f8:	b108      	cbz	r0, 80071fe <prvTCPHandleFin.isra.2+0xae>
		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 80071fa:	f103 0028 	add.w	r0, r3, #40	; 0x28
	pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 80071fe:	3314      	adds	r3, #20
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
 8007206:	bd38      	pop	{r3, r4, r5, pc}
			if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 8007208:	0793      	lsls	r3, r2, #30
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800720a:	bf54      	ite	pl
 800720c:	2310      	movpl	r3, #16
				pxTCPHeader->ucTCPFlags = 0u;
 800720e:	2300      	movmi	r3, #0
 8007210:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8007214:	2108      	movs	r1, #8
 8007216:	e7c2      	b.n	800719e <prvTCPHandleFin.isra.2+0x4e>

08007218 <xProcessReceivedTCPPacket>:
 *		prvTCPSendRepeated()
 *			prvTCPReturnPacket()		// Prepare for returning
 *			xNetworkInterfaceOutput()	// Sends data to the NIC
*/
BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 8007218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
uint32_t ulRemoteIP;
uint16_t xRemotePort;
BaseType_t xResult = pdPASS;

    /* Check for a minimum packet size. */
    if( pxNetworkBuffer->xDataLength >= 
 800721c:	69c3      	ldr	r3, [r0, #28]
{
 800721e:	b089      	sub	sp, #36	; 0x24
    if( pxNetworkBuffer->xDataLength >= 
 8007220:	2b35      	cmp	r3, #53	; 0x35
{
 8007222:	9005      	str	r0, [sp, #20]
    if( pxNetworkBuffer->xDataLength >= 
 8007224:	d952      	bls.n	80072cc <xProcessReceivedTCPPacket+0xb4>
TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 8007226:	f8d0 9018 	ldr.w	r9, [r0, #24]
    {
        ucTCPFlags = pxTCPPacket->xTCPHeader.ucTCPFlags;
        ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
        xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
        ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
        xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800722a:	f8b9 3022 	ldrh.w	r3, [r9, #34]	; 0x22
        ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800722e:	f8d9 501a 	ldr.w	r5, [r9, #26]
        xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
 8007232:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
        ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
 8007236:	f8d9 001e 	ldr.w	r0, [r9, #30]
        ucTCPFlags = pxTCPPacket->xTCPHeader.ucTCPFlags;
 800723a:	f899 602f 	ldrb.w	r6, [r9, #47]	; 0x2f
        xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800723e:	0a1a      	lsrs	r2, r3, #8
 8007240:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
        ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 8007244:	0e2a      	lsrs	r2, r5, #24
 8007246:	ea42 6405 	orr.w	r4, r2, r5, lsl #24
 800724a:	022a      	lsls	r2, r5, #8
 800724c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8007250:	4322      	orrs	r2, r4
        xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
 8007252:	0a0c      	lsrs	r4, r1, #8
 8007254:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
        ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
 8007258:	0207      	lsls	r7, r0, #8
 800725a:	0e04      	lsrs	r4, r0, #24
 800725c:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
        ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 8007260:	0a2d      	lsrs	r5, r5, #8
        ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
 8007262:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
 8007266:	0a00      	lsrs	r0, r0, #8
        ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 8007268:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
        ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
 800726c:	433c      	orrs	r4, r7
 800726e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00

        /* Find the destination socket, and if not found: return a socket listing to
        the destination PORT. */
        pxSocket = ( FreeRTOS_Socket_t * )pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePort );
 8007272:	432a      	orrs	r2, r5
 8007274:	b29b      	uxth	r3, r3
 8007276:	b289      	uxth	r1, r1
 8007278:	4320      	orrs	r0, r4
 800727a:	f7ff f95f 	bl	800653c <pxTCPSocketLookup>
    else
    {
        return pdFAIL;
    }

	if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) == pdFALSE ) )
 800727e:	4605      	mov	r5, r0
 8007280:	b168      	cbz	r0, 800729e <xProcessReceivedTCPPacket+0x86>
 8007282:	f890 a053 	ldrb.w	sl, [r0, #83]	; 0x53
 8007286:	f1ba 0f0b 	cmp.w	sl, #11
 800728a:	f200 830e 	bhi.w	80078aa <xProcessReceivedTCPPacket+0x692>
 800728e:	2301      	movs	r3, #1
 8007290:	fa03 f30a 	lsl.w	r3, r3, sl
 8007294:	f640 3281 	movw	r2, #2945	; 0xb81
 8007298:	4213      	tst	r3, r2
 800729a:	f000 8306 	beq.w	80078aa <xProcessReceivedTCPPacket+0x692>
		the other party will get a ECONN error.  There are two exceptions:
		1) A packet that already has the RST flag set.
		2) A packet that only has the ACK flag set.
		A packet with only the ACK flag set might be the last ACK in
	 	a three-way hand-shake that closes a connection. */
		if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_ACK ) &&
 800729e:	f006 031f 	and.w	r3, r6, #31
 80072a2:	2b10      	cmp	r3, #16
 80072a4:	d012      	beq.n	80072cc <xProcessReceivedTCPPacket+0xb4>
				FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %lxip:%u to port %u\n",
					prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), ulRemoteIP, xRemotePort, xLocalPort ) );
				}
				#endif /* ipconfigHAS_DEBUG_PRINTF */

				if( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u )
 80072a6:	f016 0404 	ands.w	r4, r6, #4
 80072aa:	d10f      	bne.n	80072cc <xProcessReceivedTCPPacket+0xb4>
				{
					prvTCPSendReset( pxNetworkBuffer );
 80072ac:	9805      	ldr	r0, [sp, #20]
 80072ae:	f7ff fc45 	bl	8006b3c <prvTCPSendReset>
		xResult = pdPASS;
	}

	/* pdPASS being returned means the buffer has been consumed. */
	return xResult;
}
 80072b2:	4620      	mov	r0, r4
 80072b4:	b009      	add	sp, #36	; 0x24
 80072b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
            new socket when a connection comes in. */
            pxReturn = NULL;

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 80072ba:	f8b5 204e 	ldrh.w	r2, [r5, #78]	; 0x4e
 80072be:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d304      	bcc.n	80072d0 <xProcessReceivedTCPPacket+0xb8>
                    FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );

                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
                    prvTCPSendReset( pxNetworkBuffer );
 80072c6:	4630      	mov	r0, r6
 80072c8:	f7ff fc38 	bl	8006b3c <prvTCPSendReset>
	if( uxCount >= pxBuffer->LENGTH )
 80072cc:	2400      	movs	r4, #0
 80072ce:	e7f0      	b.n	80072b2 <xProcessReceivedTCPPacket+0x9a>
                FreeRTOS_Socket_t *pxNewSocket = ( FreeRTOS_Socket_t * )
 80072d0:	4620      	mov	r0, r4
 80072d2:	2206      	movs	r2, #6
 80072d4:	4651      	mov	r1, sl
 80072d6:	f7fe ff59 	bl	800618c <FreeRTOS_socket>
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 80072da:	1e43      	subs	r3, r0, #1
 80072dc:	3303      	adds	r3, #3
                FreeRTOS_Socket_t *pxNewSocket = ( FreeRTOS_Socket_t * )
 80072de:	4604      	mov	r4, r0
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 80072e0:	d8f1      	bhi.n	80072c6 <xProcessReceivedTCPPacket+0xae>
 */
static BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t *pxNewSocket, FreeRTOS_Socket_t *pxSocket )
{
struct freertos_sockaddr xAddress;

	pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 80072e2:	69eb      	ldr	r3, [r5, #28]
 80072e4:	61c3      	str	r3, [r0, #28]
	pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 80072e6:	6a2b      	ldr	r3, [r5, #32]
 80072e8:	6203      	str	r3, [r0, #32]
	pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 80072ea:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 80072ee:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
	pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 80072f2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80072f4:	66c3      	str	r3, [r0, #108]	; 0x6c
	pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 80072f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80072f8:	6703      	str	r3, [r0, #112]	; 0x70
	pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 80072fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072fc:	6643      	str	r3, [r0, #100]	; 0x64
	pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 80072fe:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8007300:	6683      	str	r3, [r0, #104]	; 0x68
	pxNewSocket->u.xTCP.uxRxWinSize  = pxSocket->u.xTCP.uxRxWinSize;
 8007302:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
 8007306:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
	pxNewSocket->u.xTCP.uxTxWinSize  = pxSocket->u.xTCP.uxTxWinSize;
 800730a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 800730e:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
	{
		/* Child socket of listening sockets will inherit the Socket Set
		Otherwise the owner has no chance of including it into the set. */
		if( pxSocket->pxSocketSet )
 8007312:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007314:	b123      	cbz	r3, 8007320 <xProcessReceivedTCPPacket+0x108>
		{
			pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 8007316:	6283      	str	r3, [r0, #40]	; 0x28
			pxNewSocket->xSelectBits = pxSocket->xSelectBits | eSELECT_READ | eSELECT_EXCEPT;
 8007318:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800731a:	f043 0305 	orr.w	r3, r3, #5
 800731e:	62c3      	str	r3, [r0, #44]	; 0x2c
		}
	}
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */

	/* And bind it to the same local port as its parent. */
	xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 8007320:	4bd1      	ldr	r3, [pc, #836]	; (8007668 <xProcessReceivedTCPPacket+0x450>)
	xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 8007322:	8caa      	ldrh	r2, [r5, #36]	; 0x24
	xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	9307      	str	r3, [sp, #28]
	xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 8007328:	0a13      	lsrs	r3, r2, #8
 800732a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800732e:	f8ad 301a 	strh.w	r3, [sp, #26]
		orphan temporarily.  Once this socket is really connected, the owner of
		the server socket will be notified. */

		/* When bPassQueued is true, the socket is an orphan until it gets
		connected. */
		pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8007332:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
		pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 8007336:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8007338:	f043 0304 	orr.w	r3, r3, #4
 800733c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
		}
	}
	#endif

	pxSocket->u.xTCP.usChildCount++;
 8007340:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
 8007344:	3301      	adds	r3, #1
 8007346:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
		pxSocket->u.xTCP.usChildCount,
		pxSocket->u.xTCP.usBacklog,
		pxSocket->u.xTCP.usChildCount == 1u ? "" : "ren" ) );

	/* Now bind the child socket to the same port as the listening socket. */
	if( vSocketBind ( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 800734a:	2208      	movs	r2, #8
 800734c:	2301      	movs	r3, #1
 800734e:	a906      	add	r1, sp, #24
 8007350:	4620      	mov	r0, r4
 8007352:	f7fe ffb3 	bl	80062bc <vSocketBind>
 8007356:	2800      	cmp	r0, #0
 8007358:	f000 82c6 	beq.w	80078e8 <xProcessReceivedTCPPacket+0x6d0>
	{
		FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
		vSocketClose( pxNewSocket );
 800735c:	4620      	mov	r0, r4
 800735e:	f7ff f82b 	bl	80063b8 <vSocketClose>
 8007362:	e7b3      	b.n	80072cc <xProcessReceivedTCPPacket+0xb4>
			if( ( ucTCPFlags & ipTCP_FLAG_RST ) != 0u )
 8007364:	0771      	lsls	r1, r6, #29
 8007366:	d504      	bpl.n	8007372 <xProcessReceivedTCPPacket+0x15a>
				vTCPStateChange( pxSocket, eCLOSED );
 8007368:	4621      	mov	r1, r4
 800736a:	4628      	mov	r0, r5
 800736c:	f7ff fc1f 	bl	8006bae <vTCPStateChange>
 8007370:	e79f      	b.n	80072b2 <xProcessReceivedTCPPacket+0x9a>
			else if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) )
 8007372:	f006 041f 	and.w	r4, r6, #31
 8007376:	2c02      	cmp	r4, #2
 8007378:	d102      	bne.n	8007380 <xProcessReceivedTCPPacket+0x168>
 800737a:	f1ba 0f04 	cmp.w	sl, #4
 800737e:	d8a5      	bhi.n	80072cc <xProcessReceivedTCPPacket+0xb4>
				memcpy( pxSocket->u.xTCP.xPacket.u.ucLastPacket + lOffset, pxNetworkBuffer->pucEthernetBuffer + lOffset, ipSIZE_OF_TCP_HEADER );
 8007380:	9b05      	ldr	r3, [sp, #20]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	f105 01a4 	add.w	r1, r5, #164	; 0xa4
 8007388:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800738c:	3336      	adds	r3, #54	; 0x36
 800738e:	f852 0b04 	ldr.w	r0, [r2], #4
 8007392:	f841 0b04 	str.w	r0, [r1], #4
 8007396:	429a      	cmp	r2, r3
 8007398:	d1f9      	bne.n	800738e <xProcessReceivedTCPPacket+0x176>
 800739a:	462c      	mov	r4, r5
 800739c:	e2db      	b.n	8007956 <xProcessReceivedTCPPacket+0x73e>
		if( pucPtr[ 0 ] == TCP_OPT_END )
 800739e:	782b      	ldrb	r3, [r5, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 8306 	beq.w	80079b2 <xProcessReceivedTCPPacket+0x79a>
		if( pucPtr[ 0 ] == TCP_OPT_NOOP)
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d101      	bne.n	80073ae <xProcessReceivedTCPPacket+0x196>
            pucPtr++;
 80073aa:	3501      	adds	r5, #1
 80073ac:	e2fe      	b.n	80079ac <xProcessReceivedTCPPacket+0x794>
        UBaseType_t xRemainingOptionsBytes = pucLast - pucPtr;
 80073ae:	eba8 0205 	sub.w	r2, r8, r5
        if( xRemainingOptionsBytes < 2 )
 80073b2:	2a01      	cmp	r2, #1
 80073b4:	f240 82fd 	bls.w	80079b2 <xProcessReceivedTCPPacket+0x79a>
		else if( pucPtr[ 0 ] == TCP_OPT_WSOPT )
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d111      	bne.n	80073e0 <xProcessReceivedTCPPacket+0x1c8>
            if( xRemainingOptionsBytes < TCP_OPT_WSOPT_LEN ||
 80073bc:	2a02      	cmp	r2, #2
 80073be:	f000 82f8 	beq.w	80079b2 <xProcessReceivedTCPPacket+0x79a>
 80073c2:	786b      	ldrb	r3, [r5, #1]
 80073c4:	2b03      	cmp	r3, #3
 80073c6:	f040 82f4 	bne.w	80079b2 <xProcessReceivedTCPPacket+0x79a>
			pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 80073ca:	78ab      	ldrb	r3, [r5, #2]
 80073cc:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
			pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 80073d0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80073d4:	f043 0310 	orr.w	r3, r3, #16
 80073d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			pucPtr += TCP_OPT_WSOPT_LEN;
 80073dc:	3503      	adds	r5, #3
 80073de:	e2e5      	b.n	80079ac <xProcessReceivedTCPPacket+0x794>
		else if( pucPtr[ 0 ] == TCP_OPT_MSS )
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d12a      	bne.n	800743a <xProcessReceivedTCPPacket+0x222>
            if( xRemainingOptionsBytes < TCP_OPT_MSS_LEN ||
 80073e4:	2a03      	cmp	r2, #3
 80073e6:	f240 82e4 	bls.w	80079b2 <xProcessReceivedTCPPacket+0x79a>
 80073ea:	786b      	ldrb	r3, [r5, #1]
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	f040 82e0 	bne.w	80079b2 <xProcessReceivedTCPPacket+0x79a>
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 80073f2:	78aa      	ldrb	r2, [r5, #2]
			  ( ( ( uint32_t )apChr[1] ) ) );
 80073f4:	78eb      	ldrb	r3, [r5, #3]
	return ( uint16_t )
 80073f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
 80073fa:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80073fe:	4293      	cmp	r3, r2
 8007400:	d019      	beq.n	8007436 <xProcessReceivedTCPPacket+0x21e>
                if( uxNewMSS == 0 )
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 82d5 	beq.w	80079b2 <xProcessReceivedTCPPacket+0x79a>
			if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
 8007408:	4293      	cmp	r3, r2
 800740a:	d214      	bcs.n	8007436 <xProcessReceivedTCPPacket+0x21e>
				pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 800740c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
				pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 8007410:	f8a4 319a 	strh.w	r3, [r4, #410]	; 0x19a
				pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 8007414:	f042 0201 	orr.w	r2, r2, #1
 8007418:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
				pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 800741c:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 8007420:	fbb2 f2f3 	udiv	r2, r2, r3
 8007424:	435a      	muls	r2, r3
 8007426:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
				pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 800742a:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
				pxSocket->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
 800742e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
				pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 8007432:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
				pucPtr += TCP_OPT_MSS_LEN;
 8007436:	3504      	adds	r5, #4
 8007438:	e2b8      	b.n	80079ac <xProcessReceivedTCPPacket+0x794>
			unsigned char len = pucPtr[ 1 ];
 800743a:	786e      	ldrb	r6, [r5, #1]
			if( len < 2 || len > xRemainingOptionsBytes )
 800743c:	2e01      	cmp	r6, #1
 800743e:	f240 82b8 	bls.w	80079b2 <xProcessReceivedTCPPacket+0x79a>
 8007442:	42b2      	cmp	r2, r6
 8007444:	f0c0 82b5 	bcc.w	80079b2 <xProcessReceivedTCPPacket+0x79a>
				if( pucPtr[0] == TCP_OPT_SACK_A )
 8007448:	2b05      	cmp	r3, #5
 800744a:	d116      	bne.n	800747a <xProcessReceivedTCPPacket+0x262>
					len -= 2;
 800744c:	3e02      	subs	r6, #2
 800744e:	b2f6      	uxtb	r6, r6
 8007450:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
 8007454:	ea4f 0bca 	mov.w	fp, sl, lsl #3
 8007458:	f10b 030a 	add.w	r3, fp, #10
 800745c:	18eb      	adds	r3, r5, r3
 800745e:	f105 070a 	add.w	r7, r5, #10
 8007462:	9302      	str	r3, [sp, #8]
					while( len >= 8 )
 8007464:	9b02      	ldr	r3, [sp, #8]
 8007466:	42bb      	cmp	r3, r7
 8007468:	d109      	bne.n	800747e <xProcessReceivedTCPPacket+0x266>
 800746a:	ebca 1a4a 	rsb	sl, sl, sl, lsl #5
 800746e:	f10b 0b02 	add.w	fp, fp, #2
 8007472:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007476:	445d      	add	r5, fp
 8007478:	b2f6      	uxtb	r6, r6
			pucPtr += len;
 800747a:	4435      	add	r5, r6
 800747c:	e296      	b.n	80079ac <xProcessReceivedTCPPacket+0x794>
			( ( ( uint32_t )apChr[1] ) << 16) |
 800747e:	f817 2c03 	ldrb.w	r2, [r7, #-3]
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 8007482:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8007486:	f817 1c08 	ldrb.w	r1, [r7, #-8]
			( ( ( uint32_t )apChr[2] ) << 8) |
 800748a:	f817 0c02 	ldrb.w	r0, [r7, #-2]
			( ( ( uint32_t )apChr[1] ) << 16) |
 800748e:	0412      	lsls	r2, r2, #16
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 8007490:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
			( ( ( uint32_t )apChr[3] ) );
 8007494:	f817 3c01 	ldrb.w	r3, [r7, #-1]
			( ( ( uint32_t )apChr[2] ) << 8) |
 8007498:	431a      	orrs	r2, r3
			( ( ( uint32_t )apChr[1] ) << 16) |
 800749a:	f817 3c07 	ldrb.w	r3, [r7, #-7]
 800749e:	041b      	lsls	r3, r3, #16
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 80074a0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
			( ( ( uint32_t )apChr[3] ) );
 80074a4:	f817 1c05 	ldrb.w	r1, [r7, #-5]
			( ( ( uint32_t )apChr[2] ) << 8) |
 80074a8:	430b      	orrs	r3, r1
 80074aa:	f817 1c06 	ldrb.w	r1, [r7, #-6]
					uint32_t ulCount = ulTCPWindowTxSack( &pxSocket->u.xTCP.xTCPWindow, ulFirst, ulLast );
 80074ae:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80074b2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80074b6:	9803      	ldr	r0, [sp, #12]
 80074b8:	f000 fedb 	bl	8008272 <ulTCPWindowTxSack>
 80074bc:	4603      	mov	r3, r0
						if( ( pxSocket->u.xTCP.txStream  != NULL ) && ( ulCount > 0 ) )
 80074be:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80074c0:	b190      	cbz	r0, 80074e8 <xProcessReceivedTCPPacket+0x2d0>
 80074c2:	b18b      	cbz	r3, 80074e8 <xProcessReceivedTCPPacket+0x2d0>
							uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 80074c4:	9a04      	ldr	r2, [sp, #16]
 80074c6:	9200      	str	r2, [sp, #0]
 80074c8:	2200      	movs	r2, #0
 80074ca:	4611      	mov	r1, r2
 80074cc:	f7ff f9c1 	bl	8006852 <uxStreamBufferGet>
							pxSocket->xEventBits |= eSOCKET_SEND;
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	f043 0202 	orr.w	r2, r3, #2
 80074d6:	6022      	str	r2, [r4, #0]
								if( pxSocket->xSelectBits & eSELECT_WRITE )
 80074d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80074da:	0792      	lsls	r2, r2, #30
									pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 80074dc:	bf42      	ittt	mi
 80074de:	f443 7300 	orrmi.w	r3, r3, #512	; 0x200
 80074e2:	f043 0302 	orrmi.w	r3, r3, #2
 80074e6:	6023      	strmi	r3, [r4, #0]
 80074e8:	3708      	adds	r7, #8
 80074ea:	e7bb      	b.n	8007464 <xProcessReceivedTCPPacket+0x24c>
		lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER );
 80074ec:	1aed      	subs	r5, r5, r3
 80074ee:	e298      	b.n	8007a22 <xProcessReceivedTCPPacket+0x80a>
			ulSpace = ( uint32_t )pxSocket->u.xTCP.uxRxStreamSize;
 80074f0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80074f2:	e2d2      	b.n	8007a9a <xProcessReceivedTCPPacket+0x882>
		pxTCPWindow->ucOptionLength = 0u;
 80074f4:	2300      	movs	r3, #0
 80074f6:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 80074fa:	e2f6      	b.n	8007aea <xProcessReceivedTCPPacket+0x8d2>
	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 80074fc:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8007500:	2b04      	cmp	r3, #4
 8007502:	f240 8307 	bls.w	8007b14 <xProcessReceivedTCPPacket+0x8fc>
 8007506:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800750a:	07d8      	lsls	r0, r3, #31
 800750c:	f140 8302 	bpl.w	8007b14 <xProcessReceivedTCPPacket+0x8fc>
		pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 8007510:	f369 0300 	bfi	r3, r9, #0, #1
 8007514:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		pxTCPHeader->ucOptdata[ 1 ] = TCP_OPT_MSS_LEN;
 8007518:	f04f 0904 	mov.w	r9, #4
		pxTCPHeader->ucOptdata[ 0 ] = TCP_OPT_MSS;
 800751c:	2302      	movs	r3, #2
 800751e:	f88b 3036 	strb.w	r3, [fp, #54]	; 0x36
		pxTCPHeader->ucOptdata[ 1 ] = TCP_OPT_MSS_LEN;
 8007522:	f88b 9037 	strb.w	r9, [fp, #55]	; 0x37
		pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 8007526:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
		pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffu );
 800752a:	f88b 3039 	strb.w	r3, [fp, #57]	; 0x39
		pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 800752e:	0a1a      	lsrs	r2, r3, #8
 8007530:	f88b 2038 	strb.w	r2, [fp, #56]	; 0x38
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8007534:	2360      	movs	r3, #96	; 0x60
 8007536:	e2eb      	b.n	8007b10 <xProcessReceivedTCPPacket+0x8f8>
uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 8007538:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
	pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffu );
 800753c:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
	pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) TCP_OPT_MSS;
 8007540:	2302      	movs	r3, #2
 8007542:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
	pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) TCP_OPT_MSS_LEN;
 8007546:	2304      	movs	r3, #4
 8007548:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
	pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 800754c:	0a13      	lsrs	r3, r2, #8
 800754e:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
		uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 8007552:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8007556:	4353      	muls	r3, r2
 8007558:	2200      	movs	r2, #0
		while( uxWinSize > 0xfffful )
 800755a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800755e:	b2d1      	uxtb	r1, r2
 8007560:	f102 0201 	add.w	r2, r2, #1
 8007564:	d27e      	bcs.n	8007664 <xProcessReceivedTCPPacket+0x44c>
		pxTCPHeader->ucOptdata[ 4 ] = TCP_OPT_NOOP;
 8007566:	2301      	movs	r3, #1
		pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 8007568:	f884 10c9 	strb.w	r1, [r4, #201]	; 0xc9
		pxTCPHeader->ucOptdata[ 4 ] = TCP_OPT_NOOP;
 800756c:	f886 303a 	strb.w	r3, [r6, #58]	; 0x3a
		pxTCPHeader->ucOptdata[ uxOptionsLength + 0 ] = TCP_OPT_NOOP;
 8007570:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
		pxTCPHeader->ucOptdata[ uxOptionsLength + 1 ] = TCP_OPT_NOOP;
 8007574:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
		pxTCPHeader->ucOptdata[ uxOptionsLength + 3 ] = 2;	/* 2: length of this option. */
 8007578:	2302      	movs	r3, #2
 800757a:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_SYN | ipTCP_FLAG_ACK;
 800757e:	2312      	movs	r3, #18
		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
 8007580:	2203      	movs	r2, #3
		pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 8007582:	f886 103d 	strb.w	r1, [r6, #61]	; 0x3d
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_SYN | ipTCP_FLAG_ACK;
 8007586:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
		pxTCPHeader->ucOptdata[ uxOptionsLength + 2 ] = TCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
 800758a:	2104      	movs	r1, #4
				pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800758c:	2380      	movs	r3, #128	; 0x80
 800758e:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
 8007592:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
		pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( TCP_OPT_WSOPT_LEN );
 8007596:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
		pxTCPHeader->ucOptdata[ uxOptionsLength + 2 ] = TCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
 800759a:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
				vTCPStateChange( pxSocket, eSYN_RECEIVED );
 800759e:	4620      	mov	r0, r4
 80075a0:	f7ff fb05 	bl	8006bae <vTCPStateChange>
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u; /* because we send a TCP_SYN. */
 80075a4:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
				pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 80075a8:	3701      	adds	r7, #1
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u; /* because we send a TCP_SYN. */
 80075aa:	3301      	adds	r3, #1
				pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 80075ac:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
 80075b0:	f8c4 70ec 	str.w	r7, [r4, #236]	; 0xec
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u; /* because we send a TCP_SYN. */
 80075b4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80075b8:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
				xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 80075bc:	2634      	movs	r6, #52	; 0x34
									 ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulCurrentSequenceNumber );
 80075be:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
 80075c2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 80075c6:	9905      	ldr	r1, [sp, #20]
	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
 80075c8:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
	if( pxSocket->u.xTCP.rxStream != NULL )
 80075cc:	6f62      	ldr	r2, [r4, #116]	; 0x74
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 80075ce:	f8d1 e018 	ldr.w	lr, [r1, #24]
	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
 80075d2:	443b      	add	r3, r7
 80075d4:	1a18      	subs	r0, r3, r0
	if( pxSocket->u.xTCP.rxStream != NULL )
 80075d6:	2a00      	cmp	r2, #0
 80075d8:	f000 8150 	beq.w	800787c <xProcessReceivedTCPPacket+0x664>
size_t uxFront = pxBuffer->uxFront;
 80075dc:	f8d2 c00c 	ldr.w	ip, [r2, #12]
size_t uxTail = pxBuffer->uxTail;
 80075e0:	6813      	ldr	r3, [r2, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 80075e2:	6912      	ldr	r2, [r2, #16]
 80075e4:	4413      	add	r3, r2
 80075e6:	3b01      	subs	r3, #1
 80075e8:	eba3 030c 	sub.w	r3, r3, ip
	if( uxCount >= pxBuffer->LENGTH )
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d800      	bhi.n	80075f2 <xProcessReceivedTCPPacket+0x3da>
		uxCount -= pxBuffer->LENGTH;
 80075f0:	1a9b      	subs	r3, r3, r2
	pxSocket->u.xTCP.ulRxCurWinSize = FreeRTOS_min_uint32( ulFrontSpace, pxSocket->u.xTCP.ulRxCurWinSize );
 80075f2:	4298      	cmp	r0, r3
 80075f4:	bf94      	ite	ls
 80075f6:	f8c4 00d0 	strls.w	r0, [r4, #208]	; 0xd0
 80075fa:	f8c4 30d0 	strhi.w	r3, [r4, #208]	; 0xd0
 80075fe:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
		if( ( ulReceiveLength > 0 ) &&							/* Data was sent to this socket. */
 8007600:	2d00      	cmp	r5, #0
 8007602:	f000 813f 	beq.w	8007884 <xProcessReceivedTCPPacket+0x66c>
	lRxSpace = (int32_t)( pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber );
 8007606:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007608:	1bdf      	subs	r7, r3, r7
			lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usCurMSS );
 800760a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
		if( ( ulReceiveLength > 0 ) &&							/* Data was sent to this socket. */
 800760e:	ebb7 0f43 	cmp.w	r7, r3, lsl #1
 8007612:	f2c0 8137 	blt.w	8007884 <xProcessReceivedTCPPacket+0x66c>
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 8007616:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
 800761a:	065b      	lsls	r3, r3, #25
 800761c:	f100 8132 	bmi.w	8007884 <xProcessReceivedTCPPacket+0x66c>
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 8007620:	2e28      	cmp	r6, #40	; 0x28
 8007622:	f040 812f 	bne.w	8007884 <xProcessReceivedTCPPacket+0x66c>
			( xSendLength == ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options to be sent. */
 8007626:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800762a:	2b05      	cmp	r3, #5
 800762c:	f040 812a 	bne.w	8007884 <xProcessReceivedTCPPacket+0x66c>
			( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) &&	/* Connection established. */
 8007630:	f89e 302f 	ldrb.w	r3, [lr, #47]	; 0x2f
 8007634:	2b10      	cmp	r3, #16
 8007636:	f040 8125 	bne.w	8007884 <xProcessReceivedTCPPacket+0x66c>
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800763a:	4281      	cmp	r1, r0
 800763c:	d004      	beq.n	8007648 <xProcessReceivedTCPPacket+0x430>
				if( pxSocket->u.xTCP.pxAckMessage != 0 )
 800763e:	b108      	cbz	r0, 8007644 <xProcessReceivedTCPPacket+0x42c>
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8007640:	f000 ff36 	bl	80084b0 <vReleaseNetworkBufferAndDescriptor>
				pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 8007644:	9b05      	ldr	r3, [sp, #20]
 8007646:	67e3      	str	r3, [r4, #124]	; 0x7c
			if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||	/* Received a small message. */
 8007648:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800764c:	429d      	cmp	r5, r3
 800764e:	d303      	bcc.n	8007658 <xProcessReceivedTCPPacket+0x440>
 8007650:	ebb7 0f43 	cmp.w	r7, r3, lsl #1
 8007654:	f280 8114 	bge.w	8007880 <xProcessReceivedTCPPacket+0x668>
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_SHORT_DELAY_MS );
 8007658:	2302      	movs	r3, #2
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_LONGER_DELAY_MS );
 800765a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
			*ppxNetworkBuffer = NULL;
 800765e:	2300      	movs	r3, #0
 8007660:	9305      	str	r3, [sp, #20]
 8007662:	e22b      	b.n	8007abc <xProcessReceivedTCPPacket+0x8a4>
			uxWinSize >>= 1;
 8007664:	085b      	lsrs	r3, r3, #1
 8007666:	e778      	b.n	800755a <xProcessReceivedTCPPacket+0x342>
 8007668:	200001b4 	.word	0x200001b4
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800766c:	9b05      	ldr	r3, [sp, #20]
 800766e:	699f      	ldr	r7, [r3, #24]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8007670:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
		usExpect |= ( uint16_t ) ipTCP_FLAG_SYN;
 8007674:	2a02      	cmp	r2, #2
 8007676:	bf14      	ite	ne
 8007678:	2110      	movne	r1, #16
 800767a:	2112      	moveq	r1, #18
	if( ( ucTCPFlags & 0x17u ) != usExpect )
 800767c:	f003 0317 	and.w	r3, r3, #23
 8007680:	428b      	cmp	r3, r1
 8007682:	d012      	beq.n	80076aa <xProcessReceivedTCPPacket+0x492>
		vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8007684:	2108      	movs	r1, #8
 8007686:	4620      	mov	r0, r4
 8007688:	f7ff fa91 	bl	8006bae <vTCPStateChange>
		pxTCPHeader->ucTCPFlags |= ipTCP_FLAG_RST;
 800768c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 8007690:	f109 0628 	add.w	r6, r9, #40	; 0x28
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8007694:	f109 0914 	add.w	r9, r9, #20
		pxTCPHeader->ucTCPFlags |= ipTCP_FLAG_RST;
 8007698:	f043 0304 	orr.w	r3, r3, #4
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800769c:	ea4f 0989 	mov.w	r9, r9, lsl #2
		pxTCPHeader->ucTCPFlags |= ipTCP_FLAG_RST;
 80076a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80076a4:	f887 902e 	strb.w	r9, [r7, #46]	; 0x2e
 80076a8:	e789      	b.n	80075be <xProcessReceivedTCPPacket+0x3a6>
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 80076aa:	f8d7 3026 	ldr.w	r3, [r7, #38]	; 0x26
 80076ae:	0e1e      	lsrs	r6, r3, #24
 80076b0:	0219      	lsls	r1, r3, #8
 80076b2:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
 80076b6:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 80076ba:	0a1b      	lsrs	r3, r3, #8
 80076bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80076c0:	430e      	orrs	r6, r1
 80076c2:	431e      	orrs	r6, r3
		pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 80076c4:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80076c6:	f8a4 3196 	strh.w	r3, [r4, #406]	; 0x196
		if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 80076ca:	2a02      	cmp	r2, #2
		pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 80076cc:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80076ce:	f8a4 3194 	strh.w	r3, [r4, #404]	; 0x194
		if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 80076d2:	d13f      	bne.n	8007754 <xProcessReceivedTCPPacket+0x53c>
			pxLastTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK;
 80076d4:	2310      	movs	r3, #16
 80076d6:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 80076da:	4631      	mov	r1, r6
 80076dc:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80076e0:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
 80076e4:	4640      	mov	r0, r8
 80076e6:	f000 fba7 	bl	8007e38 <vTCPWindowInit>
			pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 80076ea:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 80076ee:	3301      	adds	r3, #1
 80076f0:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
			pxTCPWindow->ulNextTxSequenceNumber++;
 80076f4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 80076f8:	3601      	adds	r6, #1
			pxTCPWindow->ulNextTxSequenceNumber++;
 80076fa:	3301      	adds	r3, #1
			pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 80076fc:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
 8007700:	f8c4 60ec 	str.w	r6, [r4, #236]	; 0xec
			pxTCPWindow->ulNextTxSequenceNumber++;
 8007704:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u;
 8007708:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 800770c:	3301      	adds	r3, #1
 800770e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		if( ( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0u ) )
 8007712:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8007716:	2b02      	cmp	r3, #2
 8007718:	d000      	beq.n	800771c <xProcessReceivedTCPPacket+0x504>
 800771a:	b305      	cbz	r5, 800775e <xProcessReceivedTCPPacket+0x546>
			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800771c:	f109 0628 	add.w	r6, r9, #40	; 0x28
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8007720:	f109 0914 	add.w	r9, r9, #20
			pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 8007724:	2310      	movs	r3, #16
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8007726:	ea4f 0989 	mov.w	r9, r9, lsl #2
			pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800772a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800772e:	f887 902e 	strb.w	r9, [r7, #46]	; 0x2e
			if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 8007732:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8007736:	f013 0310 	ands.w	r3, r3, #16
				pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 800773a:	bf04      	itt	eq
 800773c:	f884 30c9 	strbeq.w	r3, [r4, #201]	; 0xc9
				pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 8007740:	f884 30ca 	strbeq.w	r3, [r4, #202]	; 0xca
		vTCPStateChange( pxSocket, eESTABLISHED );
 8007744:	2105      	movs	r1, #5
 8007746:	4620      	mov	r0, r4
 8007748:	f7ff fa31 	bl	8006bae <vTCPStateChange>
	if( xSendLength > 0 )
 800774c:	2e00      	cmp	r6, #0
 800774e:	f73f af36 	bgt.w	80075be <xProcessReceivedTCPPacket+0x3a6>
 8007752:	e1b3      	b.n	8007abc <xProcessReceivedTCPPacket+0x8a4>
		else if( ulReceiveLength == 0u )
 8007754:	2d00      	cmp	r5, #0
 8007756:	d1d7      	bne.n	8007708 <xProcessReceivedTCPPacket+0x4f0>
			pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8007758:	f8c4 60ec 	str.w	r6, [r4, #236]	; 0xec
 800775c:	e7d4      	b.n	8007708 <xProcessReceivedTCPPacket+0x4f0>
BaseType_t xSendLength = 0;
 800775e:	462e      	mov	r6, r5
 8007760:	e7e7      	b.n	8007732 <xProcessReceivedTCPPacket+0x51a>
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 8007762:	9b05      	ldr	r3, [sp, #20]
 8007764:	699f      	ldr	r7, [r3, #24]
	pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8007766:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8007768:	f897 a02f 	ldrb.w	sl, [r7, #47]	; 0x2f
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount;
 800776c:	f8d7 6026 	ldr.w	r6, [r7, #38]	; 0x26
	pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8007770:	0a13      	lsrs	r3, r2, #8
 8007772:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8007776:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
	pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 800777a:	b29b      	uxth	r3, r3
			( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800777c:	4093      	lsls	r3, r2
	if( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_ACK ) != 0u )
 800777e:	f01a 0f10 	tst.w	sl, #16
		pxSocket->u.xTCP.ulWindowSize =
 8007782:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	if( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_ACK ) != 0u )
 8007786:	d025      	beq.n	80077d4 <xProcessReceivedTCPPacket+0x5bc>
		ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulAckNr ) );
 8007788:	f8d7 302a 	ldr.w	r3, [r7, #42]	; 0x2a
 800778c:	0e19      	lsrs	r1, r3, #24
 800778e:	021a      	lsls	r2, r3, #8
 8007790:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 8007794:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8007798:	0a1b      	lsrs	r3, r3, #8
 800779a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800779e:	4311      	orrs	r1, r2
 80077a0:	4319      	orrs	r1, r3
 80077a2:	4640      	mov	r0, r8
 80077a4:	f000 fd5b 	bl	800825e <ulTCPWindowTxAck>
 80077a8:	4603      	mov	r3, r0
		if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0u ) )
 80077aa:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80077ac:	b1b8      	cbz	r0, 80077de <xProcessReceivedTCPPacket+0x5c6>
 80077ae:	b19b      	cbz	r3, 80077d8 <xProcessReceivedTCPPacket+0x5c0>
			if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0u, NULL, ( size_t ) ulCount, pdFALSE ) != 0u )
 80077b0:	2200      	movs	r2, #0
 80077b2:	9200      	str	r2, [sp, #0]
 80077b4:	4611      	mov	r1, r2
 80077b6:	f7ff f84c 	bl	8006852 <uxStreamBufferGet>
 80077ba:	b158      	cbz	r0, 80077d4 <xProcessReceivedTCPPacket+0x5bc>
				pxSocket->xEventBits |= eSOCKET_SEND;
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	f043 0202 	orr.w	r2, r3, #2
 80077c2:	6022      	str	r2, [r4, #0]
					if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
 80077c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80077c6:	0792      	lsls	r2, r2, #30
						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 80077c8:	bf42      	ittt	mi
 80077ca:	f443 7300 	orrmi.w	r3, r3, #512	; 0x200
 80077ce:	f043 0302 	orrmi.w	r3, r3, #2
 80077d2:	6023      	strmi	r3, [r4, #0]
	if( pxSocket->u.xTCP.txStream != NULL )
 80077d4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80077d6:	b113      	cbz	r3, 80077de <xProcessReceivedTCPPacket+0x5c6>
		prvTCPAddTxData( pxSocket );
 80077d8:	4620      	mov	r0, r4
 80077da:	f7ff f9be 	bl	8006b5a <prvTCPAddTxData>
	pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80077de:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 80077e2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u ) )
 80077e6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80077ea:	0698      	lsls	r0, r3, #26
 80077ec:	d403      	bmi.n	80077f6 <xProcessReceivedTCPPacket+0x5de>
 80077ee:	f01a 0f01 	tst.w	sl, #1
 80077f2:	f000 81cd 	beq.w	8007b90 <xProcessReceivedTCPPacket+0x978>
		if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 80077f6:	0659      	lsls	r1, r3, #25
 80077f8:	d41f      	bmi.n	800783a <xProcessReceivedTCPPacket+0x622>
			bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 80077fa:	4640      	mov	r0, r8
 80077fc:	f000 faf4 	bl	8007de8 <xTCPWindowRxEmpty>
 8007800:	4682      	mov	sl, r0
			bTxDone     = xTCPWindowTxDone( pxTCPWindow );
 8007802:	4640      	mov	r0, r8
 8007804:	f000 fc75 	bl	80080f2 <xTCPWindowTxDone>
			if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 8007808:	f1ba 0f00 	cmp.w	sl, #0
 800780c:	f000 81c0 	beq.w	8007b90 <xProcessReceivedTCPPacket+0x978>
 8007810:	2800      	cmp	r0, #0
 8007812:	f000 81bd 	beq.w	8007b90 <xProcessReceivedTCPPacket+0x978>
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount;
 8007816:	0e33      	lsrs	r3, r6, #24
 8007818:	0232      	lsls	r2, r6, #8
 800781a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800781e:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8007822:	0a36      	lsrs	r6, r6, #8
 8007824:	4313      	orrs	r3, r2
 8007826:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
				lDistance = ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800782a:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount;
 800782e:	4333      	orrs	r3, r6
				lDistance = ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber );
 8007830:	1a9b      	subs	r3, r3, r2
 8007832:	442b      	add	r3, r5
				if( lDistance > 1 )
 8007834:	2b01      	cmp	r3, #1
 8007836:	f300 81ab 	bgt.w	8007b90 <xProcessReceivedTCPPacket+0x978>
			pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 800783a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800783e:	f043 0320 	orr.w	r3, r3, #32
 8007842:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 8007846:	9b05      	ldr	r3, [sp, #20]
 8007848:	4620      	mov	r0, r4
 800784a:	6999      	ldr	r1, [r3, #24]
 800784c:	f7ff fc80 	bl	8007150 <prvTCPHandleFin.isra.2>
 8007850:	4606      	mov	r6, r0
 8007852:	e77b      	b.n	800774c <xProcessReceivedTCPPacket+0x534>
			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8007854:	f109 0314 	add.w	r3, r9, #20
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800785e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007862:	065a      	lsls	r2, r3, #25
			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 8007864:	f109 0628 	add.w	r6, r9, #40	; 0x28
			if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 8007868:	d503      	bpl.n	8007872 <xProcessReceivedTCPPacket+0x65a>
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800786a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800786e:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		if( uxOptionsLength == 0u )
 8007872:	f1b9 0f00 	cmp.w	r9, #0
 8007876:	f47f aea2 	bne.w	80075be <xProcessReceivedTCPPacket+0x3a6>
 800787a:	e193      	b.n	8007ba4 <xProcessReceivedTCPPacket+0x98c>
		ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800787c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800787e:	e6b8      	b.n	80075f2 <xProcessReceivedTCPPacket+0x3da>
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_LONGER_DELAY_MS );
 8007880:	2314      	movs	r3, #20
 8007882:	e6ea      	b.n	800765a <xProcessReceivedTCPPacket+0x442>
		else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8007884:	b128      	cbz	r0, 8007892 <xProcessReceivedTCPPacket+0x67a>
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8007886:	4281      	cmp	r1, r0
 8007888:	d001      	beq.n	800788e <xProcessReceivedTCPPacket+0x676>
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800788a:	f000 fe11 	bl	80084b0 <vReleaseNetworkBufferAndDescriptor>
			pxSocket->u.xTCP.pxAckMessage = NULL;
 800788e:	2300      	movs	r3, #0
 8007890:	67e3      	str	r3, [r4, #124]	; 0x7c
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8007892:	ad08      	add	r5, sp, #32
 8007894:	4620      	mov	r0, r4
 8007896:	f855 1d0c 	ldr.w	r1, [r5, #-12]!
 800789a:	4632      	mov	r2, r6
 800789c:	f7ff f86e 	bl	800697c <prvTCPReturnPacket.constprop.3>
				prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 80078a0:	4629      	mov	r1, r5
 80078a2:	4620      	mov	r0, r4
 80078a4:	f7ff fb22 	bl	8006eec <prvTCPSendRepeated>
 80078a8:	e108      	b.n	8007abc <xProcessReceivedTCPPacket+0x8a4>
		pxSocket->u.xTCP.ucRepCount = 0u;
 80078aa:	2400      	movs	r4, #0
		if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 80078ac:	f1ba 0f01 	cmp.w	sl, #1
		pxSocket->u.xTCP.ucRepCount = 0u;
 80078b0:	f885 4052 	strb.w	r4, [r5, #82]	; 0x52
		if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 80078b4:	f47f ad56 	bne.w	8007364 <xProcessReceivedTCPPacket+0x14c>
			if( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_SYN )
 80078b8:	f006 041f 	and.w	r4, r6, #31
 80078bc:	2c02      	cmp	r4, #2
 80078be:	f47f acf2 	bne.w	80072a6 <xProcessReceivedTCPPacket+0x8e>
				pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 80078c2:	9e05      	ldr	r6, [sp, #20]
TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 80078c4:	69b7      	ldr	r7, [r6, #24]
	ulInitialSequenceNumber = ipconfigRAND32();
 80078c6:	f001 f8f5 	bl	8008ab4 <rand>
    if( 0 != ulInitialSequenceNumber )
 80078ca:	4680      	mov	r8, r0
 80078cc:	2800      	cmp	r0, #0
 80078ce:	f43f acfd 	beq.w	80072cc <xProcessReceivedTCPPacket+0xb4>
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 80078d2:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 80078d6:	0718      	lsls	r0, r3, #28
 80078d8:	f57f acef 	bpl.w	80072ba <xProcessReceivedTCPPacket+0xa2>
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 80078dc:	f043 0304 	orr.w	r3, r3, #4
 80078e0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 80078e4:	656d      	str	r5, [r5, #84]	; 0x54
 80078e6:	462c      	mov	r4, r5
		pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 80078e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80078ea:	0a13      	lsrs	r3, r2, #8
 80078ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80078f0:	87a3      	strh	r3, [r4, #60]	; 0x3c
		pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 80078f2:	f8d7 301a 	ldr.w	r3, [r7, #26]
		pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 80078f6:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
		pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 80078fa:	0e1a      	lsrs	r2, r3, #24
 80078fc:	0219      	lsls	r1, r3, #8
 80078fe:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8007902:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8007906:	0a1b      	lsrs	r3, r3, #8
 8007908:	430a      	orrs	r2, r1
 800790a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800790e:	4313      	orrs	r3, r2
 8007910:	63a3      	str	r3, [r4, #56]	; 0x38
		pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8007912:	f8d7 3026 	ldr.w	r3, [r7, #38]	; 0x26
 8007916:	0e1a      	lsrs	r2, r3, #24
 8007918:	0219      	lsls	r1, r3, #8
 800791a:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800791e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8007922:	0a1b      	lsrs	r3, r3, #8
 8007924:	430a      	orrs	r2, r1
 8007926:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800792a:	4313      	orrs	r3, r2
 800792c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
	pxSocket->u.xTCP.usInitMSS = pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
 8007930:	f44f 6391 	mov.w	r3, #1160	; 0x488
 8007934:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 8007938:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
		prvTCPCreateWindow( pxReturn );
 800793c:	4620      	mov	r0, r4
 800793e:	f7fe ffc8 	bl	80068d2 <prvTCPCreateWindow>
		vTCPStateChange( pxReturn, eSYN_FIRST );
 8007942:	2103      	movs	r1, #3
 8007944:	4620      	mov	r0, r4
 8007946:	f7ff f932 	bl	8006bae <vTCPStateChange>
		memcpy( pxReturn->u.xTCP.xPacket.u.ucLastPacket, pxNetworkBuffer->pucEthernetBuffer, sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) );
 800794a:	2246      	movs	r2, #70	; 0x46
 800794c:	69b1      	ldr	r1, [r6, #24]
 800794e:	f104 0082 	add.w	r0, r4, #130	; 0x82
 8007952:	f000 ffd6 	bl	8008902 <memcpy>
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
 8007956:	f7fd f813 	bl	8004980 <xTaskGetTickCount>
		pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800795a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
 800795e:	6620      	str	r0, [r4, #96]	; 0x60
		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8007960:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8007964:	f36f 0341 	bfc	r3, #1, #1
		pxSocket->u.xTCP.ucKeepRepCount = 0u;
 8007968:	2600      	movs	r6, #0
		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800796a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.ucKeepRepCount = 0u;
 800796e:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8007972:	f7fd f805 	bl	8004980 <xTaskGetTickCount>
 8007976:	65e0      	str	r0, [r4, #92]	; 0x5c
		if( ( pxTCPPacket->xTCPHeader.ucTCPOffset & TCP_OFFSET_LENGTH_BITS ) > TCP_OFFSET_STANDARD_LENGTH )
 8007978:	f899 302e 	ldrb.w	r3, [r9, #46]	; 0x2e
 800797c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007980:	2b50      	cmp	r3, #80	; 0x50
 8007982:	d916      	bls.n	80079b2 <xProcessReceivedTCPPacket+0x79a>
			prvCheckOptions( pxSocket, pxNetworkBuffer );
 8007984:	9a05      	ldr	r2, [sp, #20]
	pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 8007986:	6993      	ldr	r3, [r2, #24]
    if( pucLast > ( pxNetworkBuffer->pucEthernetBuffer + pxNetworkBuffer->xDataLength ) )
 8007988:	69d2      	ldr	r2, [r2, #28]
	pucLast = pucPtr + (((pxTCPHeader->ucTCPOffset >> 4) - 5) << 2);
 800798a:	f893 802e 	ldrb.w	r8, [r3, #46]	; 0x2e
 800798e:	ea4f 1818 	mov.w	r8, r8, lsr #4
	pucPtr = pxTCPHeader->ucOptdata;
 8007992:	f103 0536 	add.w	r5, r3, #54	; 0x36
	pucLast = pucPtr + (((pxTCPHeader->ucTCPOffset >> 4) - 5) << 2);
 8007996:	f1a8 0805 	sub.w	r8, r8, #5
 800799a:	eb05 0888 	add.w	r8, r5, r8, lsl #2
    if( pucLast > ( pxNetworkBuffer->pucEthernetBuffer + pxNetworkBuffer->xDataLength ) )
 800799e:	4413      	add	r3, r2
 80079a0:	4598      	cmp	r8, r3
 80079a2:	d806      	bhi.n	80079b2 <xProcessReceivedTCPPacket+0x79a>
	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80079a4:	f104 03dc 	add.w	r3, r4, #220	; 0xdc
 80079a8:	9303      	str	r3, [sp, #12]
							uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 80079aa:	9604      	str	r6, [sp, #16]
	while( pucPtr < pucLast )
 80079ac:	45a8      	cmp	r8, r5
 80079ae:	f63f acf6 	bhi.w	800739e <xProcessReceivedTCPPacket+0x186>
			pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usWindow );
 80079b2:	f8b9 2030 	ldrh.w	r2, [r9, #48]	; 0x30
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 80079b6:	f8dd b014 	ldr.w	fp, [sp, #20]
			pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usWindow );
 80079ba:	0a13      	lsrs	r3, r2, #8
 80079bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 80079c0:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
			pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usWindow );
 80079c4:	b29b      	uxth	r3, r3
				( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 80079c6:	4093      	lsls	r3, r2
			pxSocket->u.xTCP.ulWindowSize =
 80079c8:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 80079cc:	f8db 6018 	ldr.w	r6, [fp, #24]
	lReceiveLength = ( ( int32_t ) pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 80079d0:	f8db 501c 	ldr.w	r5, [fp, #28]
uint32_t ulSequenceNumber = FreeRTOS_ntohl (pxTCPHeader->ulSequenceNumber);
 80079d4:	f8d6 3026 	ldr.w	r3, [r6, #38]	; 0x26
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80079d8:	f896 a02f 	ldrb.w	sl, [r6, #47]	; 0x2f
uint32_t ulSequenceNumber = FreeRTOS_ntohl (pxTCPHeader->ulSequenceNumber);
 80079dc:	0e1f      	lsrs	r7, r3, #24
 80079de:	021a      	lsls	r2, r3, #8
 80079e0:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
 80079e4:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80079e8:	0a1b      	lsrs	r3, r3, #8
 80079ea:	4317      	orrs	r7, r2
 80079ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80079f0:	431f      	orrs	r7, r3
    lTCPHeaderLength = ( BaseType_t ) ( ( pxTCPHeader->ucTCPOffset & VALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2 );
 80079f2:	f896 302e 	ldrb.w	r3, [r6, #46]	; 0x2e
	lReceiveLength = ( ( int32_t ) pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 80079f6:	f1a5 010e 	sub.w	r1, r5, #14
	lLength =  ( int32_t )FreeRTOS_htons( pxTCPPacket->xIPHeader.usLength );
 80079fa:	8a35      	ldrh	r5, [r6, #16]
    lTCPHeaderLength = ( BaseType_t ) ( ( pxTCPHeader->ucTCPOffset & VALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2 );
 80079fc:	089b      	lsrs	r3, r3, #2
 80079fe:	f003 023c 	and.w	r2, r3, #60	; 0x3c
	lLength =  ( int32_t )FreeRTOS_htons( pxTCPPacket->xIPHeader.usLength );
 8007a02:	0a2b      	lsrs	r3, r5, #8
 8007a04:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8007a08:	b29d      	uxth	r5, r3
 8007a0a:	428d      	cmp	r5, r1
 8007a0c:	bfa8      	it	ge
 8007a0e:	460d      	movge	r5, r1
	if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER ) )
 8007a10:	f102 0314 	add.w	r3, r2, #20
	*ppucRecvData = pxNetworkBuffer->pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + lTCPHeaderLength;
 8007a14:	f102 0922 	add.w	r9, r2, #34	; 0x22
	if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER ) )
 8007a18:	42ab      	cmp	r3, r5
	*ppucRecvData = pxNetworkBuffer->pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + lTCPHeaderLength;
 8007a1a:	44b1      	add	r9, r6
	if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER ) )
 8007a1c:	f6ff ad66 	blt.w	80074ec <xProcessReceivedTCPPacket+0x2d4>
		lReceiveLength = 0;
 8007a20:	2500      	movs	r5, #0
	if( ( pxTCPHeader->ucTCPFlags & ipTCP_FLAG_URG ) != 0u )
 8007a22:	f01a 0f20 	tst.w	sl, #32
 8007a26:	d009      	beq.n	8007a3c <xProcessReceivedTCPPacket+0x824>
		lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 8007a28:	8eb2      	ldrh	r2, [r6, #52]	; 0x34
 8007a2a:	0a13      	lsrs	r3, r2, #8
 8007a2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007a30:	b29b      	uxth	r3, r3
		lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 8007a32:	42ab      	cmp	r3, r5
		*ppucRecvData += lUrgentLength;
 8007a34:	4499      	add	r9, r3
		lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 8007a36:	bfd4      	ite	le
 8007a38:	1aed      	suble	r5, r5, r3
 8007a3a:	1b6d      	subgt	r5, r5, r5
	if( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED )
 8007a3c:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 8007a40:	2a04      	cmp	r2, #4
 8007a42:	d90a      	bls.n	8007a5a <xProcessReceivedTCPPacket+0x842>
		if ( pxTCPWindow->rx.ulCurrentSequenceNumber == ulSequenceNumber + 1u )
 8007a44:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 8007a48:	1c7b      	adds	r3, r7, #1
 8007a4a:	4299      	cmp	r1, r3
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8007a4c:	bf02      	ittt	eq
 8007a4e:	f894 3041 	ldrbeq.w	r3, [r4, #65]	; 0x41
 8007a52:	f043 0301 	orreq.w	r3, r3, #1
 8007a56:	f884 3041 	strbeq.w	r3, [r4, #65]	; 0x41
	if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber ) ) > 0 )
 8007a5a:	197b      	adds	r3, r7, r5
 8007a5c:	9302      	str	r3, [sp, #8]
 8007a5e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8007a62:	1979      	adds	r1, r7, r5
 8007a64:	1acb      	subs	r3, r1, r3
 8007a66:	2b00      	cmp	r3, #0
		pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8007a68:	bfc4      	itt	gt
 8007a6a:	460b      	movgt	r3, r1
 8007a6c:	f8c4 30f4 	strgt.w	r3, [r4, #244]	; 0xf4
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8007a70:	f104 08dc 	add.w	r8, r4, #220	; 0xdc
	if( ( ulReceiveLength > 0u ) && ( pxSocket->u.xTCP.ucTCPState >= eSYN_RECEIVED ) )
 8007a74:	2d00      	cmp	r5, #0
 8007a76:	f43f ad3d 	beq.w	80074f4 <xProcessReceivedTCPPacket+0x2dc>
 8007a7a:	2a03      	cmp	r2, #3
 8007a7c:	f67f ad3a 	bls.w	80074f4 <xProcessReceivedTCPPacket+0x2dc>
		if ( pxSocket->u.xTCP.rxStream )
 8007a80:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8007a82:	2a00      	cmp	r2, #0
 8007a84:	f43f ad34 	beq.w	80074f0 <xProcessReceivedTCPPacket+0x2d8>
size_t uxHead = pxBuffer->uxHead;
 8007a88:	6891      	ldr	r1, [r2, #8]
size_t uxTail = pxBuffer->uxTail;
 8007a8a:	6813      	ldr	r3, [r2, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 8007a8c:	6912      	ldr	r2, [r2, #16]
 8007a8e:	4413      	add	r3, r2
 8007a90:	3b01      	subs	r3, #1
 8007a92:	1a5b      	subs	r3, r3, r1
	if( uxCount >= pxBuffer->LENGTH )
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d800      	bhi.n	8007a9a <xProcessReceivedTCPPacket+0x882>
		uxCount -= pxBuffer->LENGTH;
 8007a98:	1a9b      	subs	r3, r3, r2
		lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
 8007a9a:	4639      	mov	r1, r7
 8007a9c:	462a      	mov	r2, r5
 8007a9e:	4640      	mov	r0, r8
 8007aa0:	f000 fa46 	bl	8007f30 <lTCPWindowRxCheck>
		if( lOffset >= 0 )
 8007aa4:	1e01      	subs	r1, r0, #0
 8007aa6:	db15      	blt.n	8007ad4 <xProcessReceivedTCPPacket+0x8bc>
			lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
 8007aa8:	462b      	mov	r3, r5
 8007aaa:	464a      	mov	r2, r9
 8007aac:	4620      	mov	r0, r4
 8007aae:	f7fe fd65 	bl	800657c <lTCPAddRxdata>
			if( lStored != ( int32_t ) ulReceiveLength )
 8007ab2:	4285      	cmp	r5, r0
 8007ab4:	d00e      	beq.n	8007ad4 <xProcessReceivedTCPPacket+0x8bc>
				prvTCPSendReset( pxNetworkBuffer );
 8007ab6:	4658      	mov	r0, fp
 8007ab8:	f7ff f840 	bl	8006b3c <prvTCPSendReset>
		if( pxNetworkBuffer != NULL )
 8007abc:	9805      	ldr	r0, [sp, #20]
 8007abe:	b118      	cbz	r0, 8007ac8 <xProcessReceivedTCPPacket+0x8b0>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8007ac0:	f000 fcf6 	bl	80084b0 <vReleaseNetworkBufferAndDescriptor>
			pxNetworkBuffer = NULL;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	9305      	str	r3, [sp, #20]
		prvTCPNextTimeout ( pxSocket );
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f7fe ff18 	bl	80068fe <prvTCPNextTimeout>
		xResult = pdPASS;
 8007ace:	2401      	movs	r4, #1
 8007ad0:	f7ff bbef 	b.w	80072b2 <xProcessReceivedTCPPacket+0x9a>
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 8007ad4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8007ad8:	b13b      	cbz	r3, 8007aea <xProcessReceivedTCPPacket+0x8d2>
				lTCPAddRxdata( pxSocket, 0ul, NULL, pxTCPWindow->ulUserDataLength );
 8007ada:	2200      	movs	r2, #0
 8007adc:	4611      	mov	r1, r2
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f7fe fd4c 	bl	800657c <lTCPAddRxdata>
				pxTCPWindow->ulUserDataLength = 0;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 8007aea:	9b05      	ldr	r3, [sp, #20]
UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 8007aec:	f894 9118 	ldrb.w	r9, [r4, #280]	; 0x118
 8007af0:	f8d3 b018 	ldr.w	fp, [r3, #24]
		if( uxOptionsLength != 0u )
 8007af4:	f1b9 0f00 	cmp.w	r9, #0
 8007af8:	f43f ad00 	beq.w	80074fc <xProcessReceivedTCPPacket+0x2e4>
			memcpy( pxTCPHeader->ucOptdata, pxTCPWindow->ulOptionsData, ( size_t ) uxOptionsLength );
 8007afc:	464a      	mov	r2, r9
 8007afe:	f504 71ae 	add.w	r1, r4, #348	; 0x15c
 8007b02:	f10b 0036 	add.w	r0, fp, #54	; 0x36
 8007b06:	f000 fefc 	bl	8008902 <memcpy>
			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8007b0a:	f109 0314 	add.w	r3, r9, #20
 8007b0e:	009b      	lsls	r3, r3, #2
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8007b10:	f88b 302e 	strb.w	r3, [fp, #46]	; 0x2e
		if( ( pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) )
 8007b14:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8007b18:	2b04      	cmp	r3, #4
 8007b1a:	d107      	bne.n	8007b2c <xProcessReceivedTCPPacket+0x914>
 8007b1c:	f00a 031f 	and.w	r3, sl, #31
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d103      	bne.n	8007b2c <xProcessReceivedTCPPacket+0x914>
			vTCPStateChange( pxSocket, eSYN_FIRST );
 8007b24:	2103      	movs	r1, #3
 8007b26:	4620      	mov	r0, r4
 8007b28:	f7ff f841 	bl	8006bae <vTCPStateChange>
		if( ( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 8007b2c:	f01a 0f01 	tst.w	sl, #1
 8007b30:	d014      	beq.n	8007b5c <xProcessReceivedTCPPacket+0x944>
 8007b32:	f994 3041 	ldrsb.w	r3, [r4, #65]	; 0x41
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	db10      	blt.n	8007b5c <xProcessReceivedTCPPacket+0x944>
			pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8007b3a:	197b      	adds	r3, r7, r5
 8007b3c:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
			pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 8007b40:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8007b48:	0659      	lsls	r1, r3, #25
			pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 8007b4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
				pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 8007b4e:	bf5e      	ittt	pl
 8007b50:	f894 3042 	ldrbpl.w	r3, [r4, #66]	; 0x42
 8007b54:	f043 0302 	orrpl.w	r3, r3, #2
 8007b58:	f884 3042 	strbpl.w	r3, [r4, #66]	; 0x42
		switch (pxSocket->u.xTCP.ucTCPState)
 8007b5c:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 8007b60:	1e93      	subs	r3, r2, #2
 8007b62:	2b08      	cmp	r3, #8
 8007b64:	d8aa      	bhi.n	8007abc <xProcessReceivedTCPPacket+0x8a4>
 8007b66:	a101      	add	r1, pc, #4	; (adr r1, 8007b6c <xProcessReceivedTCPPacket+0x954>)
 8007b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b6c:	0800766d 	.word	0x0800766d
 8007b70:	08007539 	.word	0x08007539
 8007b74:	0800766d 	.word	0x0800766d
 8007b78:	08007763 	.word	0x08007763
 8007b7c:	08007847 	.word	0x08007847
 8007b80:	08007847 	.word	0x08007847
 8007b84:	08007abd 	.word	0x08007abd
 8007b88:	08007abd 	.word	0x08007abd
 8007b8c:	08007847 	.word	0x08007847
		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 8007b90:	2310      	movs	r3, #16
 8007b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( ulReceiveLength != 0u )
 8007b96:	2d00      	cmp	r5, #0
 8007b98:	f47f ae5c 	bne.w	8007854 <xProcessReceivedTCPPacket+0x63c>
		if( uxOptionsLength == 0u )
 8007b9c:	f1b9 0f00 	cmp.w	r9, #0
 8007ba0:	d18c      	bne.n	8007abc <xProcessReceivedTCPPacket+0x8a4>
 8007ba2:	462e      	mov	r6, r5
			lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	a905      	add	r1, sp, #20
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f7ff f88b 	bl	8006cc4 <prvTCPPrepareSend>
			if( lSendResult > 0 )
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	f77f adcc 	ble.w	800774c <xProcessReceivedTCPPacket+0x534>
 8007bb4:	4606      	mov	r6, r0
 8007bb6:	e502      	b.n	80075be <xProcessReceivedTCPPacket+0x3a6>

08007bb8 <xTCPCheckNewClient>:
 * In the API accept(), the user asks is there is a new client?  As API's can
 * not walk through the xBoundTCPSocketsList the IP-task will do this.
 */
BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t *pxSocket )
{
TickType_t xLocalPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8007bb8:	8c83      	ldrh	r3, [r0, #36]	; 0x24
FreeRTOS_Socket_t *pxFound;
BaseType_t xResult = pdFALSE;

	/* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
	who has access. */
	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8007bba:	490e      	ldr	r1, [pc, #56]	; (8007bf4 <xTCPCheckNewClient+0x3c>)
{
 8007bbc:	b530      	push	{r4, r5, lr}
TickType_t xLocalPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8007bbe:	0a1a      	lsrs	r2, r3, #8
 8007bc0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8007bc4:	b292      	uxth	r2, r2
	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8007bc6:	68cb      	ldr	r3, [r1, #12]
 8007bc8:	3108      	adds	r1, #8
 8007bca:	428b      	cmp	r3, r1
 8007bcc:	d101      	bne.n	8007bd2 <xTCPCheckNewClient+0x1a>
BaseType_t xResult = pdFALSE;
 8007bce:	2000      	movs	r0, #0
				break;
			}
		}
	}
	return xResult;
}
 8007bd0:	bd30      	pop	{r4, r5, pc}
		if( listGET_LIST_ITEM_VALUE( pxIterator ) == xLocalPort )
 8007bd2:	681c      	ldr	r4, [r3, #0]
 8007bd4:	42a2      	cmp	r2, r4
 8007bd6:	d10b      	bne.n	8007bf0 <xTCPCheckNewClient+0x38>
			pxFound = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 8007bd8:	68dc      	ldr	r4, [r3, #12]
			if( ( pxFound->ucProtocol == FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8007bda:	f894 5027 	ldrb.w	r5, [r4, #39]	; 0x27
 8007bde:	2d06      	cmp	r5, #6
 8007be0:	d106      	bne.n	8007bf0 <xTCPCheckNewClient+0x38>
 8007be2:	f894 5040 	ldrb.w	r5, [r4, #64]	; 0x40
 8007be6:	07ad      	lsls	r5, r5, #30
 8007be8:	d502      	bpl.n	8007bf0 <xTCPCheckNewClient+0x38>
				pxSocket->u.xTCP.pxPeerSocket = pxFound;
 8007bea:	6544      	str	r4, [r0, #84]	; 0x54
				xResult = pdTRUE;
 8007bec:	2001      	movs	r0, #1
				break;
 8007bee:	bd30      	pop	{r4, r5, pc}
		pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	e7ea      	b.n	8007bca <xTCPCheckNewClient+0x12>
 8007bf4:	20006988 	.word	0x20006988

08007bf8 <xTCPWindowRxFind>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowRxFind( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
	{
 8007bf8:	b510      	push	{r4, lr}
		/* Find a segment with a given sequence number in the list of received
		segments. */

		pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xRxSegments );

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 8007bfa:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
		pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xRxSegments );
 8007bfe:	f100 02ac 	add.w	r2, r0, #172	; 0xac
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d101      	bne.n	8007c0a <xTCPWindowRxFind+0x12>
	TCPSegment_t *pxSegment, *pxReturn = NULL;
 8007c06:	2000      	movs	r0, #0
				break;
			}
		}

		return pxReturn;
	}
 8007c08:	bd10      	pop	{r4, pc}
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 8007c0a:	68d8      	ldr	r0, [r3, #12]
			if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 8007c0c:	6804      	ldr	r4, [r0, #0]
 8007c0e:	428c      	cmp	r4, r1
 8007c10:	d0fa      	beq.n	8007c08 <xTCPWindowRxFind+0x10>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	e7f5      	b.n	8007c02 <xTCPWindowRxFind+0xa>

08007c16 <prvTCPWindowTxHasSpace>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t *pxWindow, uint32_t ulWindowSize )
	{
 8007c16:	b510      	push	{r4, lr}
 8007c18:	4604      	mov	r4, r0
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8007c1a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8007c1c:	b1c8      	cbz	r0, 8007c52 <prvTCPWindowTxHasSpace+0x3c>
			pxReturn = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 8007c1e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007c20:	68db      	ldr	r3, [r3, #12]
		/* This function will look if there is new transmission data.  It will
		return true if there is data to be sent. */

		pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );

		if( pxSegment == NULL )
 8007c22:	b1ab      	cbz	r3, 8007c50 <prvTCPWindowTxHasSpace+0x3a>
		}
		else
		{
			/* How much data is outstanding, i.e. how much data has been sent
			but not yet acknowledged ? */
			if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 8007c24:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007c26:	6a20      	ldr	r0, [r4, #32]

			/* Subtract this from the peer's space. */
			ulWindowSize -= FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );

			/* See if the next segment may be sent. */
			if( ulWindowSize >= ( uint32_t ) pxSegment->lDataLength )
 8007c28:	689b      	ldr	r3, [r3, #8]
			if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 8007c2a:	4282      	cmp	r2, r0
				ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 8007c2c:	bf2c      	ite	cs
 8007c2e:	1a12      	subcs	r2, r2, r0
				ulTxOutstanding = 0UL;
 8007c30:	2200      	movcc	r2, #0
			ulWindowSize -= FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 8007c32:	428a      	cmp	r2, r1
 8007c34:	bf94      	ite	ls
 8007c36:	1a89      	subls	r1, r1, r2
 8007c38:	1a49      	subhi	r1, r1, r1
			if( ulWindowSize >= ( uint32_t ) pxSegment->lDataLength )
 8007c3a:	4299      	cmp	r1, r3
 8007c3c:	bf34      	ite	cc
 8007c3e:	2000      	movcc	r0, #0
 8007c40:	2001      	movcs	r0, #1

			/* If 'xHasSpace', it looks like the peer has at least space for 1
			more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
			limitation of the transmission window (in case of many resends it
			may be decreased). */
			if( ( ulTxOutstanding != 0UL ) && ( pxWindow->xSize.ulTxWindowLength < ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) )
 8007c42:	b132      	cbz	r2, 8007c52 <prvTCPWindowTxHasSpace+0x3c>
 8007c44:	441a      	add	r2, r3
 8007c46:	68a3      	ldr	r3, [r4, #8]
			{
				xHasSpace = pdFALSE;
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	bf38      	it	cc
 8007c4c:	2000      	movcc	r0, #0
 8007c4e:	bd10      	pop	{r4, pc}
 8007c50:	4618      	mov	r0, r3
			}
		}

		return xHasSpace;
	}
 8007c52:	bd10      	pop	{r4, pc}

08007c54 <vListInsertGeneric>:
	pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8007c54:	6893      	ldr	r3, [r2, #8]
 8007c56:	608b      	str	r3, [r1, #8]
	pxNewListItem->pxNext = (struct xLIST_ITEM * configLIST_VOLATILE)pxWhere;
 8007c58:	604a      	str	r2, [r1, #4]
	pxWhere->pxPrevious->pxNext = pxNewListItem;
 8007c5a:	6059      	str	r1, [r3, #4]
	( pxList->uxNumberOfItems )++;
 8007c5c:	6803      	ldr	r3, [r0, #0]
	pxWhere->pxPrevious = pxNewListItem;
 8007c5e:	6091      	str	r1, [r2, #8]
	( pxList->uxNumberOfItems )++;
 8007c60:	3301      	adds	r3, #1
	pxNewListItem->pvContainer = ( void * ) pxList; /* If this line fails to build then ensure configENABLE_BACKWARD_COMPATIBILITY is set to 1 in FreeRTOSConfig.h. */
 8007c62:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007c64:	6003      	str	r3, [r0, #0]
 8007c66:	4770      	bx	lr

08007c68 <vTCPWindowFree>:
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 8007c68:	6a83      	ldr	r3, [r0, #40]	; 0x28
	{
 8007c6a:	b510      	push	{r4, lr}
 8007c6c:	4604      	mov	r4, r0
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 8007c6e:	b113      	cbz	r3, 8007c76 <vTCPWindowFree+0xe>
			uxListRemove( &( pxSegment->xQueueItem ) );
 8007c70:	3018      	adds	r0, #24
 8007c72:	f7fb fe4f 	bl	8003914 <uxListRemove>
		pxSegment->ulSequenceNumber = 0u;
 8007c76:	2300      	movs	r3, #0
 8007c78:	6023      	str	r3, [r4, #0]
		pxSegment->lDataLength = 0l;
 8007c7a:	60a3      	str	r3, [r4, #8]
		pxSegment->u.ulFlags = 0u;
 8007c7c:	6163      	str	r3, [r4, #20]
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xListItem ) ) != NULL )
 8007c7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007c80:	342c      	adds	r4, #44	; 0x2c
 8007c82:	b113      	cbz	r3, 8007c8a <vTCPWindowFree+0x22>
			uxListRemove( &( pxSegment->xListItem ) );
 8007c84:	4620      	mov	r0, r4
 8007c86:	f7fb fe45 	bl	8003914 <uxListRemove>
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8007c8a:	4a04      	ldr	r2, [pc, #16]	; (8007c9c <vTCPWindowFree+0x34>)
 8007c8c:	4621      	mov	r1, r4
 8007c8e:	f1a2 0008 	sub.w	r0, r2, #8
	}
 8007c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8007c96:	f7ff bfdd 	b.w	8007c54 <vListInsertGeneric>
 8007c9a:	bf00      	nop
 8007c9c:	20004ecc 	.word	0x20004ecc

08007ca0 <prvTCPWindowTxCheckAck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	b085      	sub	sp, #20
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 8007ca6:	1e53      	subs	r3, r2, #1

		 A Smoothed RTT will increase quickly, but it is conservative when
		 becoming smaller. */

		for(
				pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 8007ca8:	f8d0 609c 	ldr.w	r6, [r0, #156]	; 0x9c
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 8007cac:	9301      	str	r3, [sp, #4]
	{
 8007cae:	4604      	mov	r4, r0
 8007cb0:	4691      	mov	r9, r2
	const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xTxSegments );
 8007cb2:	f100 0a98 	add.w	sl, r0, #152	; 0x98
	uint32_t ulBytesConfirmed = 0u;
 8007cb6:	f04f 0800 	mov.w	r8, #0
		return ( ( a - b - 1UL ) & 0x80000000UL ) == 0UL;
 8007cba:	ea6f 0b02 	mvn.w	fp, r2
		for(
 8007cbe:	4556      	cmp	r6, sl
 8007cc0:	d003      	beq.n	8007cca <prvTCPWindowTxCheckAck+0x2a>
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 8007cc2:	9b01      	ldr	r3, [sp, #4]
 8007cc4:	1a5b      	subs	r3, r3, r1
				( pxIterator != ( const ListItem_t * ) pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 );
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	da03      	bge.n	8007cd2 <prvTCPWindowTxCheckAck+0x32>

			ulSequenceNumber += ulDataLength;
		}

		return ulBytesConfirmed;
	}
 8007cca:	4640      	mov	r0, r8
 8007ccc:	b005      	add	sp, #20
 8007cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 8007cd2:	68f5      	ldr	r5, [r6, #12]
			pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8007cd4:	6876      	ldr	r6, [r6, #4]
			if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 8007cd6:	682b      	ldr	r3, [r5, #0]
		return ( ( a - b - 1UL ) & 0x80000000UL ) == 0UL;
 8007cd8:	43da      	mvns	r2, r3
			if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 8007cda:	42ca      	cmn	r2, r1
 8007cdc:	d5ef      	bpl.n	8007cbe <prvTCPWindowTxCheckAck+0x1e>
			if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 8007cde:	4299      	cmp	r1, r3
 8007ce0:	d1f3      	bne.n	8007cca <prvTCPWindowTxCheckAck+0x2a>
			if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8007ce2:	7dab      	ldrb	r3, [r5, #22]
			ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 8007ce4:	68aa      	ldr	r2, [r5, #8]
			if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8007ce6:	f013 0f02 	tst.w	r3, #2
 8007cea:	eb01 0702 	add.w	r7, r1, r2
 8007cee:	d132      	bne.n	8007d56 <prvTCPWindowTxCheckAck+0xb6>
				if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t )ulDataLength, ulLast ) != pdFALSE )
 8007cf0:	eb1b 0f07 	cmn.w	fp, r7
 8007cf4:	d5e9      	bpl.n	8007cca <prvTCPWindowTxCheckAck+0x2a>
				pxSegment->u.bits.bAcked = pdTRUE_UNSIGNED;
 8007cf6:	f043 0302 	orr.w	r3, r3, #2
 8007cfa:	75ab      	strb	r3, [r5, #22]
				if( ( pxSegment->u.bits.ucTransmitCount == 1 ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 8007cfc:	7d2b      	ldrb	r3, [r5, #20]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d00a      	beq.n	8007d18 <prvTCPWindowTxCheckAck+0x78>
				xDoUnlink = pdTRUE;
 8007d02:	2001      	movs	r0, #1
			if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8007d04:	6a23      	ldr	r3, [r4, #32]
 8007d06:	4299      	cmp	r1, r3
 8007d08:	d127      	bne.n	8007d5a <prvTCPWindowTxCheckAck+0xba>
				pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8007d0a:	6227      	str	r7, [r4, #32]
				vTCPWindowFree( pxSegment );
 8007d0c:	4628      	mov	r0, r5
				ulBytesConfirmed += ulDataLength;
 8007d0e:	4490      	add	r8, r2
				vTCPWindowFree( pxSegment );
 8007d10:	f7ff ffaa 	bl	8007c68 <vTCPWindowFree>
			ulSequenceNumber += ulDataLength;
 8007d14:	4639      	mov	r1, r7
 8007d16:	e7d2      	b.n	8007cbe <prvTCPWindowTxCheckAck+0x1e>
				if( ( pxSegment->u.bits.ucTransmitCount == 1 ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 8007d18:	45b9      	cmp	r9, r7
 8007d1a:	d1f2      	bne.n	8007d02 <prvTCPWindowTxCheckAck+0x62>
 8007d1c:	9103      	str	r1, [sp, #12]
 8007d1e:	9202      	str	r2, [sp, #8]
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
 8007d20:	f7fc fe2e 	bl	8004980 <xTaskGetTickCount>
 8007d24:	692b      	ldr	r3, [r5, #16]
					if( pxWindow->lSRTT >= mS )
 8007d26:	9a02      	ldr	r2, [sp, #8]
 8007d28:	9903      	ldr	r1, [sp, #12]
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
 8007d2a:	1ac0      	subs	r0, r0, r3
					if( pxWindow->lSRTT >= mS )
 8007d2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007d2e:	4298      	cmp	r0, r3
						pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8007d30:	bfd5      	itete	le
 8007d32:	ebc3 03c3 	rsble	r3, r3, r3, lsl #3
						pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8007d36:	eb03 0343 	addgt.w	r3, r3, r3, lsl #1
						pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8007d3a:	181b      	addle	r3, r3, r0
						pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8007d3c:	181b      	addgt	r3, r3, r0
						pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8007d3e:	bfd4      	ite	le
 8007d40:	2008      	movle	r0, #8
						pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8007d42:	2004      	movgt	r0, #4
 8007d44:	fb93 f3f0 	sdiv	r3, r3, r0
 8007d48:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxWindow->lSRTT < winSRTT_CAP_mS )
 8007d4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007d4c:	2b31      	cmp	r3, #49	; 0x31
						pxWindow->lSRTT = winSRTT_CAP_mS;
 8007d4e:	bfdc      	itt	le
 8007d50:	2332      	movle	r3, #50	; 0x32
 8007d52:	63a3      	strle	r3, [r4, #56]	; 0x38
 8007d54:	e7d5      	b.n	8007d02 <prvTCPWindowTxCheckAck+0x62>
			xDoUnlink = pdFALSE;
 8007d56:	2000      	movs	r0, #0
 8007d58:	e7d4      	b.n	8007d04 <prvTCPWindowTxCheckAck+0x64>
			if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	d0da      	beq.n	8007d14 <prvTCPWindowTxCheckAck+0x74>
 8007d5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d0d7      	beq.n	8007d14 <prvTCPWindowTxCheckAck+0x74>
				uxListRemove( &pxSegment->xQueueItem );
 8007d64:	f105 0018 	add.w	r0, r5, #24
 8007d68:	f7fb fdd4 	bl	8003914 <uxListRemove>
 8007d6c:	e7d2      	b.n	8007d14 <prvTCPWindowTxCheckAck+0x74>
	...

08007d70 <xTCPWindowNew>:
	{
 8007d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d74:	4699      	mov	r9, r3
		if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 8007d76:	4b1b      	ldr	r3, [pc, #108]	; (8007de4 <xTCPWindowNew+0x74>)
 8007d78:	681c      	ldr	r4, [r3, #0]
	{
 8007d7a:	4605      	mov	r5, r0
 8007d7c:	4688      	mov	r8, r1
 8007d7e:	4617      	mov	r7, r2
		if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 8007d80:	b354      	cbz	r4, 8007dd8 <xTCPWindowNew+0x68>
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 8007d82:	68de      	ldr	r6, [r3, #12]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 8007d84:	68f4      	ldr	r4, [r6, #12]
			configASSERT( pxSegment != NULL );
 8007d86:	b944      	cbnz	r4, 8007d9a <xTCPWindowNew+0x2a>
 8007d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	e7fe      	b.n	8007d98 <xTCPWindowNew+0x28>
			uxListRemove( pxItem );
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	f7fb fdba 	bl	8003914 <uxListRemove>
			vListInsertFifo( xIsForRx ? &pxWindow->xRxSegments : &pxWindow->xTxSegments, pxItem );
 8007da0:	f1b9 0f00 	cmp.w	r9, #0
 8007da4:	d01b      	beq.n	8007dde <xTCPWindowNew+0x6e>
 8007da6:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8007daa:	f100 0208 	add.w	r2, r0, #8
 8007dae:	4631      	mov	r1, r6
 8007db0:	f7ff ff50 	bl	8007c54 <vListInsertGeneric>
	pxTimer->ulBorn = xTaskGetTickCount ( );
 8007db4:	f7fc fde4 	bl	8004980 <xTaskGetTickCount>
			pxSegment->u.ulFlags = 0;
 8007db8:	2300      	movs	r3, #0
 8007dba:	6163      	str	r3, [r4, #20]
			pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 );
 8007dbc:	ebb9 0303 	subs.w	r3, r9, r3
 8007dc0:	bf18      	it	ne
 8007dc2:	2301      	movne	r3, #1
 8007dc4:	f04f 0200 	mov.w	r2, #0
 8007dc8:	f363 0282 	bfi	r2, r3, #2, #1
	pxTimer->ulBorn = xTaskGetTickCount ( );
 8007dcc:	6120      	str	r0, [r4, #16]
			pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 );
 8007dce:	75a2      	strb	r2, [r4, #22]
			pxSegment->lMaxLength = lCount;
 8007dd0:	6067      	str	r7, [r4, #4]
			pxSegment->lDataLength = lCount;
 8007dd2:	60a7      	str	r7, [r4, #8]
			pxSegment->ulSequenceNumber = ulSequenceNumber;
 8007dd4:	f8c4 8000 	str.w	r8, [r4]
	}
 8007dd8:	4620      	mov	r0, r4
 8007dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			vListInsertFifo( xIsForRx ? &pxWindow->xRxSegments : &pxWindow->xTxSegments, pxItem );
 8007dde:	f105 0090 	add.w	r0, r5, #144	; 0x90
 8007de2:	e7e2      	b.n	8007daa <xTCPWindowNew+0x3a>
 8007de4:	20004ec4 	.word	0x20004ec4

08007de8 <xTCPWindowRxEmpty>:
		if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 8007de8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8007dec:	b92b      	cbnz	r3, 8007dfa <xTCPWindowRxEmpty+0x12>
	return ( ( a - b ) & 0x80000000UL ) == 0UL;
 8007dee:	6903      	ldr	r3, [r0, #16]
 8007df0:	6980      	ldr	r0, [r0, #24]
 8007df2:	1a18      	subs	r0, r3, r0
		else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 8007df4:	43c0      	mvns	r0, r0
 8007df6:	0fc0      	lsrs	r0, r0, #31
 8007df8:	4770      	bx	lr
 8007dfa:	2000      	movs	r0, #0
	}
 8007dfc:	4770      	bx	lr

08007dfe <vTCPWindowDestroy>:
			if( listLIST_IS_INITIALISED( pxSegments ) != pdFALSE )
 8007dfe:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 8007e02:	3301      	adds	r3, #1
	{
 8007e04:	b510      	push	{r4, lr}
 8007e06:	4604      	mov	r4, r0
			if( listLIST_IS_INITIALISED( pxSegments ) != pdFALSE )
 8007e08:	d108      	bne.n	8007e1c <vTCPWindowDestroy+0x1e>
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8007e0a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007e0e:	b12b      	cbz	r3, 8007e1c <vTCPWindowDestroy+0x1e>
					pxSegment = ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments );
 8007e10:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
					vTCPWindowFree( pxSegment );
 8007e14:	68d8      	ldr	r0, [r3, #12]
 8007e16:	f7ff ff27 	bl	8007c68 <vTCPWindowFree>
 8007e1a:	e7f6      	b.n	8007e0a <vTCPWindowDestroy+0xc>
			if( listLIST_IS_INITIALISED( pxSegments ) != pdFALSE )
 8007e1c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8007e20:	3301      	adds	r3, #1
 8007e22:	d108      	bne.n	8007e36 <vTCPWindowDestroy+0x38>
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8007e24:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8007e28:	b12b      	cbz	r3, 8007e36 <vTCPWindowDestroy+0x38>
					pxSegment = ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments );
 8007e2a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
					vTCPWindowFree( pxSegment );
 8007e2e:	68d8      	ldr	r0, [r3, #12]
 8007e30:	f7ff ff1a 	bl	8007c68 <vTCPWindowFree>
 8007e34:	e7f6      	b.n	8007e24 <vTCPWindowDestroy+0x26>
 8007e36:	bd10      	pop	{r4, pc}

08007e38 <vTCPWindowInit>:
{
 8007e38:	b510      	push	{r4, lr}
	pxWindow->u.ulFlags = 0ul;
 8007e3a:	2400      	movs	r4, #0
 8007e3c:	6004      	str	r4, [r0, #0]
	pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 8007e3e:	2401      	movs	r4, #1
 8007e40:	7004      	strb	r4, [r0, #0]
	if( ulMSS != 0ul )
 8007e42:	b183      	cbz	r3, 8007e66 <vTCPWindowInit+0x2e>
		if( pxWindow->usMSSInit != 0u )
 8007e44:	f8b0 40be 	ldrh.w	r4, [r0, #190]	; 0xbe
 8007e48:	b10c      	cbz	r4, 8007e4e <vTCPWindowInit+0x16>
			pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 8007e4a:	f8a0 30be 	strh.w	r3, [r0, #190]	; 0xbe
		if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0u ) )
 8007e4e:	f8b0 40bc 	ldrh.w	r4, [r0, #188]	; 0xbc
 8007e52:	42a3      	cmp	r3, r4
 8007e54:	d300      	bcc.n	8007e58 <vTCPWindowInit+0x20>
 8007e56:	b934      	cbnz	r4, 8007e66 <vTCPWindowInit+0x2e>
			pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 8007e58:	6844      	ldr	r4, [r0, #4]
 8007e5a:	fbb4 f4f3 	udiv	r4, r4, r3
 8007e5e:	435c      	muls	r4, r3
 8007e60:	6044      	str	r4, [r0, #4]
			pxWindow->usMSS = ( uint16_t ) ulMSS;
 8007e62:	f8a0 30bc 	strh.w	r3, [r0, #188]	; 0xbc
	pxWindow->lSRTT = l500ms;
 8007e66:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007e6a:	6383      	str	r3, [r0, #56]	; 0x38
	pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 8007e6c:	60c1      	str	r1, [r0, #12]
	pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 8007e6e:	6101      	str	r1, [r0, #16]
	pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 8007e70:	6181      	str	r1, [r0, #24]
	pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 8007e72:	61c2      	str	r2, [r0, #28]
	pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 8007e74:	6202      	str	r2, [r0, #32]
	pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 8007e76:	6342      	str	r2, [r0, #52]	; 0x34
	pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 8007e78:	6282      	str	r2, [r0, #40]	; 0x28
	pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 8007e7a:	62c2      	str	r2, [r0, #44]	; 0x2c
 8007e7c:	bd10      	pop	{r4, pc}
	...

08007e80 <vTCPWindowCreate>:
{
 8007e80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e84:	4698      	mov	r8, r3
		if( xTCPSegments == NULL )
 8007e86:	4b27      	ldr	r3, [pc, #156]	; (8007f24 <vTCPWindowCreate+0xa4>)
{
 8007e88:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
		if( xTCPSegments == NULL )
 8007e8c:	f8d3 b000 	ldr.w	fp, [r3]
{
 8007e90:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8007e94:	4605      	mov	r5, r0
 8007e96:	460e      	mov	r6, r1
 8007e98:	4617      	mov	r7, r2
		if( xTCPSegments == NULL )
 8007e9a:	f1bb 0f00 	cmp.w	fp, #0
 8007e9e:	d01e      	beq.n	8007ede <vTCPWindowCreate+0x5e>
		vListInitialise( &pxWindow->xTxSegments );
 8007ea0:	f105 0090 	add.w	r0, r5, #144	; 0x90
 8007ea4:	f7fb fd05 	bl	80038b2 <vListInitialise>
		vListInitialise( &pxWindow->xRxSegments );
 8007ea8:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 8007eac:	f7fb fd01 	bl	80038b2 <vListInitialise>
		vListInitialise( &pxWindow->xPriorityQueue );			/* Priority queue: segments which must be sent immediately */
 8007eb0:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8007eb4:	f7fb fcfd 	bl	80038b2 <vListInitialise>
		vListInitialise( &pxWindow->xTxQueue   );			/* Transmit queue: segments queued for transmission */
 8007eb8:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8007ebc:	f7fb fcf9 	bl	80038b2 <vListInitialise>
		vListInitialise( &pxWindow->xWaitQueue );			/* Waiting queue:  outstanding segments */
 8007ec0:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8007ec4:	f7fb fcf5 	bl	80038b2 <vListInitialise>
	vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 8007ec8:	4653      	mov	r3, sl
 8007eca:	464a      	mov	r2, r9
 8007ecc:	4641      	mov	r1, r8
 8007ece:	4628      	mov	r0, r5
	pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 8007ed0:	606e      	str	r6, [r5, #4]
	pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 8007ed2:	60af      	str	r7, [r5, #8]
}
 8007ed4:	b003      	add	sp, #12
 8007ed6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 8007eda:	f7ff bfad 	b.w	8007e38 <vTCPWindowInit>
		vListInitialise( &xSegmentList );
 8007ede:	4812      	ldr	r0, [pc, #72]	; (8007f28 <vTCPWindowCreate+0xa8>)
 8007ee0:	9301      	str	r3, [sp, #4]
 8007ee2:	f7fb fce6 	bl	80038b2 <vListInitialise>
		xTCPSegments = ( TCPSegment_t * ) pvPortMallocLarge( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 8007ee6:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 8007eea:	f7fb fefb 	bl	8003ce4 <pvPortMalloc>
 8007eee:	9b01      	ldr	r3, [sp, #4]
 8007ef0:	4604      	mov	r4, r0
 8007ef2:	6018      	str	r0, [r3, #0]
		if( xTCPSegments == NULL )
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	d0d3      	beq.n	8007ea0 <vTCPWindowCreate+0x20>
			memset( xTCPSegments, '\0', ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 8007ef8:	4659      	mov	r1, fp
 8007efa:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8007efe:	f000 fd25 	bl	800894c <memset>
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8007f02:	4b0a      	ldr	r3, [pc, #40]	; (8007f2c <vTCPWindowCreate+0xac>)
 8007f04:	f504 5b70 	add.w	fp, r4, #15360	; 0x3c00
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xListItem ), ( void* ) &( xTCPSegments[ xIndex ] ) );
 8007f08:	63a4      	str	r4, [r4, #56]	; 0x38
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void* ) &( xTCPSegments[ xIndex ] ) );
 8007f0a:	6264      	str	r4, [r4, #36]	; 0x24
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8007f12:	4805      	ldr	r0, [pc, #20]	; (8007f28 <vTCPWindowCreate+0xa8>)
 8007f14:	9301      	str	r3, [sp, #4]
 8007f16:	3440      	adds	r4, #64	; 0x40
 8007f18:	f7ff fe9c 	bl	8007c54 <vListInsertGeneric>
			for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8007f1c:	455c      	cmp	r4, fp
 8007f1e:	9b01      	ldr	r3, [sp, #4]
 8007f20:	d1f2      	bne.n	8007f08 <vTCPWindowCreate+0x88>
 8007f22:	e7bd      	b.n	8007ea0 <vTCPWindowCreate+0x20>
 8007f24:	20004ed8 	.word	0x20004ed8
 8007f28:	20004ec4 	.word	0x20004ec4
 8007f2c:	20004ecc 	.word	0x20004ecc

08007f30 <lTCPWindowRxCheck>:
	{
 8007f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8007f34:	f8d0 8010 	ldr.w	r8, [r0, #16]
	{
 8007f38:	4617      	mov	r7, r2
		if( ulCurrentSequenceNumber == ulSequenceNumber )
 8007f3a:	4588      	cmp	r8, r1
		pxWindow->ucOptionLength = 0u;
 8007f3c:	f04f 0200 	mov.w	r2, #0
	{
 8007f40:	4604      	mov	r4, r0
 8007f42:	460d      	mov	r5, r1
		pxWindow->ucOptionLength = 0u;
 8007f44:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
		pxWindow->ulUserDataLength = 0ul;
 8007f48:	6302      	str	r2, [r0, #48]	; 0x30
		if( ulCurrentSequenceNumber == ulSequenceNumber )
 8007f4a:	d13f      	bne.n	8007fcc <lTCPWindowRxCheck+0x9c>
			if( ulLength > ulSpace )
 8007f4c:	429f      	cmp	r7, r3
 8007f4e:	d903      	bls.n	8007f58 <lTCPWindowRxCheck+0x28>
						lReturn = -1;
 8007f50:	f04f 30ff 	mov.w	r0, #4294967295
 8007f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0 )
 8007f58:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
				ulCurrentSequenceNumber += ulLength;
 8007f5c:	19ce      	adds	r6, r1, r7
				if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0 )
 8007f5e:	b39b      	cbz	r3, 8007fc8 <lTCPWindowRxCheck+0x98>
	const MiniListItem_t* pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &pxWindow->xRxSegments );
 8007f60:	f100 08ac 	add.w	r8, r0, #172	; 0xac
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 8007f64:	f106 39ff 	add.w	r9, r6, #4294967295
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 8007f68:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
	TCPSegment_t *pxBest = NULL;
 8007f6c:	2000      	movs	r0, #0
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 8007f6e:	4590      	cmp	r8, r2
 8007f70:	d10f      	bne.n	8007f92 <lTCPWindowRxCheck+0x62>
                        if ( pxFound != NULL )
 8007f72:	bb08      	cbnz	r0, 8007fb8 <lTCPWindowRxCheck+0x88>
				ulCurrentSequenceNumber += ulLength;
 8007f74:	4635      	mov	r5, r6
					while( ( pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber ) ) != NULL )
 8007f76:	4629      	mov	r1, r5
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f7ff fe3d 	bl	8007bf8 <xTCPWindowRxFind>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	b9e8      	cbnz	r0, 8007fbe <lTCPWindowRxCheck+0x8e>
					if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 8007f82:	42b5      	cmp	r5, r6
 8007f84:	d001      	beq.n	8007f8a <lTCPWindowRxCheck+0x5a>
						pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 8007f86:	1bae      	subs	r6, r5, r6
 8007f88:	6326      	str	r6, [r4, #48]	; 0x30
				pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 8007f8a:	6125      	str	r5, [r4, #16]
				lReturn = 0;
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 8007f92:	68d7      	ldr	r7, [r2, #12]
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8007f94:	683b      	ldr	r3, [r7, #0]
	return ( ( a - b ) & 0x80000000UL ) == 0UL;
 8007f96:	1b59      	subs	r1, r3, r5
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8007f98:	2900      	cmp	r1, #0
 8007f9a:	db09      	blt.n	8007fb0 <lTCPWindowRxCheck+0x80>
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 8007f9c:	eba9 0103 	sub.w	r1, r9, r3
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8007fa0:	2900      	cmp	r1, #0
 8007fa2:	db05      	blt.n	8007fb0 <lTCPWindowRxCheck+0x80>
				if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 8007fa4:	b130      	cbz	r0, 8007fb4 <lTCPWindowRxCheck+0x84>
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 8007fa6:	6801      	ldr	r1, [r0, #0]
 8007fa8:	43db      	mvns	r3, r3
				if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 8007faa:	42cb      	cmn	r3, r1
 8007fac:	bf58      	it	pl
 8007fae:	4638      	movpl	r0, r7
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8007fb0:	6852      	ldr	r2, [r2, #4]
 8007fb2:	e7dc      	b.n	8007f6e <lTCPWindowRxCheck+0x3e>
				if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 8007fb4:	4638      	mov	r0, r7
 8007fb6:	e7fb      	b.n	8007fb0 <lTCPWindowRxCheck+0x80>
                            vTCPWindowFree( pxFound );
 8007fb8:	f7ff fe56 	bl	8007c68 <vTCPWindowFree>
 8007fbc:	e7d4      	b.n	8007f68 <lTCPWindowRxCheck+0x38>
						ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	441d      	add	r5, r3
						vTCPWindowFree( pxFound );
 8007fc2:	f7ff fe51 	bl	8007c68 <vTCPWindowFree>
 8007fc6:	e7d6      	b.n	8007f76 <lTCPWindowRxCheck+0x46>
				ulCurrentSequenceNumber += ulLength;
 8007fc8:	4635      	mov	r5, r6
 8007fca:	e7de      	b.n	8007f8a <lTCPWindowRxCheck+0x5a>
		else if( ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 8007fcc:	1c4a      	adds	r2, r1, #1
 8007fce:	4590      	cmp	r8, r2
 8007fd0:	d0be      	beq.n	8007f50 <lTCPWindowRxCheck+0x20>
			ulLast = ulSequenceNumber + ulLength;
 8007fd2:	19ce      	adds	r6, r1, r7
			lDistance = ( int32_t ) ( ulLast - ulCurrentSequenceNumber );
 8007fd4:	eba6 0208 	sub.w	r2, r6, r8
			if( lDistance <= 0 )
 8007fd8:	2a00      	cmp	r2, #0
 8007fda:	ddb9      	ble.n	8007f50 <lTCPWindowRxCheck+0x20>
			else if( lDistance > ( int32_t ) ulSpace )
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	dcb7      	bgt.n	8007f50 <lTCPWindowRxCheck+0x20>
				while( ( pxFound = xTCPWindowRxFind( pxWindow, ulLast ) ) != NULL )
 8007fe0:	4631      	mov	r1, r6
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f7ff fe08 	bl	8007bf8 <xTCPWindowRxFind>
 8007fe8:	b9d8      	cbnz	r0, 8008022 <lTCPWindowRxCheck+0xf2>
				pxWindow->ulOptionsData[0] = OPTION_CODE_SINGLE_SACK;
 8007fea:	4b11      	ldr	r3, [pc, #68]	; (8008030 <lTCPWindowRxCheck+0x100>)
 8007fec:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8007ff0:	ba2b      	rev	r3, r5
				pxWindow->ulOptionsData[1] = FreeRTOS_htonl( ulSequenceNumber );
 8007ff2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8007ff6:	ba36      	rev	r6, r6
				pxWindow->ucOptionLength = 3 * sizeof( pxWindow->ulOptionsData[ 0 ] );
 8007ff8:	230c      	movs	r3, #12
				pxWindow->ulOptionsData[2] = FreeRTOS_htonl( ulLast );
 8007ffa:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
				pxWindow->ucOptionLength = 3 * sizeof( pxWindow->ulOptionsData[ 0 ] );
 8007ffe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 8008002:	4629      	mov	r1, r5
 8008004:	4620      	mov	r0, r4
 8008006:	f7ff fdf7 	bl	8007bf8 <xTCPWindowRxFind>
				if( pxFound != NULL )
 800800a:	2800      	cmp	r0, #0
 800800c:	d1a0      	bne.n	8007f50 <lTCPWindowRxCheck+0x20>
					pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 800800e:	2301      	movs	r3, #1
 8008010:	463a      	mov	r2, r7
 8008012:	4629      	mov	r1, r5
 8008014:	4620      	mov	r0, r4
 8008016:	f7ff feab 	bl	8007d70 <xTCPWindowNew>
					if( pxFound == NULL )
 800801a:	b928      	cbnz	r0, 8008028 <lTCPWindowRxCheck+0xf8>
						pxWindow->ucOptionLength = 0u;
 800801c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8008020:	e796      	b.n	8007f50 <lTCPWindowRxCheck+0x20>
					ulLast += ( uint32_t ) pxFound->lDataLength;
 8008022:	6883      	ldr	r3, [r0, #8]
 8008024:	441e      	add	r6, r3
 8008026:	e7db      	b.n	8007fe0 <lTCPWindowRxCheck+0xb0>
						lReturn = ( int32_t ) ( ulSequenceNumber - ulCurrentSequenceNumber );
 8008028:	eba5 0008 	sub.w	r0, r5, r8
	}
 800802c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008030:	0a050101 	.word	0x0a050101

08008034 <lTCPWindowTxAdd>:
	{
 8008034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008038:	4616      	mov	r6, r2
	TCPSegment_t *pxSegment = pxWindow->pxHeadSegment;
 800803a:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
	{
 800803c:	4605      	mov	r5, r0
 800803e:	4698      	mov	r8, r3
	int32_t lBytesLeft = ( int32_t ) ulLength, lToWrite;
 8008040:	460f      	mov	r7, r1
		if( pxSegment != NULL )
 8008042:	b34a      	cbz	r2, 8008098 <lTCPWindowTxAdd+0x64>
			if( pxSegment->lDataLength < pxSegment->lMaxLength )
 8008044:	6893      	ldr	r3, [r2, #8]
 8008046:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800804a:	4573      	cmp	r3, lr
 800804c:	da24      	bge.n	8008098 <lTCPWindowTxAdd+0x64>
				if( ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength != 0 ) )
 800804e:	7d90      	ldrb	r0, [r2, #22]
 8008050:	f010 0001 	ands.w	r0, r0, #1
 8008054:	d120      	bne.n	8008098 <lTCPWindowTxAdd+0x64>
 8008056:	b30b      	cbz	r3, 800809c <lTCPWindowTxAdd+0x68>
					lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 8008058:	ebae 0403 	sub.w	r4, lr, r3
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
 800805c:	428c      	cmp	r4, r1
 800805e:	bfa8      	it	ge
 8008060:	460c      	movge	r4, r1
					pxSegment->lDataLength += lToWrite;
 8008062:	4423      	add	r3, r4
 8008064:	6093      	str	r3, [r2, #8]
					if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 8008066:	459e      	cmp	lr, r3
					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8008068:	6b6b      	ldr	r3, [r5, #52]	; 0x34
						pxWindow->pxHeadSegment = NULL;
 800806a:	bfd8      	it	le
 800806c:	67e8      	strle	r0, [r5, #124]	; 0x7c
		lPosition += lCount;
 800806e:	4426      	add	r6, r4
					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8008070:	4423      	add	r3, r4
		if( lPosition >= lMax )
 8008072:	45b0      	cmp	r8, r6
					lBytesLeft -= lToWrite;
 8008074:	eba1 0704 	sub.w	r7, r1, r4
					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8008078:	636b      	str	r3, [r5, #52]	; 0x34
		if( lPosition >= lMax )
 800807a:	dc01      	bgt.n	8008080 <lTCPWindowTxAdd+0x4c>
			lPosition -= lMax;
 800807c:	eba6 0608 	sub.w	r6, r6, r8
			pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, pxWindow->usMSS );
 8008080:	f04f 0900 	mov.w	r9, #0
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8008084:	f105 0a54 	add.w	sl, r5, #84	; 0x54
 8008088:	f105 0b5c 	add.w	fp, r5, #92	; 0x5c
		while( lBytesLeft > 0 )
 800808c:	2f00      	cmp	r7, #0
 800808e:	dc07      	bgt.n	80080a0 <lTCPWindowTxAdd+0x6c>
	}
 8008090:	4620      	mov	r0, r4
 8008092:	b003      	add	sp, #12
 8008094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int32_t lDone = 0;
 8008098:	2400      	movs	r4, #0
 800809a:	e7f1      	b.n	8008080 <lTCPWindowTxAdd+0x4c>
 800809c:	461c      	mov	r4, r3
 800809e:	e7ef      	b.n	8008080 <lTCPWindowTxAdd+0x4c>
			pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, pxWindow->usMSS );
 80080a0:	2300      	movs	r3, #0
 80080a2:	f8b5 20bc 	ldrh.w	r2, [r5, #188]	; 0xbc
 80080a6:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80080a8:	4628      	mov	r0, r5
 80080aa:	f7ff fe61 	bl	8007d70 <xTCPWindowNew>
			if( pxSegment != NULL )
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d0ee      	beq.n	8008090 <lTCPWindowTxAdd+0x5c>
 80080b2:	6842      	ldr	r2, [r0, #4]
				pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 80080b4:	6b69      	ldr	r1, [r5, #52]	; 0x34
				pxSegment->lStreamPos = lPosition;
 80080b6:	60c6      	str	r6, [r0, #12]
 80080b8:	42ba      	cmp	r2, r7
 80080ba:	bfa8      	it	ge
 80080bc:	463a      	movge	r2, r7
		lPosition += lCount;
 80080be:	4416      	add	r6, r2
				pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 80080c0:	4411      	add	r1, r2
				pxSegment->lDataLength = lToWrite;
 80080c2:	6082      	str	r2, [r0, #8]
		if( lPosition >= lMax )
 80080c4:	45b0      	cmp	r8, r6
				pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 80080c6:	6369      	str	r1, [r5, #52]	; 0x34
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 80080c8:	9001      	str	r0, [sp, #4]
 80080ca:	f100 0118 	add.w	r1, r0, #24
				lBytesLeft -= lToWrite;
 80080ce:	eba7 0702 	sub.w	r7, r7, r2
				lDone += lToWrite;
 80080d2:	4414      	add	r4, r2
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 80080d4:	4650      	mov	r0, sl
 80080d6:	465a      	mov	r2, fp
			lPosition -= lMax;
 80080d8:	bfd8      	it	le
 80080da:	eba6 0608 	suble.w	r6, r6, r8
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 80080de:	f7ff fdb9 	bl	8007c54 <vListInsertGeneric>
				if( pxSegment->lDataLength < pxSegment->lMaxLength )
 80080e2:	9b01      	ldr	r3, [sp, #4]
 80080e4:	6899      	ldr	r1, [r3, #8]
 80080e6:	685a      	ldr	r2, [r3, #4]
 80080e8:	4291      	cmp	r1, r2
					pxWindow->pxHeadSegment = pxSegment;
 80080ea:	bfa8      	it	ge
 80080ec:	464b      	movge	r3, r9
 80080ee:	67eb      	str	r3, [r5, #124]	; 0x7c
 80080f0:	e7cc      	b.n	800808c <lTCPWindowTxAdd+0x58>

080080f2 <xTCPWindowTxDone>:
		return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments) );
 80080f2:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
	}
 80080f6:	fab0 f080 	clz	r0, r0
 80080fa:	0940      	lsrs	r0, r0, #5
 80080fc:	4770      	bx	lr

080080fe <xTCPWindowTxHasData>:
		*pulDelay = 0u;
 80080fe:	2300      	movs	r3, #0
	{
 8008100:	b570      	push	{r4, r5, r6, lr}
		*pulDelay = 0u;
 8008102:	6013      	str	r3, [r2, #0]
		if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 8008104:	6c03      	ldr	r3, [r0, #64]	; 0x40
	{
 8008106:	4604      	mov	r4, r0
 8008108:	4616      	mov	r6, r2
		if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 800810a:	b97b      	cbnz	r3, 800812c <xTCPWindowTxHasData+0x2e>
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800810c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800810e:	b17b      	cbz	r3, 8008130 <xTCPWindowTxHasData+0x32>
			pxReturn = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 8008110:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8008112:	68dd      	ldr	r5, [r3, #12]
			if( pxSegment != NULL )
 8008114:	b165      	cbz	r5, 8008130 <xTCPWindowTxHasData+0x32>
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
 8008116:	f7fc fc33 	bl	8004980 <xTaskGetTickCount>
 800811a:	692b      	ldr	r3, [r5, #16]
				ulMaxAge = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800811c:	7d2a      	ldrb	r2, [r5, #20]
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
 800811e:	1ac0      	subs	r0, r0, r3
				ulMaxAge = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 8008120:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008122:	4093      	lsls	r3, r2
				if( ulMaxAge > ulAge )
 8008124:	4283      	cmp	r3, r0
 8008126:	d901      	bls.n	800812c <xTCPWindowTxHasData+0x2e>
					*pulDelay = ulMaxAge - ulAge;
 8008128:	1a1b      	subs	r3, r3, r0
 800812a:	6033      	str	r3, [r6, #0]
					xReturn = pdTRUE;
 800812c:	2001      	movs	r0, #1
	}
 800812e:	bd70      	pop	{r4, r5, r6, pc}
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8008130:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008132:	b90b      	cbnz	r3, 8008138 <xTCPWindowTxHasData+0x3a>
					xReturn = pdFALSE;
 8008134:	2000      	movs	r0, #0
 8008136:	bd70      	pop	{r4, r5, r6, pc}
			pxReturn = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 8008138:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800813a:	68dd      	ldr	r5, [r3, #12]
				if( pxSegment == NULL )
 800813c:	2d00      	cmp	r5, #0
 800813e:	d0f9      	beq.n	8008134 <xTCPWindowTxHasData+0x36>
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8008140:	4620      	mov	r0, r4
 8008142:	f7ff fd68 	bl	8007c16 <prvTCPWindowTxHasSpace>
 8008146:	2800      	cmp	r0, #0
 8008148:	d0f4      	beq.n	8008134 <xTCPWindowTxHasData+0x36>
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800814a:	7823      	ldrb	r3, [r4, #0]
 800814c:	079b      	lsls	r3, r3, #30
 800814e:	d5ed      	bpl.n	800812c <xTCPWindowTxHasData+0x2e>
 8008150:	68aa      	ldr	r2, [r5, #8]
 8008152:	686b      	ldr	r3, [r5, #4]
 8008154:	429a      	cmp	r2, r3
 8008156:	dae9      	bge.n	800812c <xTCPWindowTxHasData+0x2e>
 8008158:	e7ec      	b.n	8008134 <xTCPWindowTxHasData+0x36>

0800815a <ulTCPWindowTxGet>:
	{
 800815a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800815e:	6c05      	ldr	r5, [r0, #64]	; 0x40
	{
 8008160:	4604      	mov	r4, r0
 8008162:	460f      	mov	r7, r1
 8008164:	4616      	mov	r6, r2
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8008166:	b11d      	cbz	r5, 8008170 <ulTCPWindowTxGet+0x16>
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8008168:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800816a:	68c5      	ldr	r5, [r0, #12]
			uxListRemove( pxItem );
 800816c:	f7fb fbd2 	bl	8003914 <uxListRemove>
		pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 8008170:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008172:	62e3      	str	r3, [r4, #44]	; 0x2c
		if( pxSegment == NULL )
 8008174:	b9ed      	cbnz	r5, 80081b2 <ulTCPWindowTxGet+0x58>
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8008176:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008178:	2b00      	cmp	r3, #0
 800817a:	d065      	beq.n	8008248 <ulTCPWindowTxGet+0xee>
			pxReturn = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800817c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800817e:	f8d3 900c 	ldr.w	r9, [r3, #12]
			if( pxSegment != NULL )
 8008182:	f1b9 0f00 	cmp.w	r9, #0
 8008186:	d05f      	beq.n	8008248 <ulTCPWindowTxGet+0xee>
				ulMaxTime = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 8008188:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800818a:	f899 8014 	ldrb.w	r8, [r9, #20]
 800818e:	fa03 f808 	lsl.w	r8, r3, r8
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
 8008192:	f7fc fbf5 	bl	8004980 <xTaskGetTickCount>
 8008196:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800819a:	1ac0      	subs	r0, r0, r3
				if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 800819c:	4580      	cmp	r8, r0
 800819e:	d253      	bcs.n	8008248 <ulTCPWindowTxGet+0xee>
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 80081a0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d059      	beq.n	800825a <ulTCPWindowTxGet+0x100>
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 80081a6:	6f60      	ldr	r0, [r4, #116]	; 0x74
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 80081a8:	68c5      	ldr	r5, [r0, #12]
			uxListRemove( pxItem );
 80081aa:	f7fb fbb3 	bl	8003914 <uxListRemove>
					pxSegment->u.bits.ucDupAckCount = pdFALSE_UNSIGNED;
 80081ae:	2300      	movs	r3, #0
 80081b0:	756b      	strb	r3, [r5, #21]
			configASSERT( listLIST_ITEM_CONTAINER( &(pxSegment->xQueueItem ) ) == NULL );
 80081b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d13e      	bne.n	8008236 <ulTCPWindowTxGet+0xdc>
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 80081b8:	f104 0270 	add.w	r2, r4, #112	; 0x70
 80081bc:	f105 0118 	add.w	r1, r5, #24
 80081c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80081c4:	f7ff fd46 	bl	8007c54 <vListInsertGeneric>
			pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 80081c8:	7dab      	ldrb	r3, [r5, #22]
 80081ca:	f043 0301 	orr.w	r3, r3, #1
 80081ce:	75ab      	strb	r3, [r5, #22]
			( pxSegment->u.bits.ucTransmitCount )++;
 80081d0:	7d2b      	ldrb	r3, [r5, #20]
 80081d2:	3301      	adds	r3, #1
 80081d4:	b2db      	uxtb	r3, r3
			if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 80081d6:	2b04      	cmp	r3, #4
			( pxSegment->u.bits.ucTransmitCount )++;
 80081d8:	752b      	strb	r3, [r5, #20]
			if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 80081da:	d106      	bne.n	80081ea <ulTCPWindowTxGet+0x90>
				if( pxWindow->xSize.ulTxWindowLength > ( 2U * pxWindow->usMSS ) )
 80081dc:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
 80081e0:	68a2      	ldr	r2, [r4, #8]
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	429a      	cmp	r2, r3
					pxWindow->xSize.ulTxWindowLength = ( 2UL * pxWindow->usMSS );
 80081e6:	bf88      	it	hi
 80081e8:	60a3      	strhi	r3, [r4, #8]
	pxTimer->ulBorn = xTaskGetTickCount ( );
 80081ea:	f7fc fbc9 	bl	8004980 <xTaskGetTickCount>
			pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 80081ee:	682b      	ldr	r3, [r5, #0]
	pxTimer->ulBorn = xTaskGetTickCount ( );
 80081f0:	6128      	str	r0, [r5, #16]
			pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 80081f2:	62e3      	str	r3, [r4, #44]	; 0x2c
			*plPosition = pxSegment->lStreamPos;
 80081f4:	68eb      	ldr	r3, [r5, #12]
 80081f6:	6033      	str	r3, [r6, #0]
			ulReturn = ( uint32_t ) pxSegment->lDataLength;
 80081f8:	68a8      	ldr	r0, [r5, #8]
		return ulReturn;
 80081fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 80081fe:	7822      	ldrb	r2, [r4, #0]
 8008200:	0792      	lsls	r2, r2, #30
 8008202:	d503      	bpl.n	800820c <ulTCPWindowTxGet+0xb2>
 8008204:	689a      	ldr	r2, [r3, #8]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	429a      	cmp	r2, r3
 800820a:	db23      	blt.n	8008254 <ulTCPWindowTxGet+0xfa>
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800820c:	4639      	mov	r1, r7
 800820e:	4620      	mov	r0, r4
 8008210:	f7ff fd01 	bl	8007c16 <prvTCPWindowTxHasSpace>
 8008214:	b1f0      	cbz	r0, 8008254 <ulTCPWindowTxGet+0xfa>
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8008216:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008218:	b11b      	cbz	r3, 8008222 <ulTCPWindowTxGet+0xc8>
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800821a:	6e20      	ldr	r0, [r4, #96]	; 0x60
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800821c:	68c5      	ldr	r5, [r0, #12]
			uxListRemove( pxItem );
 800821e:	f7fb fb79 	bl	8003914 <uxListRemove>
					if( pxWindow->pxHeadSegment == pxSegment )
 8008222:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
					pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 8008224:	68aa      	ldr	r2, [r5, #8]
					if( pxWindow->pxHeadSegment == pxSegment )
 8008226:	42ab      	cmp	r3, r5
						pxWindow->pxHeadSegment = NULL;
 8008228:	bf04      	itt	eq
 800822a:	2300      	moveq	r3, #0
 800822c:	67e3      	streq	r3, [r4, #124]	; 0x7c
					pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 800822e:	682b      	ldr	r3, [r5, #0]
 8008230:	4413      	add	r3, r2
 8008232:	62a3      	str	r3, [r4, #40]	; 0x28
 8008234:	e7bd      	b.n	80081b2 <ulTCPWindowTxGet+0x58>
 8008236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823a:	f383 8811 	msr	BASEPRI, r3
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	e7fe      	b.n	8008246 <ulTCPWindowTxGet+0xec>
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8008248:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800824a:	b11b      	cbz	r3, 8008254 <ulTCPWindowTxGet+0xfa>
			pxReturn = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800824c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800824e:	68db      	ldr	r3, [r3, #12]
				if( pxSegment == NULL )
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1d4      	bne.n	80081fe <ulTCPWindowTxGet+0xa4>
			pxSegment = NULL;
 8008254:	2000      	movs	r0, #0
 8008256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxSegment->u.bits.ucDupAckCount = pdFALSE_UNSIGNED;
 800825a:	756d      	strb	r5, [r5, #21]
 800825c:	deff      	udf	#255	; 0xff

0800825e <ulTCPWindowTxAck>:
	{
	uint32_t ulFirstSequence, ulReturn;

		/* Receive a normal ACK. */

		ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 800825e:	6a03      	ldr	r3, [r0, #32]
	{
 8008260:	460a      	mov	r2, r1
		return ( ( b - a ) & 0x80000000UL ) == 0UL;
 8008262:	1a59      	subs	r1, r3, r1

		if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 8008264:	2900      	cmp	r1, #0
 8008266:	da02      	bge.n	800826e <ulTCPWindowTxAck+0x10>
		{
			ulReturn = 0UL;
		}
		else
		{
			ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 8008268:	4619      	mov	r1, r3
 800826a:	f7ff bd19 	b.w	8007ca0 <prvTCPWindowTxCheckAck>
		}

		return ulReturn;
	}
 800826e:	2000      	movs	r0, #0
 8008270:	4770      	bx	lr

08008272 <ulTCPWindowTxSack>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxSack( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
 8008272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008276:	4605      	mov	r5, r0
 8008278:	460f      	mov	r7, r1
	uint32_t ulAckCount = 0UL;
	uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;

		/* Receive a SACK option. */
		ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 800827a:	f7ff fd11 	bl	8007ca0 <prvTCPWindowTxCheckAck>
		pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &( pxWindow->xWaitQueue ) );
 800827e:	f105 0a70 	add.w	sl, r5, #112	; 0x70
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 8008282:	6f6e      	ldr	r6, [r5, #116]	; 0x74
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8008284:	f105 0940 	add.w	r9, r5, #64	; 0x40
		ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8008288:	4680      	mov	r8, r0
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 800828a:	3f01      	subs	r7, #1
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800828c:	3548      	adds	r5, #72	; 0x48
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800828e:	45b2      	cmp	sl, r6
 8008290:	d102      	bne.n	8008298 <ulTCPWindowTxSack+0x26>
				pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
			FreeRTOS_flush_logging( );
		}

		return ulAckCount;
	}
 8008292:	4640      	mov	r0, r8
 8008294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 8008298:	68f4      	ldr	r4, [r6, #12]
			pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800829a:	6876      	ldr	r6, [r6, #4]
			if( ( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED ) &&
 800829c:	7da3      	ldrb	r3, [r4, #22]
 800829e:	f013 0202 	ands.w	r2, r3, #2
 80082a2:	d1f4      	bne.n	800828e <ulTCPWindowTxSack+0x1c>
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 80082a4:	6823      	ldr	r3, [r4, #0]
 80082a6:	1afb      	subs	r3, r7, r3
			if( ( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED ) &&
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	dbf0      	blt.n	800828e <ulTCPWindowTxSack+0x1c>
				( ++( pxSegment->u.bits.ucDupAckCount ) == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT ) )
 80082ac:	7d63      	ldrb	r3, [r4, #21]
 80082ae:	3301      	adds	r3, #1
 80082b0:	b2db      	uxtb	r3, r3
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 80082b2:	2b03      	cmp	r3, #3
 80082b4:	7563      	strb	r3, [r4, #21]
 80082b6:	d1ea      	bne.n	800828e <ulTCPWindowTxSack+0x1c>
				pxSegment->u.bits.ucTransmitCount = pdFALSE_UNSIGNED;
 80082b8:	7522      	strb	r2, [r4, #20]
				uxListRemove( &pxSegment->xQueueItem );
 80082ba:	3418      	adds	r4, #24
 80082bc:	4620      	mov	r0, r4
 80082be:	f7fb fb29 	bl	8003914 <uxListRemove>
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 80082c2:	462a      	mov	r2, r5
 80082c4:	4621      	mov	r1, r4
 80082c6:	4648      	mov	r0, r9
 80082c8:	f7ff fcc4 	bl	8007c54 <vListInsertGeneric>
 80082cc:	e7df      	b.n	800828e <ulTCPWindowTxSack+0x1c>
	...

080082d0 <vProcessGeneratedUDPPacket>:
	}
};
/*-----------------------------------------------------------*/

void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80082d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082d2:	4605      	mov	r5, r0
UDPPacket_t *pxUDPPacket;
IPHeader_t *pxIPHeader;
eARPLookupResult_t eReturned;
uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 80082d4:	6943      	ldr	r3, [r0, #20]

	/* Map the UDP packet onto the start of the frame. */
	pxUDPPacket = ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 80082d6:	69ac      	ldr	r4, [r5, #24]
uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 80082d8:	a802      	add	r0, sp, #8

	/* Determine the ARP cache status for the requested IP address. */
	eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 80082da:	4621      	mov	r1, r4
uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 80082dc:	f840 3d04 	str.w	r3, [r0, #-4]!
	eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 80082e0:	f7fd f860 	bl	80053a4 <eARPGetCacheEntry>

	if( eReturned != eCantSendPacket )
 80082e4:	2802      	cmp	r0, #2
 80082e6:	d057      	beq.n	8008398 <vProcessGeneratedUDPPacket+0xc8>
	{
		if( eReturned == eARPCacheHit )
 80082e8:	2801      	cmp	r0, #1
 80082ea:	d14b      	bne.n	8008384 <vProcessGeneratedUDPPacket+0xb4>
			{
			UDPHeader_t *pxUDPHeader;

				pxUDPHeader = &( pxUDPPacket->xUDPHeader );

				pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 80082ec:	8c2b      	ldrh	r3, [r5, #32]
 80082ee:	84a3      	strh	r3, [r4, #36]	; 0x24
				pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 80082f0:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80082f2:	8463      	strh	r3, [r4, #34]	; 0x22
				pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) );
 80082f4:	69eb      	ldr	r3, [r5, #28]
			/*
			 * Offset the memcpy by the size of a MAC address to start at the packet's
			 * Ethernet header 'source' MAC address; the preceding 'destination' should not be altered.
			 */
			char *pxUdpSrcAddrOffset = ( char *) pxUDPPacket + sizeof( MACAddress_t );
			memcpy( pxUdpSrcAddrOffset, xDefaultPartUDPPacketHeader.ucBytes, sizeof( xDefaultPartUDPPacketHeader ) );
 80082f6:	4f2a      	ldr	r7, [pc, #168]	; (80083a0 <vProcessGeneratedUDPPacket+0xd0>)
				pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) );
 80082f8:	3308      	adds	r3, #8
				pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 80082fa:	ba5b      	rev16	r3, r3
 80082fc:	84e3      	strh	r3, [r4, #38]	; 0x26
				pxUDPHeader->usChecksum = 0u;
 80082fe:	2300      	movs	r3, #0
 8008300:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8008304:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
				ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
 8008308:	69ab      	ldr	r3, [r5, #24]
 800830a:	799e      	ldrb	r6, [r3, #6]
			memcpy( pxUdpSrcAddrOffset, xDefaultPartUDPPacketHeader.ucBytes, sizeof( xDefaultPartUDPPacketHeader ) );
 800830c:	1da2      	adds	r2, r4, #6
 800830e:	f107 0e18 	add.w	lr, r7, #24
 8008312:	463b      	mov	r3, r7
 8008314:	cb03      	ldmia	r3!, {r0, r1}
 8008316:	4573      	cmp	r3, lr
 8008318:	6010      	str	r0, [r2, #0]
 800831a:	6051      	str	r1, [r2, #4]
 800831c:	461f      	mov	r7, r3
 800831e:	f102 0208 	add.w	r2, r2, #8
 8008322:	d1f6      	bne.n	8008312 <vProcessGeneratedUDPPacket+0x42>
				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) );
			}
			else
		#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
			{
				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 8008324:	69eb      	ldr	r3, [r5, #28]
 8008326:	331c      	adds	r3, #28
 8008328:	b29b      	uxth	r3, r3
			}

			/* The total transmit size adds on the Ethernet header. */
			pxNetworkBuffer->xDataLength = pxIPHeader->usLength + sizeof( EthernetHeader_t );
 800832a:	f103 020e 	add.w	r2, r3, #14
			pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 800832e:	ba5b      	rev16	r3, r3
			pxNetworkBuffer->xDataLength = pxIPHeader->usLength + sizeof( EthernetHeader_t );
 8008330:	61ea      	str	r2, [r5, #28]
			pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8008332:	8223      	strh	r3, [r4, #16]

			#if( ipconfigUSE_LLMNR == 1 )
			{
				/* LLMNR messages are typically used on a LAN and they're
				 * not supposed to cross routers */
				if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 8008334:	4a1b      	ldr	r2, [pc, #108]	; (80083a4 <vProcessGeneratedUDPPacket+0xd4>)
			pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 8008336:	696b      	ldr	r3, [r5, #20]
 8008338:	f8c4 301e 	str.w	r3, [r4, #30]
				if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 800833c:	4293      	cmp	r3, r2
				{
					pxIPHeader->ucTimeToLive = 0x01;
 800833e:	bf08      	it	eq
 8008340:	2301      	moveq	r3, #1
			}
			#endif

			#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
			{
				pxIPHeader->usHeaderChecksum = 0u;
 8008342:	f04f 0000 	mov.w	r0, #0
					pxIPHeader->ucTimeToLive = 0x01;
 8008346:	bf08      	it	eq
 8008348:	75a3      	strbeq	r3, [r4, #22]
				pxIPHeader->usHeaderChecksum = 0u;
 800834a:	7620      	strb	r0, [r4, #24]
 800834c:	7660      	strb	r0, [r4, #25]
				pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0UL, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
 800834e:	2214      	movs	r2, #20
 8008350:	f104 010e 	add.w	r1, r4, #14
 8008354:	f7fd fc46 	bl	8005be4 <usGenerateChecksum>
				pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 8008358:	ba40      	rev16	r0, r0
 800835a:	43c0      	mvns	r0, r0

				if( ( ucSocketOptions & ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) != 0u )
 800835c:	f016 0602 	ands.w	r6, r6, #2
				pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 8008360:	8320      	strh	r0, [r4, #24]
				if( ( ucSocketOptions & ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) != 0u )
 8008362:	d00a      	beq.n	800837a <vProcessGeneratedUDPPacket+0xaa>
				{
					usGenerateProtocolChecksum( (uint8_t*)pxUDPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
 8008364:	2201      	movs	r2, #1
 8008366:	69e9      	ldr	r1, [r5, #28]
 8008368:	4620      	mov	r0, r4
 800836a:	f7fd fcab 	bl	8005cc4 <usGenerateProtocolChecksum>
				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
			}
		}
		#endif

		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 800836e:	2101      	movs	r1, #1
 8008370:	4628      	mov	r0, r5
 8008372:	f7fa f9b7 	bl	80026e4 <xNetworkInterfaceOutput>
	{
		/* The packet can't be sent (DHCP not completed?).  Just drop the
		packet. */
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
	}
}
 8008376:	b003      	add	sp, #12
 8008378:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxUDPPacket->xUDPHeader.usChecksum = 0u;
 800837a:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
 800837e:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
 8008382:	e7f4      	b.n	800836e <vProcessGeneratedUDPPacket+0x9e>
		else if( eReturned == eARPCacheMiss )
 8008384:	b940      	cbnz	r0, 8008398 <vProcessGeneratedUDPPacket+0xc8>
			vARPRefreshCacheEntry( NULL, ulIPAddress );
 8008386:	9901      	ldr	r1, [sp, #4]
 8008388:	f7fc ff40 	bl	800520c <vARPRefreshCacheEntry>
			pxNetworkBuffer->ulIPAddress = ulIPAddress;
 800838c:	9b01      	ldr	r3, [sp, #4]
 800838e:	616b      	str	r3, [r5, #20]
			vARPGenerateRequestPacket( pxNetworkBuffer );
 8008390:	4628      	mov	r0, r5
 8008392:	f7fd f84b 	bl	800542c <vARPGenerateRequestPacket>
 8008396:	e7ea      	b.n	800836e <vProcessGeneratedUDPPacket+0x9e>
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8008398:	4628      	mov	r0, r5
 800839a:	f000 f889 	bl	80084b0 <vReleaseNetworkBufferAndDescriptor>
 800839e:	e7ea      	b.n	8008376 <vProcessGeneratedUDPPacket+0xa6>
 80083a0:	200001b4 	.word	0x200001b4
 80083a4:	fc0000e0 	.word	0xfc0000e0

080083a8 <xProcessReceivedUDPPacket>:
/*-----------------------------------------------------------*/

BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer, uint16_t usPort )
{
 80083a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn = pdPASS;
FreeRTOS_Socket_t *pxSocket;

UDPPacket_t *pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
 80083aa:	6985      	ldr	r5, [r0, #24]
{
 80083ac:	4606      	mov	r6, r0

	/* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 80083ae:	4608      	mov	r0, r1
{
 80083b0:	460f      	mov	r7, r1
    pxSocket = pxUDPSocketLookup( usPort );
 80083b2:	f7fe f851 	bl	8006458 <pxUDPSocketLookup>

	if( pxSocket )
 80083b6:	4604      	mov	r4, r0
 80083b8:	b308      	cbz	r0, 80083fe <xProcessReceivedUDPPacket+0x56>
	{

		/* When refreshing the ARP cache with received UDP packets we must be
		careful;  hundreds of broadcast messages may pass and if we're not
		handling them, no use to fill the ARP cache with those IP addresses. */
		vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 80083ba:	f8d5 101a 	ldr.w	r1, [r5, #26]
 80083be:	1da8      	adds	r0, r5, #6
 80083c0:	f7fc ff24 	bl	800520c <vARPRefreshCacheEntry>
		}
		#endif

		if( xReturn == pdPASS )
		{
			vTaskSuspendAll();
 80083c4:	f7fc fad4 	bl	8004970 <vTaskSuspendAll>
			{
				if( xReturn == pdPASS )
				{
					taskENTER_CRITICAL();
 80083c8:	f7fb fb1c 	bl	8003a04 <vPortEnterCritical>
					{
						/* Add the network packet to the list of packets to be
						processed by the socket. */
						vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 80083cc:	4631      	mov	r1, r6
 80083ce:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80083d2:	f7fb fa7c 	bl	80038ce <vListInsertEnd>
					}
					taskEXIT_CRITICAL();
 80083d6:	f7fb fb37 	bl	8003a48 <vPortExitCritical>
				}
			}
			xTaskResumeAll();
 80083da:	f7fc fb69 	bl	8004ab0 <xTaskResumeAll>

			/* Set the socket's receive event */
			if( pxSocket->xEventGroup != NULL )
 80083de:	6860      	ldr	r0, [r4, #4]
 80083e0:	b110      	cbz	r0, 80083e8 <xProcessReceivedUDPPacket+0x40>
			{
				xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_RECEIVE );
 80083e2:	2101      	movs	r1, #1
 80083e4:	f7fb fa04 	bl	80037f0 <xEventGroupSetBits>
			}

			#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
			{
				if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) )
 80083e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80083ea:	b133      	cbz	r3, 80083fa <xProcessReceivedUDPPacket+0x52>
 80083ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80083ee:	07d2      	lsls	r2, r2, #31
 80083f0:	d503      	bpl.n	80083fa <xProcessReceivedUDPPacket+0x52>
				{
					xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, eSELECT_READ );
 80083f2:	2101      	movs	r1, #1
 80083f4:	6818      	ldr	r0, [r3, #0]
 80083f6:	f7fb f9fb 	bl	80037f0 <xEventGroupSetBits>
BaseType_t xReturn = pdPASS;
 80083fa:	2001      	movs	r0, #1
 80083fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		/* There is no socket listening to the target port, but still it might
		be for this node. */

		#if( ipconfigUSE_LLMNR == 1 )
			/* a LLMNR request, check for the destination port. */
			if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 80083fe:	f64e 3314 	movw	r3, #60180	; 0xeb14
 8008402:	429f      	cmp	r7, r3
 8008404:	d002      	beq.n	800840c <xProcessReceivedUDPPacket+0x64>
 8008406:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
 8008408:	429a      	cmp	r2, r3
 800840a:	d109      	bne.n	8008420 <xProcessReceivedUDPPacket+0x78>
				( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
			{
				vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 800840c:	1da8      	adds	r0, r5, #6
 800840e:	f8d5 101a 	ldr.w	r1, [r5, #26]
 8008412:	f7fc fefb 	bl	800520c <vARPRefreshCacheEntry>
				xReturn = ( BaseType_t )ulDNSHandlePacket( pxNetworkBuffer );
 8008416:	4630      	mov	r0, r6
			xReturn = pdFAIL;
		}
	}

	return xReturn;
}
 8008418:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				xReturn = ( BaseType_t )ulDNSHandlePacket( pxNetworkBuffer );
 800841c:	f7fd ba46 	b.w	80058ac <ulDNSHandlePacket>
}
 8008420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008424 <xNetworkBuffersInitialise>:
static SemaphoreHandle_t xNetworkBufferSemaphore = NULL;

/*-----------------------------------------------------------*/

BaseType_t xNetworkBuffersInitialise( void )
{
 8008424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
BaseType_t xReturn, x;

	/* Only initialise the buffers and their associated kernel objects if they
	have not been initialised before. */
	if( xNetworkBufferSemaphore == NULL )
 8008428:	4c19      	ldr	r4, [pc, #100]	; (8008490 <xNetworkBuffersInitialise+0x6c>)
 800842a:	6825      	ldr	r5, [r4, #0]
 800842c:	4626      	mov	r6, r4
 800842e:	bb45      	cbnz	r5, 8008482 <xNetworkBuffersInitialise+0x5e>
	{
		xNetworkBufferSemaphore = xSemaphoreCreateCounting( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 8008430:	213c      	movs	r1, #60	; 0x3c
 8008432:	4608      	mov	r0, r1
 8008434:	f7fb fe0d 	bl	8004052 <xQueueCreateCountingSemaphore>
 8008438:	6020      	str	r0, [r4, #0]
		configASSERT( xNetworkBufferSemaphore );
 800843a:	b940      	cbnz	r0, 800844e <xNetworkBuffersInitialise+0x2a>
 800843c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008440:	f383 8811 	msr	BASEPRI, r3
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	e7fe      	b.n	800844c <xNetworkBuffersInitialise+0x28>

		if( xNetworkBufferSemaphore != NULL )
		{
			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				vQueueAddToRegistry( xNetworkBufferSemaphore, "NetBufSem" );
 800844e:	4911      	ldr	r1, [pc, #68]	; (8008494 <xNetworkBuffersInitialise+0x70>)
 8008450:	4c11      	ldr	r4, [pc, #68]	; (8008498 <xNetworkBuffersInitialise+0x74>)
				xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
				vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
				listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );

				/* Currently, all buffers are available for use. */
				vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 8008452:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800849c <xNetworkBuffersInitialise+0x78>
				vQueueAddToRegistry( xNetworkBufferSemaphore, "NetBufSem" );
 8008456:	f7fc f8ab 	bl	80045b0 <vQueueAddToRegistry>
			vListInitialise( &xFreeBuffersList );
 800845a:	4810      	ldr	r0, [pc, #64]	; (800849c <xNetworkBuffersInitialise+0x78>)
 800845c:	f7fb fa29 	bl	80038b2 <vListInitialise>
 8008460:	f504 6707 	add.w	r7, r4, #2160	; 0x870
				xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
 8008464:	61a5      	str	r5, [r4, #24]
				vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 8008466:	4620      	mov	r0, r4
 8008468:	f7fb fa2e 	bl	80038c8 <vListInitialiseItem>
				listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );
 800846c:	60e4      	str	r4, [r4, #12]
				vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 800846e:	4621      	mov	r1, r4
 8008470:	4640      	mov	r0, r8
 8008472:	3424      	adds	r4, #36	; 0x24
 8008474:	f7fb fa37 	bl	80038e6 <vListInsert>
			for( x = 0; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8008478:	42bc      	cmp	r4, r7
 800847a:	d1f3      	bne.n	8008464 <xNetworkBuffersInitialise+0x40>
			}

			uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 800847c:	4b08      	ldr	r3, [pc, #32]	; (80084a0 <xNetworkBuffersInitialise+0x7c>)
 800847e:	223c      	movs	r2, #60	; 0x3c
 8008480:	601a      	str	r2, [r3, #0]
		}
	}

	if( xNetworkBufferSemaphore == NULL )
 8008482:	6830      	ldr	r0, [r6, #0]
	{
		xReturn = pdPASS;
	}

	return xReturn;
}
 8008484:	3000      	adds	r0, #0
 8008486:	bf18      	it	ne
 8008488:	2001      	movne	r0, #1
 800848a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800848e:	bf00      	nop
 8008490:	20005764 	.word	0x20005764
 8008494:	08008db8 	.word	0x08008db8
 8008498:	20004ef4 	.word	0x20004ef4
 800849c:	20004ee0 	.word	0x20004ee0
 80084a0:	20004edc 	.word	0x20004edc

080084a4 <vReleaseNetworkBuffer>:
void vReleaseNetworkBuffer( uint8_t *pucEthernetBuffer )
{
	/* There is space before the Ethernet buffer in which a pointer to the
	network buffer that references this Ethernet buffer is stored.  Remove the
	space before freeing the buffer. */
	if( pucEthernetBuffer != NULL )
 80084a4:	b110      	cbz	r0, 80084ac <vReleaseNetworkBuffer+0x8>
	{
		pucEthernetBuffer -= ipBUFFER_PADDING;
		vPortFree( ( void * ) pucEthernetBuffer );
 80084a6:	380a      	subs	r0, #10
 80084a8:	f7fb bcae 	b.w	8003e08 <vPortFree>
 80084ac:	4770      	bx	lr
	...

080084b0 <vReleaseNetworkBufferAndDescriptor>:
	return pxReturn;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80084b0:	b570      	push	{r4, r5, r6, lr}
 80084b2:	4605      	mov	r5, r0
	counting semaphore is 'given' to say a buffer is available.  Release the
	storage allocated to the buffer payload.  THIS FILE SHOULD NOT BE USED
	IF THE PROJECT INCLUDES A MEMORY ALLOCATOR THAT WILL FRAGMENT THE HEAP
	MEMORY.  For example, heap_2 must not be used, heap_4 can be used. */
	vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
	pxNetworkBuffer->pucEthernetBuffer = NULL;
 80084b4:	2400      	movs	r4, #0
	vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
 80084b6:	6980      	ldr	r0, [r0, #24]
 80084b8:	f7ff fff4 	bl	80084a4 <vReleaseNetworkBuffer>
	pxNetworkBuffer->pucEthernetBuffer = NULL;
 80084bc:	61ac      	str	r4, [r5, #24]

	taskENTER_CRITICAL();
 80084be:	f7fb faa1 	bl	8003a04 <vPortEnterCritical>
	{
		xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 80084c2:	480b      	ldr	r0, [pc, #44]	; (80084f0 <vReleaseNetworkBufferAndDescriptor+0x40>)
 80084c4:	692b      	ldr	r3, [r5, #16]
 80084c6:	4283      	cmp	r3, r0
 80084c8:	d10c      	bne.n	80084e4 <vReleaseNetworkBufferAndDescriptor+0x34>
 80084ca:	2401      	movs	r4, #1
		if( xListItemAlreadyInFreeList == pdFALSE )
		{
			vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
		}
	}
	taskEXIT_CRITICAL();
 80084cc:	f7fb fabc 	bl	8003a48 <vPortExitCritical>

	/*
	 * Update the network state machine, unless the program fails to release its 'xNetworkBufferSemaphore'.
	 * The program should only try to release its semaphore if 'xListItemAlreadyInFreeList' is false.
	 */
	if( xListItemAlreadyInFreeList == pdFALSE )
 80084d0:	b964      	cbnz	r4, 80084ec <vReleaseNetworkBufferAndDescriptor+0x3c>
	{
		if ( xSemaphoreGive( xNetworkBufferSemaphore ) == pdTRUE )
 80084d2:	4808      	ldr	r0, [pc, #32]	; (80084f4 <vReleaseNetworkBufferAndDescriptor+0x44>)
 80084d4:	4623      	mov	r3, r4
 80084d6:	4622      	mov	r2, r4
 80084d8:	4621      	mov	r1, r4
 80084da:	6800      	ldr	r0, [r0, #0]
	}
	else
	{
		iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
	}
}
 80084dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if ( xSemaphoreGive( xNetworkBufferSemaphore ) == pdTRUE )
 80084e0:	f7fb bdd6 	b.w	8004090 <xQueueGenericSend>
			vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 80084e4:	4629      	mov	r1, r5
 80084e6:	f7fb f9f2 	bl	80038ce <vListInsertEnd>
 80084ea:	e7ef      	b.n	80084cc <vReleaseNetworkBufferAndDescriptor+0x1c>
 80084ec:	bd70      	pop	{r4, r5, r6, pc}
 80084ee:	bf00      	nop
 80084f0:	20004ee0 	.word	0x20004ee0
 80084f4:	20005764 	.word	0x20005764

080084f8 <pxGetNetworkBufferWithDescriptor>:
	if( ( xRequestedSizeBytes != 0u ) && ( xRequestedSizeBytes < ( size_t ) baMINIMAL_BUFFER_SIZE ) )
 80084f8:	1e43      	subs	r3, r0, #1
		xRequestedSizeBytes = baMINIMAL_BUFFER_SIZE;
 80084fa:	2b44      	cmp	r3, #68	; 0x44
 80084fc:	bf98      	it	ls
 80084fe:	2046      	movls	r0, #70	; 0x46
{
 8008500:	b570      	push	{r4, r5, r6, lr}
	xRequestedSizeBytes += 2u;
 8008502:	1c84      	adds	r4, r0, #2
	if( ( xRequestedSizeBytes & ( sizeof( size_t ) - 1u ) ) != 0u )
 8008504:	07a3      	lsls	r3, r4, #30
	if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 8008506:	4b1c      	ldr	r3, [pc, #112]	; (8008578 <pxGetNetworkBufferWithDescriptor+0x80>)
		xRequestedSizeBytes = ( xRequestedSizeBytes | ( sizeof( size_t ) - 1u ) ) + 1u;
 8008508:	bf18      	it	ne
 800850a:	f044 0403 	orrne.w	r4, r4, #3
	if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 800850e:	6818      	ldr	r0, [r3, #0]
		xRequestedSizeBytes = ( xRequestedSizeBytes | ( sizeof( size_t ) - 1u ) ) + 1u;
 8008510:	bf18      	it	ne
 8008512:	3401      	addne	r4, #1
	if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 8008514:	f7fb ff78 	bl	8004408 <xQueueSemaphoreTake>
 8008518:	2801      	cmp	r0, #1
 800851a:	d125      	bne.n	8008568 <pxGetNetworkBufferWithDescriptor+0x70>
			pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 800851c:	4e17      	ldr	r6, [pc, #92]	; (800857c <pxGetNetworkBufferWithDescriptor+0x84>)
		taskENTER_CRITICAL();
 800851e:	f7fb fa71 	bl	8003a04 <vPortEnterCritical>
			pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 8008522:	68f3      	ldr	r3, [r6, #12]
 8008524:	68dd      	ldr	r5, [r3, #12]
			uxListRemove( &( pxReturn->xBufferListItem ) );
 8008526:	4628      	mov	r0, r5
 8008528:	f7fb f9f4 	bl	8003914 <uxListRemove>
		taskEXIT_CRITICAL();
 800852c:	f7fb fa8c 	bl	8003a48 <vPortExitCritical>
		if( uxMinimumFreeNetworkBuffers > uxCount )
 8008530:	4b13      	ldr	r3, [pc, #76]	; (8008580 <pxGetNetworkBufferWithDescriptor+0x88>)
		uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8008532:	6832      	ldr	r2, [r6, #0]
		if( uxMinimumFreeNetworkBuffers > uxCount )
 8008534:	6819      	ldr	r1, [r3, #0]
 8008536:	428a      	cmp	r2, r1
			uxMinimumFreeNetworkBuffers = uxCount;
 8008538:	bf38      	it	cc
 800853a:	601a      	strcc	r2, [r3, #0]
		configASSERT( pxReturn->pucEthernetBuffer == NULL );
 800853c:	69ab      	ldr	r3, [r5, #24]
 800853e:	b143      	cbz	r3, 8008552 <pxGetNetworkBufferWithDescriptor+0x5a>
 8008540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	e7fe      	b.n	8008550 <pxGetNetworkBufferWithDescriptor+0x58>
		if( xRequestedSizeBytes > 0 )
 8008552:	b17c      	cbz	r4, 8008574 <pxGetNetworkBufferWithDescriptor+0x7c>
			pxReturn->pucEthernetBuffer = ( uint8_t * ) pvPortMalloc( xRequestedSizeBytes + ipBUFFER_PADDING );
 8008554:	f104 000a 	add.w	r0, r4, #10
 8008558:	f7fb fbc4 	bl	8003ce4 <pvPortMalloc>
 800855c:	4606      	mov	r6, r0
 800855e:	61a8      	str	r0, [r5, #24]
			if( pxReturn->pucEthernetBuffer == NULL )
 8008560:	b920      	cbnz	r0, 800856c <pxGetNetworkBufferWithDescriptor+0x74>
				vReleaseNetworkBufferAndDescriptor( pxReturn );
 8008562:	4628      	mov	r0, r5
 8008564:	f7ff ffa4 	bl	80084b0 <vReleaseNetworkBufferAndDescriptor>
NetworkBufferDescriptor_t *pxReturn = NULL;
 8008568:	2500      	movs	r5, #0
	return pxReturn;
 800856a:	e003      	b.n	8008574 <pxGetNetworkBufferWithDescriptor+0x7c>
				*( ( NetworkBufferDescriptor_t ** ) ( pxReturn->pucEthernetBuffer ) ) = pxReturn;
 800856c:	f846 5b0a 	str.w	r5, [r6], #10
				pxReturn->xDataLength = xRequestedSizeBytes;
 8008570:	61ec      	str	r4, [r5, #28]
				pxReturn->pucEthernetBuffer += ipBUFFER_PADDING;
 8008572:	61ae      	str	r6, [r5, #24]
}
 8008574:	4628      	mov	r0, r5
 8008576:	bd70      	pop	{r4, r5, r6, pc}
 8008578:	20005764 	.word	0x20005764
 800857c:	20004ee0 	.word	0x20004ee0
 8008580:	20004edc 	.word	0x20004edc

08008584 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8008584:	4770      	bx	lr

08008586 <vApplicationMallocFailedHook>:
}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8008586:	4770      	bx	lr

08008588 <StartDefaultTask>:
}
/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8008588:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800858a:	f7f9 fc31 	bl	8001df0 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800858e:	2001      	movs	r0, #1
 8008590:	f7fb f8ec 	bl	800376c <osDelay>
 8008594:	e7fb      	b.n	800858e <StartDefaultTask+0x6>
	...

08008598 <SystemClock_Config>:
{
 8008598:	b570      	push	{r4, r5, r6, lr}
 800859a:	b094      	sub	sp, #80	; 0x50
  __HAL_RCC_PWR_CLK_ENABLE();
 800859c:	4b27      	ldr	r3, [pc, #156]	; (800863c <SystemClock_Config+0xa4>)
 800859e:	2100      	movs	r1, #0
 80085a0:	9101      	str	r1, [sp, #4]
 80085a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80085a8:	641a      	str	r2, [r3, #64]	; 0x40
 80085aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80085b4:	4b22      	ldr	r3, [pc, #136]	; (8008640 <SystemClock_Config+0xa8>)
 80085b6:	9102      	str	r1, [sp, #8]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085be:	601a      	str	r2, [r3, #0]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085c6:	9302      	str	r3, [sp, #8]
 80085c8:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80085ca:	2301      	movs	r3, #1
 80085cc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80085ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085d2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80085d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80085d8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80085da:	2348      	movs	r3, #72	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80085dc:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 80085de:	2604      	movs	r6, #4
  RCC_OscInitStruct.PLL.PLLN = 72;
 80085e0:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80085e2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80085e4:	2303      	movs	r3, #3
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80085e6:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80085e8:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80085ea:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80085ec:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80085ee:	f7f8 fd99 	bl	8001124 <HAL_RCC_OscConfig>
 80085f2:	b100      	cbz	r0, 80085f6 <SystemClock_Config+0x5e>
 80085f4:	e7fe      	b.n	80085f4 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085f6:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80085f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80085fc:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80085fe:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008600:	250f      	movs	r5, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008602:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008604:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008606:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008608:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800860a:	f7f8 ff3b 	bl	8001484 <HAL_RCC_ClockConfig>
 800860e:	4604      	mov	r4, r0
 8008610:	b100      	cbz	r0, 8008614 <SystemClock_Config+0x7c>
 8008612:	e7fe      	b.n	8008612 <SystemClock_Config+0x7a>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8008614:	f7f8 ffd0 	bl	80015b8 <HAL_RCC_GetHCLKFreq>
 8008618:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800861c:	fbb0 f0f3 	udiv	r0, r0, r3
 8008620:	f7f8 f826 	bl	8000670 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8008624:	4630      	mov	r0, r6
 8008626:	f7f8 f839 	bl	800069c <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800862a:	4622      	mov	r2, r4
 800862c:	4629      	mov	r1, r5
 800862e:	f04f 30ff 	mov.w	r0, #4294967295
 8008632:	f7f7 ffdd 	bl	80005f0 <HAL_NVIC_SetPriority>
}
 8008636:	b014      	add	sp, #80	; 0x50
 8008638:	bd70      	pop	{r4, r5, r6, pc}
 800863a:	bf00      	nop
 800863c:	40023800 	.word	0x40023800
 8008640:	40007000 	.word	0x40007000

08008644 <main>:
{
 8008644:	b500      	push	{lr}
 8008646:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008648:	2400      	movs	r4, #0
  HAL_Init();
 800864a:	f7f7 ff7f 	bl	800054c <HAL_Init>
  SystemClock_Config();
 800864e:	f7ff ffa3 	bl	8008598 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008652:	4b23      	ldr	r3, [pc, #140]	; (80086e0 <main+0x9c>)
 8008654:	9402      	str	r4, [sp, #8]
 8008656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8008658:	4822      	ldr	r0, [pc, #136]	; (80086e4 <main+0xa0>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800865a:	4e23      	ldr	r6, [pc, #140]	; (80086e8 <main+0xa4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800865c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008660:	631a      	str	r2, [r3, #48]	; 0x30
 8008662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008664:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8008668:	9202      	str	r2, [sp, #8]
 800866a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800866c:	9403      	str	r4, [sp, #12]
 800866e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008670:	f042 0208 	orr.w	r2, r2, #8
 8008674:	631a      	str	r2, [r3, #48]	; 0x30
 8008676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008678:	f002 0208 	and.w	r2, r2, #8
 800867c:	9203      	str	r2, [sp, #12]
 800867e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008680:	9404      	str	r4, [sp, #16]
 8008682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008684:	f042 0201 	orr.w	r2, r2, #1
 8008688:	631a      	str	r2, [r3, #48]	; 0x30
 800868a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868c:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8008690:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008692:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8008694:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008698:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800869a:	f7f8 f8eb 	bl	8000874 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800869e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80086a2:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80086a4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086a6:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80086a8:	480e      	ldr	r0, [pc, #56]	; (80086e4 <main+0xa0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086aa:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ac:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086ae:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80086b0:	f7f8 f800 	bl	80006b4 <HAL_GPIO_Init>
	FreeRTOS_IPInit( ucIPAddress,
 80086b4:	4b0d      	ldr	r3, [pc, #52]	; (80086ec <main+0xa8>)
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	4a0d      	ldr	r2, [pc, #52]	; (80086f0 <main+0xac>)
 80086ba:	4b0e      	ldr	r3, [pc, #56]	; (80086f4 <main+0xb0>)
 80086bc:	490e      	ldr	r1, [pc, #56]	; (80086f8 <main+0xb4>)
 80086be:	480f      	ldr	r0, [pc, #60]	; (80086fc <main+0xb8>)
 80086c0:	f7fd f96e 	bl	80059a0 <FreeRTOS_IPInit>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80086c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80086c6:	ad05      	add	r5, sp, #20
 80086c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80086ca:	6833      	ldr	r3, [r6, #0]
 80086cc:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80086ce:	4621      	mov	r1, r4
 80086d0:	a805      	add	r0, sp, #20
 80086d2:	f7fb f833 	bl	800373c <osThreadCreate>
 80086d6:	4b0a      	ldr	r3, [pc, #40]	; (8008700 <main+0xbc>)
 80086d8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80086da:	f7fb f82a 	bl	8003732 <osKernelStart>
 80086de:	e7fe      	b.n	80086de <main+0x9a>
 80086e0:	40023800 	.word	0x40023800
 80086e4:	40020c00 	.word	0x40020c00
 80086e8:	08008c28 	.word	0x08008c28
 80086ec:	200001cc 	.word	0x200001cc
 80086f0:	08008ddb 	.word	0x08008ddb
 80086f4:	08008dd7 	.word	0x08008dd7
 80086f8:	08008de3 	.word	0x08008de3
 80086fc:	08008ddf 	.word	0x08008ddf
 8008700:	200069b0 	.word	0x200069b0

08008704 <xApplicationDNSQueryHook>:
{
 8008704:	b510      	push	{r4, lr}
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 8008706:	4907      	ldr	r1, [pc, #28]	; (8008724 <xApplicationDNSQueryHook+0x20>)
{
 8008708:	4604      	mov	r4, r0
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 800870a:	f000 fa1d 	bl	8008b48 <strcasecmp>
 800870e:	b138      	cbz	r0, 8008720 <xApplicationDNSQueryHook+0x1c>
	else if( strcasecmp( pcName, mainDEVICE_NICK_NAME ) == 0 )
 8008710:	4905      	ldr	r1, [pc, #20]	; (8008728 <xApplicationDNSQueryHook+0x24>)
 8008712:	4620      	mov	r0, r4
 8008714:	f000 fa18 	bl	8008b48 <strcasecmp>
 8008718:	fab0 f080 	clz	r0, r0
 800871c:	0940      	lsrs	r0, r0, #5
 800871e:	bd10      	pop	{r4, pc}
 8008720:	2001      	movs	r0, #1
}
 8008722:	bd10      	pop	{r4, pc}
 8008724:	08008dc2 	.word	0x08008dc2
 8008728:	08008de7 	.word	0x08008de7

0800872c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800872c:	e7fe      	b.n	800872c <_Error_Handler>
	...

08008730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008730:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008732:	4b22      	ldr	r3, [pc, #136]	; (80087bc <HAL_MspInit+0x8c>)
 8008734:	2400      	movs	r4, #0
 8008736:	9400      	str	r4, [sp, #0]
 8008738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800873a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800873e:	645a      	str	r2, [r3, #68]	; 0x44
 8008740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008742:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008746:	9200      	str	r2, [sp, #0]
 8008748:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800874a:	9401      	str	r4, [sp, #4]
 800874c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800874e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008752:	641a      	str	r2, [r3, #64]	; 0x40
 8008754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800875a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800875c:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 800875e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008760:	f7f7 ff34 	bl	80005cc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8008764:	4622      	mov	r2, r4
 8008766:	4621      	mov	r1, r4
 8008768:	f06f 000b 	mvn.w	r0, #11
 800876c:	f7f7 ff40 	bl	80005f0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8008770:	4622      	mov	r2, r4
 8008772:	4621      	mov	r1, r4
 8008774:	f06f 000a 	mvn.w	r0, #10
 8008778:	f7f7 ff3a 	bl	80005f0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800877c:	4622      	mov	r2, r4
 800877e:	4621      	mov	r1, r4
 8008780:	f06f 0009 	mvn.w	r0, #9
 8008784:	f7f7 ff34 	bl	80005f0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8008788:	4622      	mov	r2, r4
 800878a:	4621      	mov	r1, r4
 800878c:	f06f 0004 	mvn.w	r0, #4
 8008790:	f7f7 ff2e 	bl	80005f0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8008794:	4622      	mov	r2, r4
 8008796:	4621      	mov	r1, r4
 8008798:	f06f 0003 	mvn.w	r0, #3
 800879c:	f7f7 ff28 	bl	80005f0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80087a0:	4622      	mov	r2, r4
 80087a2:	210f      	movs	r1, #15
 80087a4:	f06f 0001 	mvn.w	r0, #1
 80087a8:	f7f7 ff22 	bl	80005f0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80087ac:	4622      	mov	r2, r4
 80087ae:	210f      	movs	r1, #15
 80087b0:	f04f 30ff 	mov.w	r0, #4294967295
 80087b4:	f7f7 ff1c 	bl	80005f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80087b8:	b002      	add	sp, #8
 80087ba:	bd10      	pop	{r4, pc}
 80087bc:	40023800 	.word	0x40023800

080087c0 <NMI_Handler>:
 80087c0:	4770      	bx	lr

080087c2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80087c2:	e7fe      	b.n	80087c2 <HardFault_Handler>

080087c4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80087c4:	e7fe      	b.n	80087c4 <MemManage_Handler>

080087c6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80087c6:	e7fe      	b.n	80087c6 <BusFault_Handler>

080087c8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80087c8:	e7fe      	b.n	80087c8 <UsageFault_Handler>

080087ca <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80087ca:	4770      	bx	lr

080087cc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80087cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80087ce:	f7f7 fed7 	bl	8000580 <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80087d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 80087d6:	f7fa bfd1 	b.w	800377c <osSystickHandler>
	...

080087dc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80087dc:	490f      	ldr	r1, [pc, #60]	; (800881c <SystemInit+0x40>)
 80087de:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80087e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80087e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80087ea:	4b0d      	ldr	r3, [pc, #52]	; (8008820 <SystemInit+0x44>)
 80087ec:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80087ee:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80087f0:	f042 0201 	orr.w	r2, r2, #1
 80087f4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80087f6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80087fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008802:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008804:	4a07      	ldr	r2, [pc, #28]	; (8008824 <SystemInit+0x48>)
 8008806:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800880e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008810:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008812:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008816:	608b      	str	r3, [r1, #8]
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	e000ed00 	.word	0xe000ed00
 8008820:	40023800 	.word	0x40023800
 8008824:	24003010 	.word	0x24003010

08008828 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008860 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800882c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800882e:	e003      	b.n	8008838 <LoopCopyDataInit>

08008830 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008830:	4b0c      	ldr	r3, [pc, #48]	; (8008864 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008832:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008834:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008836:	3104      	adds	r1, #4

08008838 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008838:	480b      	ldr	r0, [pc, #44]	; (8008868 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800883a:	4b0c      	ldr	r3, [pc, #48]	; (800886c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800883c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800883e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008840:	d3f6      	bcc.n	8008830 <CopyDataInit>
  ldr  r2, =_sbss
 8008842:	4a0b      	ldr	r2, [pc, #44]	; (8008870 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008844:	e002      	b.n	800884c <LoopFillZerobss>

08008846 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008846:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008848:	f842 3b04 	str.w	r3, [r2], #4

0800884c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800884c:	4b09      	ldr	r3, [pc, #36]	; (8008874 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800884e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008850:	d3f9      	bcc.n	8008846 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008852:	f7ff ffc3 	bl	80087dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008856:	f000 f811 	bl	800887c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800885a:	f7ff fef3 	bl	8008644 <main>
  bx  lr    
 800885e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008860:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008864:	08008f18 	.word	0x08008f18
  ldr  r0, =_sdata
 8008868:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800886c:	200003a8 	.word	0x200003a8
  ldr  r2, =_sbss
 8008870:	200003a8 	.word	0x200003a8
  ldr  r3, = _ebss
 8008874:	200069b8 	.word	0x200069b8

08008878 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008878:	e7fe      	b.n	8008878 <ADC_IRQHandler>
	...

0800887c <__libc_init_array>:
 800887c:	b570      	push	{r4, r5, r6, lr}
 800887e:	4e0d      	ldr	r6, [pc, #52]	; (80088b4 <__libc_init_array+0x38>)
 8008880:	4c0d      	ldr	r4, [pc, #52]	; (80088b8 <__libc_init_array+0x3c>)
 8008882:	1ba4      	subs	r4, r4, r6
 8008884:	10a4      	asrs	r4, r4, #2
 8008886:	2500      	movs	r5, #0
 8008888:	42a5      	cmp	r5, r4
 800888a:	d109      	bne.n	80088a0 <__libc_init_array+0x24>
 800888c:	4e0b      	ldr	r6, [pc, #44]	; (80088bc <__libc_init_array+0x40>)
 800888e:	4c0c      	ldr	r4, [pc, #48]	; (80088c0 <__libc_init_array+0x44>)
 8008890:	f000 f9be 	bl	8008c10 <_init>
 8008894:	1ba4      	subs	r4, r4, r6
 8008896:	10a4      	asrs	r4, r4, #2
 8008898:	2500      	movs	r5, #0
 800889a:	42a5      	cmp	r5, r4
 800889c:	d105      	bne.n	80088aa <__libc_init_array+0x2e>
 800889e:	bd70      	pop	{r4, r5, r6, pc}
 80088a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80088a4:	4798      	blx	r3
 80088a6:	3501      	adds	r5, #1
 80088a8:	e7ee      	b.n	8008888 <__libc_init_array+0xc>
 80088aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80088ae:	4798      	blx	r3
 80088b0:	3501      	adds	r5, #1
 80088b2:	e7f2      	b.n	800889a <__libc_init_array+0x1e>
 80088b4:	08008f10 	.word	0x08008f10
 80088b8:	08008f10 	.word	0x08008f10
 80088bc:	08008f10 	.word	0x08008f10
 80088c0:	08008f14 	.word	0x08008f14

080088c4 <malloc>:
 80088c4:	4b02      	ldr	r3, [pc, #8]	; (80088d0 <malloc+0xc>)
 80088c6:	4601      	mov	r1, r0
 80088c8:	6818      	ldr	r0, [r3, #0]
 80088ca:	f000 b895 	b.w	80089f8 <_malloc_r>
 80088ce:	bf00      	nop
 80088d0:	200001d8 	.word	0x200001d8

080088d4 <free>:
 80088d4:	4b02      	ldr	r3, [pc, #8]	; (80088e0 <free+0xc>)
 80088d6:	4601      	mov	r1, r0
 80088d8:	6818      	ldr	r0, [r3, #0]
 80088da:	f000 b83f 	b.w	800895c <_free_r>
 80088de:	bf00      	nop
 80088e0:	200001d8 	.word	0x200001d8

080088e4 <memcmp>:
 80088e4:	b510      	push	{r4, lr}
 80088e6:	3901      	subs	r1, #1
 80088e8:	4402      	add	r2, r0
 80088ea:	4290      	cmp	r0, r2
 80088ec:	d101      	bne.n	80088f2 <memcmp+0xe>
 80088ee:	2000      	movs	r0, #0
 80088f0:	bd10      	pop	{r4, pc}
 80088f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80088f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80088fa:	42a3      	cmp	r3, r4
 80088fc:	d0f5      	beq.n	80088ea <memcmp+0x6>
 80088fe:	1b18      	subs	r0, r3, r4
 8008900:	bd10      	pop	{r4, pc}

08008902 <memcpy>:
 8008902:	b510      	push	{r4, lr}
 8008904:	1e43      	subs	r3, r0, #1
 8008906:	440a      	add	r2, r1
 8008908:	4291      	cmp	r1, r2
 800890a:	d100      	bne.n	800890e <memcpy+0xc>
 800890c:	bd10      	pop	{r4, pc}
 800890e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008912:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008916:	e7f7      	b.n	8008908 <memcpy+0x6>

08008918 <memmove>:
 8008918:	4288      	cmp	r0, r1
 800891a:	b510      	push	{r4, lr}
 800891c:	eb01 0302 	add.w	r3, r1, r2
 8008920:	d803      	bhi.n	800892a <memmove+0x12>
 8008922:	1e42      	subs	r2, r0, #1
 8008924:	4299      	cmp	r1, r3
 8008926:	d10c      	bne.n	8008942 <memmove+0x2a>
 8008928:	bd10      	pop	{r4, pc}
 800892a:	4298      	cmp	r0, r3
 800892c:	d2f9      	bcs.n	8008922 <memmove+0xa>
 800892e:	1881      	adds	r1, r0, r2
 8008930:	1ad2      	subs	r2, r2, r3
 8008932:	42d3      	cmn	r3, r2
 8008934:	d100      	bne.n	8008938 <memmove+0x20>
 8008936:	bd10      	pop	{r4, pc}
 8008938:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800893c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008940:	e7f7      	b.n	8008932 <memmove+0x1a>
 8008942:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008946:	f802 4f01 	strb.w	r4, [r2, #1]!
 800894a:	e7eb      	b.n	8008924 <memmove+0xc>

0800894c <memset>:
 800894c:	4402      	add	r2, r0
 800894e:	4603      	mov	r3, r0
 8008950:	4293      	cmp	r3, r2
 8008952:	d100      	bne.n	8008956 <memset+0xa>
 8008954:	4770      	bx	lr
 8008956:	f803 1b01 	strb.w	r1, [r3], #1
 800895a:	e7f9      	b.n	8008950 <memset+0x4>

0800895c <_free_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4605      	mov	r5, r0
 8008960:	2900      	cmp	r1, #0
 8008962:	d045      	beq.n	80089f0 <_free_r+0x94>
 8008964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008968:	1f0c      	subs	r4, r1, #4
 800896a:	2b00      	cmp	r3, #0
 800896c:	bfb8      	it	lt
 800896e:	18e4      	addlt	r4, r4, r3
 8008970:	f000 f930 	bl	8008bd4 <__malloc_lock>
 8008974:	4a1f      	ldr	r2, [pc, #124]	; (80089f4 <_free_r+0x98>)
 8008976:	6813      	ldr	r3, [r2, #0]
 8008978:	4610      	mov	r0, r2
 800897a:	b933      	cbnz	r3, 800898a <_free_r+0x2e>
 800897c:	6063      	str	r3, [r4, #4]
 800897e:	6014      	str	r4, [r2, #0]
 8008980:	4628      	mov	r0, r5
 8008982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008986:	f000 b926 	b.w	8008bd6 <__malloc_unlock>
 800898a:	42a3      	cmp	r3, r4
 800898c:	d90c      	bls.n	80089a8 <_free_r+0x4c>
 800898e:	6821      	ldr	r1, [r4, #0]
 8008990:	1862      	adds	r2, r4, r1
 8008992:	4293      	cmp	r3, r2
 8008994:	bf04      	itt	eq
 8008996:	681a      	ldreq	r2, [r3, #0]
 8008998:	685b      	ldreq	r3, [r3, #4]
 800899a:	6063      	str	r3, [r4, #4]
 800899c:	bf04      	itt	eq
 800899e:	1852      	addeq	r2, r2, r1
 80089a0:	6022      	streq	r2, [r4, #0]
 80089a2:	6004      	str	r4, [r0, #0]
 80089a4:	e7ec      	b.n	8008980 <_free_r+0x24>
 80089a6:	4613      	mov	r3, r2
 80089a8:	685a      	ldr	r2, [r3, #4]
 80089aa:	b10a      	cbz	r2, 80089b0 <_free_r+0x54>
 80089ac:	42a2      	cmp	r2, r4
 80089ae:	d9fa      	bls.n	80089a6 <_free_r+0x4a>
 80089b0:	6819      	ldr	r1, [r3, #0]
 80089b2:	1858      	adds	r0, r3, r1
 80089b4:	42a0      	cmp	r0, r4
 80089b6:	d10b      	bne.n	80089d0 <_free_r+0x74>
 80089b8:	6820      	ldr	r0, [r4, #0]
 80089ba:	4401      	add	r1, r0
 80089bc:	1858      	adds	r0, r3, r1
 80089be:	4282      	cmp	r2, r0
 80089c0:	6019      	str	r1, [r3, #0]
 80089c2:	d1dd      	bne.n	8008980 <_free_r+0x24>
 80089c4:	6810      	ldr	r0, [r2, #0]
 80089c6:	6852      	ldr	r2, [r2, #4]
 80089c8:	605a      	str	r2, [r3, #4]
 80089ca:	4401      	add	r1, r0
 80089cc:	6019      	str	r1, [r3, #0]
 80089ce:	e7d7      	b.n	8008980 <_free_r+0x24>
 80089d0:	d902      	bls.n	80089d8 <_free_r+0x7c>
 80089d2:	230c      	movs	r3, #12
 80089d4:	602b      	str	r3, [r5, #0]
 80089d6:	e7d3      	b.n	8008980 <_free_r+0x24>
 80089d8:	6820      	ldr	r0, [r4, #0]
 80089da:	1821      	adds	r1, r4, r0
 80089dc:	428a      	cmp	r2, r1
 80089de:	bf04      	itt	eq
 80089e0:	6811      	ldreq	r1, [r2, #0]
 80089e2:	6852      	ldreq	r2, [r2, #4]
 80089e4:	6062      	str	r2, [r4, #4]
 80089e6:	bf04      	itt	eq
 80089e8:	1809      	addeq	r1, r1, r0
 80089ea:	6021      	streq	r1, [r4, #0]
 80089ec:	605c      	str	r4, [r3, #4]
 80089ee:	e7c7      	b.n	8008980 <_free_r+0x24>
 80089f0:	bd38      	pop	{r3, r4, r5, pc}
 80089f2:	bf00      	nop
 80089f4:	20005768 	.word	0x20005768

080089f8 <_malloc_r>:
 80089f8:	b570      	push	{r4, r5, r6, lr}
 80089fa:	1ccd      	adds	r5, r1, #3
 80089fc:	f025 0503 	bic.w	r5, r5, #3
 8008a00:	3508      	adds	r5, #8
 8008a02:	2d0c      	cmp	r5, #12
 8008a04:	bf38      	it	cc
 8008a06:	250c      	movcc	r5, #12
 8008a08:	2d00      	cmp	r5, #0
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	db01      	blt.n	8008a12 <_malloc_r+0x1a>
 8008a0e:	42a9      	cmp	r1, r5
 8008a10:	d903      	bls.n	8008a1a <_malloc_r+0x22>
 8008a12:	230c      	movs	r3, #12
 8008a14:	6033      	str	r3, [r6, #0]
 8008a16:	2000      	movs	r0, #0
 8008a18:	bd70      	pop	{r4, r5, r6, pc}
 8008a1a:	f000 f8db 	bl	8008bd4 <__malloc_lock>
 8008a1e:	4a23      	ldr	r2, [pc, #140]	; (8008aac <_malloc_r+0xb4>)
 8008a20:	6814      	ldr	r4, [r2, #0]
 8008a22:	4621      	mov	r1, r4
 8008a24:	b991      	cbnz	r1, 8008a4c <_malloc_r+0x54>
 8008a26:	4c22      	ldr	r4, [pc, #136]	; (8008ab0 <_malloc_r+0xb8>)
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	b91b      	cbnz	r3, 8008a34 <_malloc_r+0x3c>
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	f000 f87b 	bl	8008b28 <_sbrk_r>
 8008a32:	6020      	str	r0, [r4, #0]
 8008a34:	4629      	mov	r1, r5
 8008a36:	4630      	mov	r0, r6
 8008a38:	f000 f876 	bl	8008b28 <_sbrk_r>
 8008a3c:	1c43      	adds	r3, r0, #1
 8008a3e:	d126      	bne.n	8008a8e <_malloc_r+0x96>
 8008a40:	230c      	movs	r3, #12
 8008a42:	6033      	str	r3, [r6, #0]
 8008a44:	4630      	mov	r0, r6
 8008a46:	f000 f8c6 	bl	8008bd6 <__malloc_unlock>
 8008a4a:	e7e4      	b.n	8008a16 <_malloc_r+0x1e>
 8008a4c:	680b      	ldr	r3, [r1, #0]
 8008a4e:	1b5b      	subs	r3, r3, r5
 8008a50:	d41a      	bmi.n	8008a88 <_malloc_r+0x90>
 8008a52:	2b0b      	cmp	r3, #11
 8008a54:	d90f      	bls.n	8008a76 <_malloc_r+0x7e>
 8008a56:	600b      	str	r3, [r1, #0]
 8008a58:	50cd      	str	r5, [r1, r3]
 8008a5a:	18cc      	adds	r4, r1, r3
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	f000 f8ba 	bl	8008bd6 <__malloc_unlock>
 8008a62:	f104 000b 	add.w	r0, r4, #11
 8008a66:	1d23      	adds	r3, r4, #4
 8008a68:	f020 0007 	bic.w	r0, r0, #7
 8008a6c:	1ac3      	subs	r3, r0, r3
 8008a6e:	d01b      	beq.n	8008aa8 <_malloc_r+0xb0>
 8008a70:	425a      	negs	r2, r3
 8008a72:	50e2      	str	r2, [r4, r3]
 8008a74:	bd70      	pop	{r4, r5, r6, pc}
 8008a76:	428c      	cmp	r4, r1
 8008a78:	bf0d      	iteet	eq
 8008a7a:	6863      	ldreq	r3, [r4, #4]
 8008a7c:	684b      	ldrne	r3, [r1, #4]
 8008a7e:	6063      	strne	r3, [r4, #4]
 8008a80:	6013      	streq	r3, [r2, #0]
 8008a82:	bf18      	it	ne
 8008a84:	460c      	movne	r4, r1
 8008a86:	e7e9      	b.n	8008a5c <_malloc_r+0x64>
 8008a88:	460c      	mov	r4, r1
 8008a8a:	6849      	ldr	r1, [r1, #4]
 8008a8c:	e7ca      	b.n	8008a24 <_malloc_r+0x2c>
 8008a8e:	1cc4      	adds	r4, r0, #3
 8008a90:	f024 0403 	bic.w	r4, r4, #3
 8008a94:	42a0      	cmp	r0, r4
 8008a96:	d005      	beq.n	8008aa4 <_malloc_r+0xac>
 8008a98:	1a21      	subs	r1, r4, r0
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f000 f844 	bl	8008b28 <_sbrk_r>
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	d0cd      	beq.n	8008a40 <_malloc_r+0x48>
 8008aa4:	6025      	str	r5, [r4, #0]
 8008aa6:	e7d9      	b.n	8008a5c <_malloc_r+0x64>
 8008aa8:	bd70      	pop	{r4, r5, r6, pc}
 8008aaa:	bf00      	nop
 8008aac:	20005768 	.word	0x20005768
 8008ab0:	2000576c 	.word	0x2000576c

08008ab4 <rand>:
 8008ab4:	4b19      	ldr	r3, [pc, #100]	; (8008b1c <rand+0x68>)
 8008ab6:	b510      	push	{r4, lr}
 8008ab8:	681c      	ldr	r4, [r3, #0]
 8008aba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008abc:	b9d3      	cbnz	r3, 8008af4 <rand+0x40>
 8008abe:	2018      	movs	r0, #24
 8008ac0:	f7ff ff00 	bl	80088c4 <malloc>
 8008ac4:	f243 330e 	movw	r3, #13070	; 0x330e
 8008ac8:	63a0      	str	r0, [r4, #56]	; 0x38
 8008aca:	8003      	strh	r3, [r0, #0]
 8008acc:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8008ad0:	8043      	strh	r3, [r0, #2]
 8008ad2:	f241 2334 	movw	r3, #4660	; 0x1234
 8008ad6:	8083      	strh	r3, [r0, #4]
 8008ad8:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8008adc:	80c3      	strh	r3, [r0, #6]
 8008ade:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8008ae2:	8103      	strh	r3, [r0, #8]
 8008ae4:	2305      	movs	r3, #5
 8008ae6:	8143      	strh	r3, [r0, #10]
 8008ae8:	230b      	movs	r3, #11
 8008aea:	8183      	strh	r3, [r0, #12]
 8008aec:	2201      	movs	r2, #1
 8008aee:	2300      	movs	r3, #0
 8008af0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008af4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008af6:	480a      	ldr	r0, [pc, #40]	; (8008b20 <rand+0x6c>)
 8008af8:	690a      	ldr	r2, [r1, #16]
 8008afa:	694b      	ldr	r3, [r1, #20]
 8008afc:	4c09      	ldr	r4, [pc, #36]	; (8008b24 <rand+0x70>)
 8008afe:	4350      	muls	r0, r2
 8008b00:	fb04 0003 	mla	r0, r4, r3, r0
 8008b04:	fba2 2304 	umull	r2, r3, r2, r4
 8008b08:	3201      	adds	r2, #1
 8008b0a:	4403      	add	r3, r0
 8008b0c:	f143 0300 	adc.w	r3, r3, #0
 8008b10:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8008b14:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8008b18:	bd10      	pop	{r4, pc}
 8008b1a:	bf00      	nop
 8008b1c:	200001d8 	.word	0x200001d8
 8008b20:	5851f42d 	.word	0x5851f42d
 8008b24:	4c957f2d 	.word	0x4c957f2d

08008b28 <_sbrk_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	4c06      	ldr	r4, [pc, #24]	; (8008b44 <_sbrk_r+0x1c>)
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	4605      	mov	r5, r0
 8008b30:	4608      	mov	r0, r1
 8008b32:	6023      	str	r3, [r4, #0]
 8008b34:	f000 f85e 	bl	8008bf4 <_sbrk>
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	d102      	bne.n	8008b42 <_sbrk_r+0x1a>
 8008b3c:	6823      	ldr	r3, [r4, #0]
 8008b3e:	b103      	cbz	r3, 8008b42 <_sbrk_r+0x1a>
 8008b40:	602b      	str	r3, [r5, #0]
 8008b42:	bd38      	pop	{r3, r4, r5, pc}
 8008b44:	200069b4 	.word	0x200069b4

08008b48 <strcasecmp>:
 8008b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	460f      	mov	r7, r1
 8008b4e:	f816 4b01 	ldrb.w	r4, [r6], #1
 8008b52:	f000 f81f 	bl	8008b94 <__locale_ctype_ptr>
 8008b56:	4420      	add	r0, r4
 8008b58:	f817 5b01 	ldrb.w	r5, [r7], #1
 8008b5c:	7843      	ldrb	r3, [r0, #1]
 8008b5e:	f003 0303 	and.w	r3, r3, #3
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	bf08      	it	eq
 8008b66:	3420      	addeq	r4, #32
 8008b68:	f000 f814 	bl	8008b94 <__locale_ctype_ptr>
 8008b6c:	4428      	add	r0, r5
 8008b6e:	7843      	ldrb	r3, [r0, #1]
 8008b70:	f003 0303 	and.w	r3, r3, #3
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	bf08      	it	eq
 8008b78:	3520      	addeq	r5, #32
 8008b7a:	1b60      	subs	r0, r4, r5
 8008b7c:	d101      	bne.n	8008b82 <strcasecmp+0x3a>
 8008b7e:	2d00      	cmp	r5, #0
 8008b80:	d1e5      	bne.n	8008b4e <strcasecmp+0x6>
 8008b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b84 <strcpy>:
 8008b84:	4603      	mov	r3, r0
 8008b86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b8a:	f803 2b01 	strb.w	r2, [r3], #1
 8008b8e:	2a00      	cmp	r2, #0
 8008b90:	d1f9      	bne.n	8008b86 <strcpy+0x2>
 8008b92:	4770      	bx	lr

08008b94 <__locale_ctype_ptr>:
 8008b94:	4b04      	ldr	r3, [pc, #16]	; (8008ba8 <__locale_ctype_ptr+0x14>)
 8008b96:	4a05      	ldr	r2, [pc, #20]	; (8008bac <__locale_ctype_ptr+0x18>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6a1b      	ldr	r3, [r3, #32]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	bf08      	it	eq
 8008ba0:	4613      	moveq	r3, r2
 8008ba2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8008ba6:	4770      	bx	lr
 8008ba8:	200001d8 	.word	0x200001d8
 8008bac:	2000023c 	.word	0x2000023c

08008bb0 <__ascii_mbtowc>:
 8008bb0:	b082      	sub	sp, #8
 8008bb2:	b901      	cbnz	r1, 8008bb6 <__ascii_mbtowc+0x6>
 8008bb4:	a901      	add	r1, sp, #4
 8008bb6:	b142      	cbz	r2, 8008bca <__ascii_mbtowc+0x1a>
 8008bb8:	b14b      	cbz	r3, 8008bce <__ascii_mbtowc+0x1e>
 8008bba:	7813      	ldrb	r3, [r2, #0]
 8008bbc:	600b      	str	r3, [r1, #0]
 8008bbe:	7812      	ldrb	r2, [r2, #0]
 8008bc0:	1c10      	adds	r0, r2, #0
 8008bc2:	bf18      	it	ne
 8008bc4:	2001      	movne	r0, #1
 8008bc6:	b002      	add	sp, #8
 8008bc8:	4770      	bx	lr
 8008bca:	4610      	mov	r0, r2
 8008bcc:	e7fb      	b.n	8008bc6 <__ascii_mbtowc+0x16>
 8008bce:	f06f 0001 	mvn.w	r0, #1
 8008bd2:	e7f8      	b.n	8008bc6 <__ascii_mbtowc+0x16>

08008bd4 <__malloc_lock>:
 8008bd4:	4770      	bx	lr

08008bd6 <__malloc_unlock>:
 8008bd6:	4770      	bx	lr

08008bd8 <__ascii_wctomb>:
 8008bd8:	b149      	cbz	r1, 8008bee <__ascii_wctomb+0x16>
 8008bda:	2aff      	cmp	r2, #255	; 0xff
 8008bdc:	bf85      	ittet	hi
 8008bde:	238a      	movhi	r3, #138	; 0x8a
 8008be0:	6003      	strhi	r3, [r0, #0]
 8008be2:	700a      	strbls	r2, [r1, #0]
 8008be4:	f04f 30ff 	movhi.w	r0, #4294967295
 8008be8:	bf98      	it	ls
 8008bea:	2001      	movls	r0, #1
 8008bec:	4770      	bx	lr
 8008bee:	4608      	mov	r0, r1
 8008bf0:	4770      	bx	lr
	...

08008bf4 <_sbrk>:
 8008bf4:	4b04      	ldr	r3, [pc, #16]	; (8008c08 <_sbrk+0x14>)
 8008bf6:	6819      	ldr	r1, [r3, #0]
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	b909      	cbnz	r1, 8008c00 <_sbrk+0xc>
 8008bfc:	4903      	ldr	r1, [pc, #12]	; (8008c0c <_sbrk+0x18>)
 8008bfe:	6019      	str	r1, [r3, #0]
 8008c00:	6818      	ldr	r0, [r3, #0]
 8008c02:	4402      	add	r2, r0
 8008c04:	601a      	str	r2, [r3, #0]
 8008c06:	4770      	bx	lr
 8008c08:	20005770 	.word	0x20005770
 8008c0c:	200069b8 	.word	0x200069b8

08008c10 <_init>:
 8008c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c12:	bf00      	nop
 8008c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c16:	bc08      	pop	{r3}
 8008c18:	469e      	mov	lr, r3
 8008c1a:	4770      	bx	lr

08008c1c <_fini>:
 8008c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1e:	bf00      	nop
 8008c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c22:	bc08      	pop	{r3}
 8008c24:	469e      	mov	lr, r3
 8008c26:	4770      	bx	lr
