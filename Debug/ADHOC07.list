
ADHOC07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003934  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003ac4  08003ac4  00013ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003b60  08003b60  00013b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003b68  08003b68  00013b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001c8  20000000  08003b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201c8  2**0
                  CONTENTS
  8 .bss          00005594  200001c8  200001c8  000201c8  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000575c  2000575c  000201c8  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001df5b  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004400  00000000  00000000  0003e153  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007a44  00000000  00000000  00042553  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d68  00000000  00000000  00049f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f10  00000000  00000000  0004ad00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000774f  00000000  00000000  0004bc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004cab  00000000  00000000  0005335f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005800a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000242c  00000000  00000000  00058088  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c8 	.word	0x200001c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003aac 	.word	0x08003aac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	08003aac 	.word	0x08003aac

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e2:	4a0e      	ldr	r2, [pc, #56]	; (800051c <HAL_InitTick+0x3c>)
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <HAL_InitTick+0x40>)
{
 80004e6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e8:	7818      	ldrb	r0, [r3, #0]
 80004ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ee:	fbb3 f3f0 	udiv	r3, r3, r0
 80004f2:	6810      	ldr	r0, [r2, #0]
 80004f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f8:	f000 f8a8 	bl	800064c <HAL_SYSTICK_Config>
 80004fc:	4604      	mov	r4, r0
 80004fe:	b958      	cbnz	r0, 8000518 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000500:	2d0f      	cmp	r5, #15
 8000502:	d809      	bhi.n	8000518 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000504:	4602      	mov	r2, r0
 8000506:	4629      	mov	r1, r5
 8000508:	f04f 30ff 	mov.w	r0, #4294967295
 800050c:	f000 f85e 	bl	80005cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000510:	4b04      	ldr	r3, [pc, #16]	; (8000524 <HAL_InitTick+0x44>)
 8000512:	4620      	mov	r0, r4
 8000514:	601d      	str	r5, [r3, #0]
 8000516:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000518:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800051a:	bd38      	pop	{r3, r4, r5, pc}
 800051c:	2000011c 	.word	0x2000011c
 8000520:	20000000 	.word	0x20000000
 8000524:	20000004 	.word	0x20000004

08000528 <HAL_Init>:
{
 8000528:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <HAL_Init+0x30>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800053a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000542:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f82f 	bl	80005a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800054a:	200f      	movs	r0, #15
 800054c:	f7ff ffc8 	bl	80004e0 <HAL_InitTick>
  HAL_MspInit();
 8000550:	f002 ff1a 	bl	8003388 <HAL_MspInit>
}
 8000554:	2000      	movs	r0, #0
 8000556:	bd08      	pop	{r3, pc}
 8000558:	40023c00 	.word	0x40023c00

0800055c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800055c:	4a03      	ldr	r2, [pc, #12]	; (800056c <HAL_IncTick+0x10>)
 800055e:	4b04      	ldr	r3, [pc, #16]	; (8000570 <HAL_IncTick+0x14>)
 8000560:	6811      	ldr	r1, [r2, #0]
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	440b      	add	r3, r1
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	20003f3c 	.word	0x20003f3c
 8000570:	20000000 	.word	0x20000000

08000574 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000574:	4b01      	ldr	r3, [pc, #4]	; (800057c <HAL_GetTick+0x8>)
 8000576:	6818      	ldr	r0, [r3, #0]
}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20003f3c 	.word	0x20003f3c

08000580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000580:	b538      	push	{r3, r4, r5, lr}
 8000582:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000584:	f7ff fff6 	bl	8000574 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000588:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800058a:	bf1c      	itt	ne
 800058c:	4b05      	ldrne	r3, [pc, #20]	; (80005a4 <HAL_Delay+0x24>)
 800058e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000590:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000592:	bf18      	it	ne
 8000594:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000596:	f7ff ffed 	bl	8000574 <HAL_GetTick>
 800059a:	1b40      	subs	r0, r0, r5
 800059c:	4284      	cmp	r4, r0
 800059e:	d8fa      	bhi.n	8000596 <HAL_Delay+0x16>
  {
  }
}
 80005a0:	bd38      	pop	{r3, r4, r5, pc}
 80005a2:	bf00      	nop
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a8:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005aa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005b0:	041b      	lsls	r3, r3, #16
 80005b2:	0c1b      	lsrs	r3, r3, #16
 80005b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005b8:	0200      	lsls	r0, r0, #8
 80005ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005be:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005c2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005c4:	60d3      	str	r3, [r2, #12]
 80005c6:	4770      	bx	lr
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005cc:	4b17      	ldr	r3, [pc, #92]	; (800062c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	68dc      	ldr	r4, [r3, #12]
 80005d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005da:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005dc:	2b04      	cmp	r3, #4
 80005de:	bf28      	it	cs
 80005e0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e4:	f04f 0501 	mov.w	r5, #1
 80005e8:	fa05 f303 	lsl.w	r3, r5, r3
 80005ec:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f0:	bf8c      	ite	hi
 80005f2:	3c03      	subhi	r4, #3
 80005f4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f6:	4019      	ands	r1, r3
 80005f8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005fa:	fa05 f404 	lsl.w	r4, r5, r4
 80005fe:	3c01      	subs	r4, #1
 8000600:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000602:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000604:	ea42 0201 	orr.w	r2, r2, r1
 8000608:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060c:	bfaf      	iteee	ge
 800060e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000612:	f000 000f 	andlt.w	r0, r0, #15
 8000616:	4b06      	ldrlt	r3, [pc, #24]	; (8000630 <HAL_NVIC_SetPriority+0x64>)
 8000618:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	bfa5      	ittet	ge
 800061c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000620:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000622:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000624:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00
 8000630:	e000ed14 	.word	0xe000ed14

08000634 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000634:	0942      	lsrs	r2, r0, #5
 8000636:	2301      	movs	r3, #1
 8000638:	f000 001f 	and.w	r0, r0, #31
 800063c:	fa03 f000 	lsl.w	r0, r3, r0
 8000640:	4b01      	ldr	r3, [pc, #4]	; (8000648 <HAL_NVIC_EnableIRQ+0x14>)
 8000642:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000646:	4770      	bx	lr
 8000648:	e000e100 	.word	0xe000e100

0800064c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800064c:	3801      	subs	r0, #1
 800064e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000652:	d20a      	bcs.n	800066a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	4a07      	ldr	r2, [pc, #28]	; (8000674 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000658:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065a:	21f0      	movs	r1, #240	; 0xf0
 800065c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000660:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000662:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000664:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800066a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000e010 	.word	0xe000e010
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800067a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800067c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800067e:	bf0c      	ite	eq
 8000680:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000684:	f022 0204 	bicne.w	r2, r2, #4
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	4770      	bx	lr
 800068c:	e000e010 	.word	0xe000e010

08000690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000694:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000696:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000698:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000848 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800069c:	4a68      	ldr	r2, [pc, #416]	; (8000840 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800069e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800084c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006a2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006a4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006a6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006aa:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80006ac:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b0:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006b4:	45b6      	cmp	lr, r6
 80006b6:	f040 80ae 	bne.w	8000816 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006ba:	684c      	ldr	r4, [r1, #4]
 80006bc:	f024 0710 	bic.w	r7, r4, #16
 80006c0:	2f02      	cmp	r7, #2
 80006c2:	d116      	bne.n	80006f2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80006c4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006c8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006cc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006d0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006d4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006d8:	f04f 0c0f 	mov.w	ip, #15
 80006dc:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006e0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006e4:	690d      	ldr	r5, [r1, #16]
 80006e6:	fa05 f50b 	lsl.w	r5, r5, fp
 80006ea:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006ee:	f8ca 5020 	str.w	r5, [sl, #32]
 80006f2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006f6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006f8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006fc:	fa05 f50a 	lsl.w	r5, r5, sl
 8000700:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000702:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000706:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800070a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800070e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000710:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000714:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000716:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800071a:	d811      	bhi.n	8000740 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800071c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800071e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000722:	68cf      	ldr	r7, [r1, #12]
 8000724:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000728:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800072c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800072e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000730:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000734:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000738:	409f      	lsls	r7, r3
 800073a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800073e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000740:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000742:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000744:	688f      	ldr	r7, [r1, #8]
 8000746:	fa07 f70a 	lsl.w	r7, r7, sl
 800074a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800074c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800074e:	00e5      	lsls	r5, r4, #3
 8000750:	d561      	bpl.n	8000816 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	f04f 0b00 	mov.w	fp, #0
 8000756:	f8cd b00c 	str.w	fp, [sp, #12]
 800075a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800075e:	4d39      	ldr	r5, [pc, #228]	; (8000844 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000760:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000764:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000768:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800076c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000770:	9703      	str	r7, [sp, #12]
 8000772:	9f03      	ldr	r7, [sp, #12]
 8000774:	f023 0703 	bic.w	r7, r3, #3
 8000778:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800077c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000780:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000784:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000788:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800078c:	f04f 0e0f 	mov.w	lr, #15
 8000790:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000794:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000796:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079a:	d043      	beq.n	8000824 <HAL_GPIO_Init+0x194>
 800079c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a0:	42a8      	cmp	r0, r5
 80007a2:	d041      	beq.n	8000828 <HAL_GPIO_Init+0x198>
 80007a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a8:	42a8      	cmp	r0, r5
 80007aa:	d03f      	beq.n	800082c <HAL_GPIO_Init+0x19c>
 80007ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b0:	42a8      	cmp	r0, r5
 80007b2:	d03d      	beq.n	8000830 <HAL_GPIO_Init+0x1a0>
 80007b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b8:	42a8      	cmp	r0, r5
 80007ba:	d03b      	beq.n	8000834 <HAL_GPIO_Init+0x1a4>
 80007bc:	4548      	cmp	r0, r9
 80007be:	d03b      	beq.n	8000838 <HAL_GPIO_Init+0x1a8>
 80007c0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007c4:	42a8      	cmp	r0, r5
 80007c6:	d039      	beq.n	800083c <HAL_GPIO_Init+0x1ac>
 80007c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007cc:	42a8      	cmp	r0, r5
 80007ce:	bf14      	ite	ne
 80007d0:	2508      	movne	r5, #8
 80007d2:	2507      	moveq	r5, #7
 80007d4:	fa05 f50c 	lsl.w	r5, r5, ip
 80007d8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007dc:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007de:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007e0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007e2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007e6:	bf0c      	ite	eq
 80007e8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007ea:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007ec:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007ee:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007f0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007f4:	bf0c      	ite	eq
 80007f6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007f8:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007fa:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007fc:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007fe:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000802:	bf0c      	ite	eq
 8000804:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000806:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000808:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800080a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800080c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800080e:	bf54      	ite	pl
 8000810:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000812:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000814:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000816:	3301      	adds	r3, #1
 8000818:	2b10      	cmp	r3, #16
 800081a:	f47f af44 	bne.w	80006a6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800081e:	b005      	add	sp, #20
 8000820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000824:	465d      	mov	r5, fp
 8000826:	e7d5      	b.n	80007d4 <HAL_GPIO_Init+0x144>
 8000828:	2501      	movs	r5, #1
 800082a:	e7d3      	b.n	80007d4 <HAL_GPIO_Init+0x144>
 800082c:	2502      	movs	r5, #2
 800082e:	e7d1      	b.n	80007d4 <HAL_GPIO_Init+0x144>
 8000830:	2503      	movs	r5, #3
 8000832:	e7cf      	b.n	80007d4 <HAL_GPIO_Init+0x144>
 8000834:	2504      	movs	r5, #4
 8000836:	e7cd      	b.n	80007d4 <HAL_GPIO_Init+0x144>
 8000838:	2505      	movs	r5, #5
 800083a:	e7cb      	b.n	80007d4 <HAL_GPIO_Init+0x144>
 800083c:	2506      	movs	r5, #6
 800083e:	e7c9      	b.n	80007d4 <HAL_GPIO_Init+0x144>
 8000840:	40013c00 	.word	0x40013c00
 8000844:	40020000 	.word	0x40020000
 8000848:	40023800 	.word	0x40023800
 800084c:	40021400 	.word	0x40021400

08000850 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000850:	b10a      	cbz	r2, 8000856 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000852:	6181      	str	r1, [r0, #24]
 8000854:	4770      	bx	lr
 8000856:	0409      	lsls	r1, r1, #16
 8000858:	e7fb      	b.n	8000852 <HAL_GPIO_WritePin+0x2>

0800085a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 800085a:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800085c:	4606      	mov	r6, r0
{ 
 800085e:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 8000860:	2800      	cmp	r0, #0
 8000862:	d064      	beq.n	800092e <HAL_PCD_Init+0xd4>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000864:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8000866:	4634      	mov	r4, r6
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000868:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 800086c:	f002 fe50 	bl	8003510 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 8000870:	f854 0b10 	ldr.w	r0, [r4], #16
 8000874:	f000 fed4 	bl	8001620 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800087a:	466d      	mov	r5, sp
 800087c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800087e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000882:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000886:	e885 0003 	stmia.w	r5, {r0, r1}
 800088a:	1d37      	adds	r7, r6, #4
 800088c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000890:	6830      	ldr	r0, [r6, #0]
 8000892:	f000 fe85 	bl	80015a0 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000896:	2100      	movs	r1, #0
 8000898:	6830      	ldr	r0, [r6, #0]
 800089a:	f000 fec7 	bl	800162c <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 800089e:	2100      	movs	r1, #0
 80008a0:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 80008a2:	4632      	mov	r2, r6
 80008a4:	f106 0410 	add.w	r4, r6, #16
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 80008a8:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80008aa:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 80008ac:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 80008b0:	87d1      	strh	r1, [r2, #62]	; 0x3e
 for (i = 0U; i < 15U; i++)
 80008b2:	3101      	adds	r1, #1
 80008b4:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].is_in = 1U;
 80008b6:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80008ba:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 80008be:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 80008c0:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 80008c2:	64d0      	str	r0, [r2, #76]	; 0x4c
 80008c4:	f102 021c 	add.w	r2, r2, #28
 for (i = 0U; i < 15U; i++)
 80008c8:	d1f0      	bne.n	80008ac <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 80008ca:	2200      	movs	r2, #0
 80008cc:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->OUT_ep[i].is_in = 0U;
 80008d0:	4611      	mov	r1, r2
   hpcd->Instance->DIEPTXF[i] = 0U;
 80008d2:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->OUT_ep[i].num = i;
 80008d6:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 80008da:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->Instance->DIEPTXF[i] = 0U;
 80008dc:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 for (i = 0U; i < 15U; i++)
 80008e0:	3201      	adds	r2, #1
 80008e2:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].is_in = 0U;
 80008e4:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80008e8:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0U;
 80008ec:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0U;
 80008f0:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0U;
 80008f4:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   hpcd->Instance->DIEPTXF[i] = 0U;
 80008f8:	6041      	str	r1, [r0, #4]
 80008fa:	f103 031c 	add.w	r3, r3, #28
 for (i = 0U; i < 15U; i++)
 80008fe:	d1e8      	bne.n	80008d2 <HAL_PCD_Init+0x78>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8000900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000902:	466d      	mov	r5, sp
 8000904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800090a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800090e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000912:	4670      	mov	r0, lr
 8000914:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000918:	f000 fea0 	bl	800165c <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 800091c:	2301      	movs	r3, #1
 800091e:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8000922:	6830      	ldr	r0, [r6, #0]
 8000924:	f001 f9bd 	bl	8001ca2 <USB_DevDisconnect>
 return HAL_OK;
 8000928:	2000      	movs	r0, #0
}
 800092a:	b00b      	add	sp, #44	; 0x2c
 800092c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800092e:	2001      	movs	r0, #1
 8000930:	e7fb      	b.n	800092a <HAL_PCD_Init+0xd0>

08000932 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8000932:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8000936:	2b01      	cmp	r3, #1
{ 
 8000938:	b510      	push	{r4, lr}
 800093a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 800093c:	d00c      	beq.n	8000958 <HAL_PCD_Start+0x26>
 800093e:	2301      	movs	r3, #1
 8000940:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8000944:	6800      	ldr	r0, [r0, #0]
 8000946:	f001 f9a0 	bl	8001c8a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800094a:	6820      	ldr	r0, [r4, #0]
 800094c:	f000 fe62 	bl	8001614 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8000950:	2000      	movs	r0, #0
 8000952:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000956:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000958:	2002      	movs	r0, #2
}
 800095a:	bd10      	pop	{r4, pc}

0800095c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800095c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000960:	f8d0 9000 	ldr.w	r9, [r0]
{
 8000964:	b087      	sub	sp, #28
 8000966:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000968:	4648      	mov	r0, r9
 800096a:	f001 f9d4 	bl	8001d16 <USB_GetMode>
 800096e:	9002      	str	r0, [sp, #8]
 8000970:	2800      	cmp	r0, #0
 8000972:	f040 812e 	bne.w	8000bd2 <HAL_PCD_IRQHandler+0x276>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8000976:	6820      	ldr	r0, [r4, #0]
 8000978:	f001 f99f 	bl	8001cba <USB_ReadInterrupts>
 800097c:	2800      	cmp	r0, #0
 800097e:	f000 8128 	beq.w	8000bd2 <HAL_PCD_IRQHandler+0x276>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000982:	6820      	ldr	r0, [r4, #0]
 8000984:	f001 f999 	bl	8001cba <USB_ReadInterrupts>
 8000988:	0785      	lsls	r5, r0, #30
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800098a:	bf48      	it	mi
 800098c:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800098e:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000990:	bf42      	ittt	mi
 8000992:	6953      	ldrmi	r3, [r2, #20]
 8000994:	f003 0302 	andmi.w	r3, r3, #2
 8000998:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800099a:	f001 f98e 	bl	8001cba <USB_ReadInterrupts>
 800099e:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 80009a2:	d00a      	beq.n	80009ba <HAL_PCD_IRQHandler+0x5e>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80009a4:	6820      	ldr	r0, [r4, #0]
 80009a6:	f001 f98c 	bl	8001cc2 <USB_ReadDevAllOutEpInterrupt>
 80009aa:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 80009ae:	4607      	mov	r7, r0
 80009b0:	46a2      	mov	sl, r4
      epnum = 0U;
 80009b2:	2500      	movs	r5, #0
      
      while ( ep_intr )
 80009b4:	2f00      	cmp	r7, #0
 80009b6:	f040 810f 	bne.w	8000bd8 <HAL_PCD_IRQHandler+0x27c>
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80009ba:	6820      	ldr	r0, [r4, #0]
 80009bc:	f001 f97d 	bl	8001cba <USB_ReadInterrupts>
 80009c0:	0341      	lsls	r1, r0, #13
 80009c2:	d50b      	bpl.n	80009dc <HAL_PCD_IRQHandler+0x80>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80009c4:	6820      	ldr	r0, [r4, #0]
 80009c6:	f001 f984 	bl	8001cd2 <USB_ReadDevAllInEpInterrupt>
 80009ca:	4626      	mov	r6, r4
 80009cc:	9003      	str	r0, [sp, #12]
 80009ce:	f509 6810 	add.w	r8, r9, #2304	; 0x900
      
      epnum = 0U;
 80009d2:	2500      	movs	r5, #0
      
      while ( ep_intr )
 80009d4:	9b03      	ldr	r3, [sp, #12]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f040 813f 	bne.w	8000c5a <HAL_PCD_IRQHandler+0x2fe>
        ep_intr >>= 1U;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80009dc:	6820      	ldr	r0, [r4, #0]
 80009de:	f001 f96c 	bl	8001cba <USB_ReadInterrupts>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	da0d      	bge.n	8000a02 <HAL_PCD_IRQHandler+0xa6>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80009e6:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 80009ea:	f023 0301 	bic.w	r3, r3, #1
 80009ee:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 80009f2:	4620      	mov	r0, r4
 80009f4:	f002 fe02 	bl	80035fc <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80009f8:	6822      	ldr	r2, [r4, #0]
 80009fa:	6953      	ldr	r3, [r2, #20]
 80009fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000a00:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000a02:	6820      	ldr	r0, [r4, #0]
 8000a04:	f001 f959 	bl	8001cba <USB_ReadInterrupts>
 8000a08:	0506      	lsls	r6, r0, #20
 8000a0a:	d50b      	bpl.n	8000a24 <HAL_PCD_IRQHandler+0xc8>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000a0c:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 8000a10:	07d8      	lsls	r0, r3, #31
 8000a12:	d502      	bpl.n	8000a1a <HAL_PCD_IRQHandler+0xbe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8000a14:	4620      	mov	r0, r4
 8000a16:	f002 fdd9 	bl	80035cc <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000a1a:	6822      	ldr	r2, [r4, #0]
 8000a1c:	6953      	ldr	r3, [r2, #20]
 8000a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a22:	6153      	str	r3, [r2, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000a24:	6820      	ldr	r0, [r4, #0]
 8000a26:	f001 f948 	bl	8001cba <USB_ReadInterrupts>
 8000a2a:	04c1      	lsls	r1, r0, #19
 8000a2c:	d537      	bpl.n	8000a9e <HAL_PCD_IRQHandler+0x142>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000a2e:	f509 6600 	add.w	r6, r9, #2048	; 0x800
 8000a32:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000a34:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000a36:	f023 0301 	bic.w	r3, r3, #1
 8000a3a:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000a3c:	2110      	movs	r1, #16
 8000a3e:	f000 fea9 	bl	8001794 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a42:	6861      	ldr	r1, [r4, #4]
 8000a44:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000a48:	22ff      	movs	r2, #255	; 0xff
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a4a:	9802      	ldr	r0, [sp, #8]
 8000a4c:	4288      	cmp	r0, r1
 8000a4e:	f040 8192 	bne.w	8000d76 <HAL_PCD_IRQHandler+0x41a>
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000a58:	69f3      	ldr	r3, [r6, #28]
 8000a5a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000a5e:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8000a60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	f000 818f 	beq.w	8000d86 <HAL_PCD_IRQHandler+0x42a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8000a68:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8000a6c:	f043 030b 	orr.w	r3, r3, #11
 8000a70:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8000a74:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000a76:	f043 030b 	orr.w	r3, r3, #11
 8000a7a:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000a7c:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000a80:	7c21      	ldrb	r1, [r4, #16]
 8000a82:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000a84:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8000a88:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000a8c:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000a90:	f001 f960 	bl	8001d54 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000a94:	6822      	ldr	r2, [r4, #0]
 8000a96:	6953      	ldr	r3, [r2, #20]
 8000a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a9c:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000a9e:	6820      	ldr	r0, [r4, #0]
 8000aa0:	f001 f90b 	bl	8001cba <USB_ReadInterrupts>
 8000aa4:	0482      	lsls	r2, r0, #18
 8000aa6:	d51d      	bpl.n	8000ae4 <HAL_PCD_IRQHandler+0x188>
    {
      USB_ActivateSetup(hpcd->Instance);
 8000aa8:	6820      	ldr	r0, [r4, #0]
 8000aaa:	f001 f938 	bl	8001d1e <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8000aae:	6820      	ldr	r0, [r4, #0]
 8000ab0:	68c3      	ldr	r3, [r0, #12]
 8000ab2:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000ab6:	60c3      	str	r3, [r0, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8000ab8:	f000 fe95 	bl	80017e6 <USB_GetDevSpeed>
 8000abc:	2800      	cmp	r0, #0
 8000abe:	f040 816b 	bne.w	8000d98 <HAL_PCD_IRQHandler+0x43c>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ac2:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8000ac4:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8000ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aca:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000acc:	68d3      	ldr	r3, [r2, #12]
 8000ace:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8000ad2:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8000ad4:	4620      	mov	r0, r4
 8000ad6:	f002 fd68 	bl	80035aa <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000ada:	6822      	ldr	r2, [r4, #0]
 8000adc:	6953      	ldr	r3, [r2, #20]
 8000ade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ae2:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000ae4:	6820      	ldr	r0, [r4, #0]
 8000ae6:	f001 f8e8 	bl	8001cba <USB_ReadInterrupts>
 8000aea:	06c3      	lsls	r3, r0, #27
 8000aec:	d52b      	bpl.n	8000b46 <HAL_PCD_IRQHandler+0x1ea>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000aee:	6822      	ldr	r2, [r4, #0]
 8000af0:	6993      	ldr	r3, [r2, #24]
 8000af2:	f023 0310 	bic.w	r3, r3, #16
 8000af6:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8000af8:	f8d9 6020 	ldr.w	r6, [r9, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000afc:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8000b00:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000b02:	f006 080f 	and.w	r8, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000b06:	f040 81a8 	bne.w	8000e5a <HAL_PCD_IRQHandler+0x4fe>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000b0a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000b0e:	421e      	tst	r6, r3
 8000b10:	d014      	beq.n	8000b3c <HAL_PCD_IRQHandler+0x1e0>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8000b12:	271c      	movs	r7, #28
 8000b14:	fb07 4708 	mla	r7, r7, r8, r4
 8000b18:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000b1c:	4632      	mov	r2, r6
 8000b1e:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8000b22:	4648      	mov	r0, r9
 8000b24:	f001 f85b 	bl	8001bde <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000b28:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000b2c:	4433      	add	r3, r6
 8000b2e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000b32:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000b36:	441e      	add	r6, r3
 8000b38:	f8c7 6210 	str.w	r6, [r7, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000b3c:	6822      	ldr	r2, [r4, #0]
 8000b3e:	6993      	ldr	r3, [r2, #24]
 8000b40:	f043 0310 	orr.w	r3, r3, #16
 8000b44:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000b46:	6820      	ldr	r0, [r4, #0]
 8000b48:	f001 f8b7 	bl	8001cba <USB_ReadInterrupts>
 8000b4c:	0707      	lsls	r7, r0, #28
 8000b4e:	d507      	bpl.n	8000b60 <HAL_PCD_IRQHandler+0x204>
    {
      HAL_PCD_SOFCallback(hpcd);
 8000b50:	4620      	mov	r0, r4
 8000b52:	f002 fd26 	bl	80035a2 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8000b56:	6822      	ldr	r2, [r4, #0]
 8000b58:	6953      	ldr	r3, [r2, #20]
 8000b5a:	f003 0308 	and.w	r3, r3, #8
 8000b5e:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000b60:	6820      	ldr	r0, [r4, #0]
 8000b62:	f001 f8aa 	bl	8001cba <USB_ReadInterrupts>
 8000b66:	02c6      	lsls	r6, r0, #11
 8000b68:	d508      	bpl.n	8000b7c <HAL_PCD_IRQHandler+0x220>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8000b6a:	b2e9      	uxtb	r1, r5
 8000b6c:	4620      	mov	r0, r4
 8000b6e:	f002 fd4d 	bl	800360c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000b72:	6822      	ldr	r2, [r4, #0]
 8000b74:	6953      	ldr	r3, [r2, #20]
 8000b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b7a:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000b7c:	6820      	ldr	r0, [r4, #0]
 8000b7e:	f001 f89c 	bl	8001cba <USB_ReadInterrupts>
 8000b82:	0280      	lsls	r0, r0, #10
 8000b84:	d508      	bpl.n	8000b98 <HAL_PCD_IRQHandler+0x23c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8000b86:	b2e9      	uxtb	r1, r5
 8000b88:	4620      	mov	r0, r4
 8000b8a:	f002 fd3b 	bl	8003604 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000b8e:	6822      	ldr	r2, [r4, #0]
 8000b90:	6953      	ldr	r3, [r2, #20]
 8000b92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b96:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000b98:	6820      	ldr	r0, [r4, #0]
 8000b9a:	f001 f88e 	bl	8001cba <USB_ReadInterrupts>
 8000b9e:	0041      	lsls	r1, r0, #1
 8000ba0:	d507      	bpl.n	8000bb2 <HAL_PCD_IRQHandler+0x256>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	f002 fd36 	bl	8003614 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000ba8:	6822      	ldr	r2, [r4, #0]
 8000baa:	6953      	ldr	r3, [r2, #20]
 8000bac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000bb0:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000bb2:	6820      	ldr	r0, [r4, #0]
 8000bb4:	f001 f881 	bl	8001cba <USB_ReadInterrupts>
 8000bb8:	0742      	lsls	r2, r0, #29
 8000bba:	d50a      	bpl.n	8000bd2 <HAL_PCD_IRQHandler+0x276>
    {
      temp = hpcd->Instance->GOTGINT;
 8000bbc:	6823      	ldr	r3, [r4, #0]
 8000bbe:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000bc0:	076b      	lsls	r3, r5, #29
 8000bc2:	d502      	bpl.n	8000bca <HAL_PCD_IRQHandler+0x26e>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	f002 fd29 	bl	800361c <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8000bca:	6823      	ldr	r3, [r4, #0]
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	4315      	orrs	r5, r2
 8000bd0:	605d      	str	r5, [r3, #4]
    }
  }
}
 8000bd2:	b007      	add	sp, #28
 8000bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1U)
 8000bd8:	07f8      	lsls	r0, r7, #31
 8000bda:	d538      	bpl.n	8000c4e <HAL_PCD_IRQHandler+0x2f2>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000bdc:	fa5f fb85 	uxtb.w	fp, r5
 8000be0:	4659      	mov	r1, fp
 8000be2:	6820      	ldr	r0, [r4, #0]
 8000be4:	f001 f87d 	bl	8001ce2 <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000be8:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000bec:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000bee:	d021      	beq.n	8000c34 <HAL_PCD_IRQHandler+0x2d8>
            if(hpcd->Init.dma_enable == 1U)
 8000bf0:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000bf2:	2301      	movs	r3, #1
            if(hpcd->Init.dma_enable == 1U)
 8000bf4:	4299      	cmp	r1, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000bf6:	60b3      	str	r3, [r6, #8]
            if(hpcd->Init.dma_enable == 1U)
 8000bf8:	d10c      	bne.n	8000c14 <HAL_PCD_IRQHandler+0x2b8>
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8000bfa:	6931      	ldr	r1, [r6, #16]
 8000bfc:	f8da 0200 	ldr.w	r0, [sl, #512]	; 0x200
 8000c00:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8000c04:	1a41      	subs	r1, r0, r1
 8000c06:	f8ca 1210 	str.w	r1, [sl, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8000c0a:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
 8000c0e:	4408      	add	r0, r1
 8000c10:	f8ca 0204 	str.w	r0, [sl, #516]	; 0x204
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000c14:	4659      	mov	r1, fp
 8000c16:	4620      	mov	r0, r4
 8000c18:	f002 fcb2 	bl	8003580 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8000c1c:	6921      	ldr	r1, [r4, #16]
 8000c1e:	2901      	cmp	r1, #1
 8000c20:	d108      	bne.n	8000c34 <HAL_PCD_IRQHandler+0x2d8>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000c22:	b93d      	cbnz	r5, 8000c34 <HAL_PCD_IRQHandler+0x2d8>
 8000c24:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8000c28:	b922      	cbnz	r2, 8000c34 <HAL_PCD_IRQHandler+0x2d8>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000c2a:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000c2e:	6820      	ldr	r0, [r4, #0]
 8000c30:	f001 f890 	bl	8001d54 <USB_EP0_OutStart>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000c34:	f018 0f08 	tst.w	r8, #8
 8000c38:	d004      	beq.n	8000c44 <HAL_PCD_IRQHandler+0x2e8>
            HAL_PCD_SetupStageCallback(hpcd);
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f002 fc9a 	bl	8003574 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000c40:	2308      	movs	r3, #8
 8000c42:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000c44:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000c48:	bf1c      	itt	ne
 8000c4a:	2310      	movne	r3, #16
 8000c4c:	60b3      	strne	r3, [r6, #8]
        epnum++;
 8000c4e:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000c50:	087f      	lsrs	r7, r7, #1
 8000c52:	3620      	adds	r6, #32
 8000c54:	f10a 0a1c 	add.w	sl, sl, #28
 8000c58:	e6ac      	b.n	80009b4 <HAL_PCD_IRQHandler+0x58>
        if (ep_intr & 0x1U) /* In ITR */
 8000c5a:	9b03      	ldr	r3, [sp, #12]
 8000c5c:	07da      	lsls	r2, r3, #31
 8000c5e:	d558      	bpl.n	8000d12 <HAL_PCD_IRQHandler+0x3b6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000c60:	fa5f fb85 	uxtb.w	fp, r5
 8000c64:	4659      	mov	r1, fp
 8000c66:	6820      	ldr	r0, [r4, #0]
 8000c68:	f001 f845 	bl	8001cf6 <USB_ReadDevInEPInterrupt>
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000c6c:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000c6e:	4607      	mov	r7, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000c70:	d520      	bpl.n	8000cb4 <HAL_PCD_IRQHandler+0x358>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000c72:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = 0x1U << epnum;
 8000c76:	2101      	movs	r1, #1
 8000c78:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000c7a:	ea23 0301 	bic.w	r3, r3, r1
 8000c7e:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000c82:	2301      	movs	r3, #1
 8000c84:	f8c8 3008 	str.w	r3, [r8, #8]
            if (hpcd->Init.dma_enable == 1U)
 8000c88:	6923      	ldr	r3, [r4, #16]
 8000c8a:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8000c8c:	bf01      	itttt	eq
 8000c8e:	6c73      	ldreq	r3, [r6, #68]	; 0x44
 8000c90:	6c32      	ldreq	r2, [r6, #64]	; 0x40
 8000c92:	189b      	addeq	r3, r3, r2
 8000c94:	6473      	streq	r3, [r6, #68]	; 0x44
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8000c96:	4659      	mov	r1, fp
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f002 fc7a 	bl	8003592 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8000c9e:	6921      	ldr	r1, [r4, #16]
 8000ca0:	2901      	cmp	r1, #1
 8000ca2:	d107      	bne.n	8000cb4 <HAL_PCD_IRQHandler+0x358>
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8000ca4:	b935      	cbnz	r5, 8000cb4 <HAL_PCD_IRQHandler+0x358>
 8000ca6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ca8:	b923      	cbnz	r3, 8000cb4 <HAL_PCD_IRQHandler+0x358>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000caa:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000cae:	6820      	ldr	r0, [r4, #0]
 8000cb0:	f001 f850 	bl	8001d54 <USB_EP0_OutStart>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000cb4:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000cb6:	bf44      	itt	mi
 8000cb8:	2308      	movmi	r3, #8
 8000cba:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8000cbe:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8000cc0:	bf44      	itt	mi
 8000cc2:	2310      	movmi	r3, #16
 8000cc4:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8000cc8:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000cca:	bf44      	itt	mi
 8000ccc:	2340      	movmi	r3, #64	; 0x40
 8000cce:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8000cd2:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8000cd4:	bf44      	itt	mi
 8000cd6:	2302      	movmi	r3, #2
 8000cd8:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000cdc:	063f      	lsls	r7, r7, #24
 8000cde:	d518      	bpl.n	8000d12 <HAL_PCD_IRQHandler+0x3b6>
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8000ce0:	6823      	ldr	r3, [r4, #0]
 8000ce2:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8000ce4:	6cf7      	ldr	r7, [r6, #76]	; 0x4c
 8000ce6:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000ce8:	1aff      	subs	r7, r7, r3
 8000cea:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000cec:	429f      	cmp	r7, r3
 8000cee:	bf28      	it	cs
 8000cf0:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000cf2:	9b04      	ldr	r3, [sp, #16]
 8000cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8000cf8:	f107 0a03 	add.w	sl, r7, #3
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000cfc:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 8000d00:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000d04:	9305      	str	r3, [sp, #20]
 8000d06:	9b05      	ldr	r3, [sp, #20]
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	4553      	cmp	r3, sl
 8000d0e:	d808      	bhi.n	8000d22 <HAL_PCD_IRQHandler+0x3c6>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 8000d10:	b32f      	cbz	r7, 8000d5e <HAL_PCD_IRQHandler+0x402>
        ep_intr >>= 1U;
 8000d12:	9b03      	ldr	r3, [sp, #12]
 8000d14:	085b      	lsrs	r3, r3, #1
        epnum++;
 8000d16:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000d18:	9303      	str	r3, [sp, #12]
 8000d1a:	361c      	adds	r6, #28
 8000d1c:	f108 0820 	add.w	r8, r8, #32
 8000d20:	e658      	b.n	80009d4 <HAL_PCD_IRQHandler+0x78>
          (ep->xfer_count < ep->xfer_len) &&
 8000d22:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8000d24:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d9f2      	bls.n	8000d10 <HAL_PCD_IRQHandler+0x3b4>
          (ep->xfer_count < ep->xfer_len) &&
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0f0      	beq.n	8000d10 <HAL_PCD_IRQHandler+0x3b4>
 8000d2e:	6c37      	ldr	r7, [r6, #64]	; 0x40
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000d30:	9804      	ldr	r0, [sp, #16]
    len = ep->xfer_len - ep->xfer_count;
 8000d32:	1a9b      	subs	r3, r3, r2
 8000d34:	429f      	cmp	r7, r3
 8000d36:	bf28      	it	cs
 8000d38:	461f      	movcs	r7, r3
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000d3a:	7c23      	ldrb	r3, [r4, #16]
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	465a      	mov	r2, fp
 8000d40:	b2bb      	uxth	r3, r7
 8000d42:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8000d44:	f000 ff37 	bl	8001bb6 <USB_WritePacket>
    ep->xfer_buff  += len;
 8000d48:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000d4a:	443b      	add	r3, r7
 8000d4c:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 8000d4e:	6d33      	ldr	r3, [r6, #80]	; 0x50
    len32b = (len + 3U) / 4U;
 8000d50:	f107 0a03 	add.w	sl, r7, #3
    ep->xfer_count += len;
 8000d54:	443b      	add	r3, r7
    len32b = (len + 3U) / 4U;
 8000d56:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
    ep->xfer_count += len;
 8000d5a:	6533      	str	r3, [r6, #80]	; 0x50
 8000d5c:	e7d3      	b.n	8000d06 <HAL_PCD_IRQHandler+0x3aa>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d5e:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = 0x1U << epnum;
 8000d60:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d62:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 8000d66:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1U << epnum;
 8000d6a:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d6c:	ea23 0302 	bic.w	r3, r3, r2
 8000d70:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 8000d74:	e7cd      	b.n	8000d12 <HAL_PCD_IRQHandler+0x3b6>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d76:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000d78:	609a      	str	r2, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d7a:	3001      	adds	r0, #1
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8000d7c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d80:	9002      	str	r0, [sp, #8]
 8000d82:	3320      	adds	r3, #32
 8000d84:	e661      	b.n	8000a4a <HAL_PCD_IRQHandler+0xee>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8000d86:	6973      	ldr	r3, [r6, #20]
 8000d88:	f043 030b 	orr.w	r3, r3, #11
 8000d8c:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8000d8e:	6933      	ldr	r3, [r6, #16]
 8000d90:	f043 030b 	orr.w	r3, r3, #11
 8000d94:	6133      	str	r3, [r6, #16]
 8000d96:	e671      	b.n	8000a7c <HAL_PCD_IRQHandler+0x120>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8000d9c:	2340      	movs	r3, #64	; 0x40
 8000d9e:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 8000da0:	f000 fbf8 	bl	8001594 <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8000da4:	4b34      	ldr	r3, [pc, #208]	; (8000e78 <HAL_PCD_IRQHandler+0x51c>)
 8000da6:	4a35      	ldr	r2, [pc, #212]	; (8000e7c <HAL_PCD_IRQHandler+0x520>)
 8000da8:	4403      	add	r3, r0
 8000daa:	4293      	cmp	r3, r2
 8000dac:	6823      	ldr	r3, [r4, #0]
 8000dae:	d804      	bhi.n	8000dba <HAL_PCD_IRQHandler+0x45e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000db0:	68da      	ldr	r2, [r3, #12]
 8000db2:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	e68c      	b.n	8000ad4 <HAL_PCD_IRQHandler+0x178>
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8000dba:	4a31      	ldr	r2, [pc, #196]	; (8000e80 <HAL_PCD_IRQHandler+0x524>)
 8000dbc:	4931      	ldr	r1, [pc, #196]	; (8000e84 <HAL_PCD_IRQHandler+0x528>)
 8000dbe:	4402      	add	r2, r0
 8000dc0:	428a      	cmp	r2, r1
 8000dc2:	d803      	bhi.n	8000dcc <HAL_PCD_IRQHandler+0x470>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000dc4:	68da      	ldr	r2, [r3, #12]
 8000dc6:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8000dca:	e7f4      	b.n	8000db6 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8000dcc:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8000dd0:	492d      	ldr	r1, [pc, #180]	; (8000e88 <HAL_PCD_IRQHandler+0x52c>)
 8000dd2:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8000dd6:	428a      	cmp	r2, r1
 8000dd8:	d803      	bhi.n	8000de2 <HAL_PCD_IRQHandler+0x486>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8000de0:	e7e9      	b.n	8000db6 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8000de2:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8000de6:	4929      	ldr	r1, [pc, #164]	; (8000e8c <HAL_PCD_IRQHandler+0x530>)
 8000de8:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8000dec:	428a      	cmp	r2, r1
 8000dee:	d803      	bhi.n	8000df8 <HAL_PCD_IRQHandler+0x49c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000df6:	e7de      	b.n	8000db6 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 8000df8:	4a25      	ldr	r2, [pc, #148]	; (8000e90 <HAL_PCD_IRQHandler+0x534>)
 8000dfa:	4926      	ldr	r1, [pc, #152]	; (8000e94 <HAL_PCD_IRQHandler+0x538>)
 8000dfc:	4402      	add	r2, r0
 8000dfe:	428a      	cmp	r2, r1
 8000e00:	d803      	bhi.n	8000e0a <HAL_PCD_IRQHandler+0x4ae>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8000e08:	e7d5      	b.n	8000db6 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 8000e0a:	4a23      	ldr	r2, [pc, #140]	; (8000e98 <HAL_PCD_IRQHandler+0x53c>)
 8000e0c:	4923      	ldr	r1, [pc, #140]	; (8000e9c <HAL_PCD_IRQHandler+0x540>)
 8000e0e:	4402      	add	r2, r0
 8000e10:	428a      	cmp	r2, r1
 8000e12:	d803      	bhi.n	8000e1c <HAL_PCD_IRQHandler+0x4c0>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e14:	68da      	ldr	r2, [r3, #12]
 8000e16:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8000e1a:	e7cc      	b.n	8000db6 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8000e1c:	4a20      	ldr	r2, [pc, #128]	; (8000ea0 <HAL_PCD_IRQHandler+0x544>)
 8000e1e:	4921      	ldr	r1, [pc, #132]	; (8000ea4 <HAL_PCD_IRQHandler+0x548>)
 8000e20:	4402      	add	r2, r0
 8000e22:	428a      	cmp	r2, r1
 8000e24:	d803      	bhi.n	8000e2e <HAL_PCD_IRQHandler+0x4d2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e26:	68da      	ldr	r2, [r3, #12]
 8000e28:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8000e2c:	e7c3      	b.n	8000db6 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8000e2e:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8000e32:	491d      	ldr	r1, [pc, #116]	; (8000ea8 <HAL_PCD_IRQHandler+0x54c>)
 8000e34:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8000e38:	428a      	cmp	r2, r1
 8000e3a:	d803      	bhi.n	8000e44 <HAL_PCD_IRQHandler+0x4e8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e3c:	68da      	ldr	r2, [r3, #12]
 8000e3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e42:	e7b8      	b.n	8000db6 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8000e44:	4a19      	ldr	r2, [pc, #100]	; (8000eac <HAL_PCD_IRQHandler+0x550>)
 8000e46:	491a      	ldr	r1, [pc, #104]	; (8000eb0 <HAL_PCD_IRQHandler+0x554>)
 8000e48:	4402      	add	r2, r0
 8000e4a:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	bf94      	ite	ls
 8000e50:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e54:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8000e58:	e7ad      	b.n	8000db6 <HAL_PCD_IRQHandler+0x45a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	f47f ae6e 	bne.w	8000b3c <HAL_PCD_IRQHandler+0x1e0>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000e60:	2208      	movs	r2, #8
 8000e62:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 8000e66:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000e68:	271c      	movs	r7, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000e6a:	f000 feb8 	bl	8001bde <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000e6e:	fb07 4708 	mla	r7, r7, r8, r4
 8000e72:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000e76:	e65c      	b.n	8000b32 <HAL_PCD_IRQHandler+0x1d6>
 8000e78:	ff275340 	.word	0xff275340
 8000e7c:	000c34ff 	.word	0x000c34ff
 8000e80:	ff1b1e40 	.word	0xff1b1e40
 8000e84:	000f423f 	.word	0x000f423f
 8000e88:	00124f7f 	.word	0x00124f7f
 8000e8c:	0013d61f 	.word	0x0013d61f
 8000e90:	fee5b660 	.word	0xfee5b660
 8000e94:	0016e35f 	.word	0x0016e35f
 8000e98:	feced300 	.word	0xfeced300
 8000e9c:	001b773f 	.word	0x001b773f
 8000ea0:	feb35bc0 	.word	0xfeb35bc0
 8000ea4:	002191bf 	.word	0x002191bf
 8000ea8:	0038751f 	.word	0x0038751f
 8000eac:	fe5954e0 	.word	0xfe5954e0
 8000eb0:	00419cdf 	.word	0x00419cdf

08000eb4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8000eb4:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8000eb8:	2b01      	cmp	r3, #1
{
 8000eba:	b510      	push	{r4, lr}
 8000ebc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000ebe:	d009      	beq.n	8000ed4 <HAL_PCD_SetAddress+0x20>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8000ec6:	6800      	ldr	r0, [r0, #0]
 8000ec8:	f000 fecf 	bl	8001c6a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000ed2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000ed4:	2002      	movs	r0, #2
}
 8000ed6:	bd10      	pop	{r4, pc}

08000ed8 <HAL_PCD_EP_Open>:
{
 8000ed8:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 8000eda:	b24e      	sxtb	r6, r1
 8000edc:	2e00      	cmp	r6, #0
{
 8000ede:	4604      	mov	r4, r0
 8000ee0:	f04f 051c 	mov.w	r5, #28
 8000ee4:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000ee8:	bfb5      	itete	lt
 8000eea:	fb05 4100 	mlalt	r1, r5, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000eee:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000ef2:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000ef4:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->num   = ep_addr & 0x7F;
 8000ef8:	b2c0      	uxtb	r0, r0
  if (ep->is_in)
 8000efa:	2e00      	cmp	r6, #0
    ep->tx_fifo_num = ep->num;
 8000efc:	bfb8      	it	lt
 8000efe:	80c8      	strhlt	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK )
 8000f00:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8000f02:	70cb      	strb	r3, [r1, #3]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000f04:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep->data_pid_start = 0U;
 8000f08:	bf04      	itt	eq
 8000f0a:	2300      	moveq	r3, #0
 8000f0c:	710b      	strbeq	r3, [r1, #4]
  ep->num   = ep_addr & 0x7F;
 8000f0e:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000f10:	704d      	strb	r5, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000f12:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
  ep->maxpacket = ep_mps;
 8000f16:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd); 
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d009      	beq.n	8000f30 <HAL_PCD_EP_Open+0x58>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000f22:	6820      	ldr	r0, [r4, #0]
 8000f24:	f000 fc7a 	bl	800181c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 8000f2e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd); 
 8000f30:	2002      	movs	r0, #2
}
 8000f32:	bd70      	pop	{r4, r5, r6, pc}

08000f34 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 8000f34:	b24b      	sxtb	r3, r1
 8000f36:	2b00      	cmp	r3, #0
{  
 8000f38:	b510      	push	{r4, lr}
 8000f3a:	f04f 021c 	mov.w	r2, #28
 8000f3e:	4604      	mov	r4, r0
 8000f40:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000f44:	bfb5      	itete	lt
 8000f46:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f4a:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000f4e:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f50:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = (0x80 & ep_addr) != 0;
 8000f54:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8000f56:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000f58:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000f5a:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d009      	beq.n	8000f76 <HAL_PCD_EP_Close+0x42>
 8000f62:	2301      	movs	r3, #1
 8000f64:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000f68:	6820      	ldr	r0, [r4, #0]
 8000f6a:	f000 fc96 	bl	800189a <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000f74:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000f76:	2002      	movs	r0, #2
}
 8000f78:	bd10      	pop	{r4, pc}

08000f7a <HAL_PCD_EP_Receive>:
{
 8000f7a:	b538      	push	{r3, r4, r5, lr}
 8000f7c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f80:	241c      	movs	r4, #28
 8000f82:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8000f86:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f8a:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->xfer_len = len;
 8000f8e:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0U;
 8000f92:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;  
 8000f94:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_count = 0U;
 8000f98:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
 8000f9c:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 8000fa0:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1U)
 8000fa4:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000fa6:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8000fa8:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8000faa:	bf08      	it	eq
 8000fac:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
 8000fb0:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8000fb2:	b91d      	cbnz	r5, 8000fbc <HAL_PCD_EP_Receive+0x42>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000fb4:	f000 fd92 	bl	8001adc <USB_EP0StartXfer>
}
 8000fb8:	2000      	movs	r0, #0
 8000fba:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000fbc:	f000 fcc8 	bl	8001950 <USB_EPStartXfer>
 8000fc0:	e7fa      	b.n	8000fb8 <HAL_PCD_EP_Receive+0x3e>

08000fc2 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8000fc2:	231c      	movs	r3, #28
 8000fc4:	f001 010f 	and.w	r1, r1, #15
 8000fc8:	fb03 0101 	mla	r1, r3, r1, r0
}
 8000fcc:	f8b1 0210 	ldrh.w	r0, [r1, #528]	; 0x210
 8000fd0:	4770      	bx	lr

08000fd2 <HAL_PCD_EP_Transmit>:
{
 8000fd2:	b538      	push	{r3, r4, r5, lr}
 8000fd4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000fd8:	241c      	movs	r4, #28
 8000fda:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8000fde:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000fe2:	3138      	adds	r1, #56	; 0x38
  ep->xfer_len = len;
 8000fe4:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1U;
 8000fea:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;  
 8000fec:	6462      	str	r2, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8000fee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 8000ff2:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  if (hpcd->Init.dma_enable == 1U)
 8000ff6:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000ff8:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8000ffa:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8000ffc:	bf08      	it	eq
 8000ffe:	64a2      	streq	r2, [r4, #72]	; 0x48
 8001000:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8001002:	b91d      	cbnz	r5, 800100c <HAL_PCD_EP_Transmit+0x3a>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001004:	f000 fd6a 	bl	8001adc <USB_EP0StartXfer>
}
 8001008:	2000      	movs	r0, #0
 800100a:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800100c:	f000 fca0 	bl	8001950 <USB_EPStartXfer>
 8001010:	e7fa      	b.n	8001008 <HAL_PCD_EP_Transmit+0x36>

08001012 <HAL_PCD_EP_SetStall>:
{
 8001012:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8001014:	b24b      	sxtb	r3, r1
 8001016:	2b00      	cmp	r3, #0
 8001018:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800101c:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001020:	bfb5      	itete	lt
 8001022:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8001026:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800102a:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 800102c:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_stall = 1U;
 8001030:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001032:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8001034:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8001036:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001038:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800103a:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 800103c:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8001040:	4293      	cmp	r3, r2
{
 8001042:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8001044:	d00f      	beq.n	8001066 <HAL_PCD_EP_SetStall+0x54>
 8001046:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 800104a:	6800      	ldr	r0, [r0, #0]
 800104c:	f000 fdd5 	bl	8001bfa <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8001050:	b92d      	cbnz	r5, 800105e <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001052:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001056:	7c21      	ldrb	r1, [r4, #16]
 8001058:	6820      	ldr	r0, [r4, #0]
 800105a:	f000 fe7b 	bl	8001d54 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 800105e:	2000      	movs	r0, #0
 8001060:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001064:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001066:	2002      	movs	r0, #2
}
 8001068:	bd38      	pop	{r3, r4, r5, pc}

0800106a <HAL_PCD_EP_ClrStall>:
{
 800106a:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 800106c:	b24b      	sxtb	r3, r1
 800106e:	2b00      	cmp	r3, #0
{
 8001070:	4605      	mov	r5, r0
 8001072:	f04f 021c 	mov.w	r2, #28
 8001076:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800107a:	bfb5      	itete	lt
 800107c:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 8001080:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001084:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 8001086:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800108a:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 800108c:	2400      	movs	r4, #0
 800108e:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001090:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001092:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001094:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8001098:	2b01      	cmp	r3, #1
 800109a:	d009      	beq.n	80010b0 <HAL_PCD_EP_ClrStall+0x46>
 800109c:	2301      	movs	r3, #1
 800109e:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 80010a2:	6828      	ldr	r0, [r5, #0]
 80010a4:	f000 fdc8 	bl	8001c38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80010a8:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
  return HAL_OK;
 80010ac:	4620      	mov	r0, r4
 80010ae:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 80010b0:	2002      	movs	r0, #2
}
 80010b2:	bd38      	pop	{r3, r4, r5, pc}

080010b4 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80010b4:	6800      	ldr	r0, [r0, #0]
{
 80010b6:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80010b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 80010ba:	b921      	cbnz	r1, 80010c6 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 80010bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010c0:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
  }
  
  return HAL_OK;
}
 80010c2:	2000      	movs	r0, #0
 80010c4:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 80010c6:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 80010c8:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 80010ca:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 80010ce:	1e4e      	subs	r6, r1, #1
 80010d0:	b2ec      	uxtb	r4, r5
 80010d2:	42b4      	cmp	r4, r6
 80010d4:	f105 0501 	add.w	r5, r5, #1
 80010d8:	db06      	blt.n	80010e8 <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 80010da:	313f      	adds	r1, #63	; 0x3f
 80010dc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80010e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010e4:	6043      	str	r3, [r0, #4]
 80010e6:	e7ec      	b.n	80010c2 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 80010e8:	3440      	adds	r4, #64	; 0x40
 80010ea:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80010ee:	6864      	ldr	r4, [r4, #4]
 80010f0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80010f4:	e7ec      	b.n	80010d0 <HAL_PCDEx_SetTxFiFo+0x1c>

080010f6 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80010f6:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 80010f8:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80010fa:	6259      	str	r1, [r3, #36]	; 0x24
}
 80010fc:	4770      	bx	lr
	...

08001100 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001100:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001104:	4604      	mov	r4, r0
 8001106:	b918      	cbnz	r0, 8001110 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001108:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800110a:	b002      	add	sp, #8
 800110c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001110:	6803      	ldr	r3, [r0, #0]
 8001112:	07dd      	lsls	r5, r3, #31
 8001114:	d410      	bmi.n	8001138 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	0798      	lsls	r0, r3, #30
 800111a:	d458      	bmi.n	80011ce <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	071a      	lsls	r2, r3, #28
 8001120:	f100 809a 	bmi.w	8001258 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001124:	6823      	ldr	r3, [r4, #0]
 8001126:	075b      	lsls	r3, r3, #29
 8001128:	f100 80b8 	bmi.w	800129c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800112c:	69a2      	ldr	r2, [r4, #24]
 800112e:	2a00      	cmp	r2, #0
 8001130:	f040 8119 	bne.w	8001366 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001134:	2000      	movs	r0, #0
 8001136:	e7e8      	b.n	800110a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001138:	4ba6      	ldr	r3, [pc, #664]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	f002 020c 	and.w	r2, r2, #12
 8001140:	2a04      	cmp	r2, #4
 8001142:	d007      	beq.n	8001154 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800114a:	2a08      	cmp	r2, #8
 800114c:	d10a      	bne.n	8001164 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	0259      	lsls	r1, r3, #9
 8001152:	d507      	bpl.n	8001164 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001154:	4b9f      	ldr	r3, [pc, #636]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	039a      	lsls	r2, r3, #14
 800115a:	d5dc      	bpl.n	8001116 <HAL_RCC_OscConfig+0x16>
 800115c:	6863      	ldr	r3, [r4, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1d9      	bne.n	8001116 <HAL_RCC_OscConfig+0x16>
 8001162:	e7d1      	b.n	8001108 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001164:	6863      	ldr	r3, [r4, #4]
 8001166:	4d9b      	ldr	r5, [pc, #620]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
 8001168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116c:	d111      	bne.n	8001192 <HAL_RCC_OscConfig+0x92>
 800116e:	682b      	ldr	r3, [r5, #0]
 8001170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001174:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001176:	f7ff f9fd 	bl	8000574 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	4d96      	ldr	r5, [pc, #600]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800117c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	682b      	ldr	r3, [r5, #0]
 8001180:	039b      	lsls	r3, r3, #14
 8001182:	d4c8      	bmi.n	8001116 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff f9f6 	bl	8000574 <HAL_GetTick>
 8001188:	1b80      	subs	r0, r0, r6
 800118a:	2864      	cmp	r0, #100	; 0x64
 800118c:	d9f7      	bls.n	800117e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800118e:	2003      	movs	r0, #3
 8001190:	e7bb      	b.n	800110a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001192:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001196:	d104      	bne.n	80011a2 <HAL_RCC_OscConfig+0xa2>
 8001198:	682b      	ldr	r3, [r5, #0]
 800119a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800119e:	602b      	str	r3, [r5, #0]
 80011a0:	e7e5      	b.n	800116e <HAL_RCC_OscConfig+0x6e>
 80011a2:	682a      	ldr	r2, [r5, #0]
 80011a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011a8:	602a      	str	r2, [r5, #0]
 80011aa:	682a      	ldr	r2, [r5, #0]
 80011ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011b0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1df      	bne.n	8001176 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80011b6:	f7ff f9dd 	bl	8000574 <HAL_GetTick>
 80011ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011bc:	682b      	ldr	r3, [r5, #0]
 80011be:	039f      	lsls	r7, r3, #14
 80011c0:	d5a9      	bpl.n	8001116 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c2:	f7ff f9d7 	bl	8000574 <HAL_GetTick>
 80011c6:	1b80      	subs	r0, r0, r6
 80011c8:	2864      	cmp	r0, #100	; 0x64
 80011ca:	d9f7      	bls.n	80011bc <HAL_RCC_OscConfig+0xbc>
 80011cc:	e7df      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ce:	4b81      	ldr	r3, [pc, #516]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	f012 0f0c 	tst.w	r2, #12
 80011d6:	d007      	beq.n	80011e8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011de:	2a08      	cmp	r2, #8
 80011e0:	d111      	bne.n	8001206 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	025e      	lsls	r6, r3, #9
 80011e6:	d40e      	bmi.n	8001206 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e8:	4b7a      	ldr	r3, [pc, #488]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	0795      	lsls	r5, r2, #30
 80011ee:	d502      	bpl.n	80011f6 <HAL_RCC_OscConfig+0xf6>
 80011f0:	68e2      	ldr	r2, [r4, #12]
 80011f2:	2a01      	cmp	r2, #1
 80011f4:	d188      	bne.n	8001108 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	6921      	ldr	r1, [r4, #16]
 80011fa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80011fe:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001202:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001204:	e78a      	b.n	800111c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001206:	68e2      	ldr	r2, [r4, #12]
 8001208:	4b73      	ldr	r3, [pc, #460]	; (80013d8 <HAL_RCC_OscConfig+0x2d8>)
 800120a:	b1b2      	cbz	r2, 800123a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 800120c:	2201      	movs	r2, #1
 800120e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001210:	f7ff f9b0 	bl	8000574 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001214:	4d6f      	ldr	r5, [pc, #444]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001216:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001218:	682b      	ldr	r3, [r5, #0]
 800121a:	0798      	lsls	r0, r3, #30
 800121c:	d507      	bpl.n	800122e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121e:	682b      	ldr	r3, [r5, #0]
 8001220:	6922      	ldr	r2, [r4, #16]
 8001222:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001226:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800122a:	602b      	str	r3, [r5, #0]
 800122c:	e776      	b.n	800111c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800122e:	f7ff f9a1 	bl	8000574 <HAL_GetTick>
 8001232:	1b80      	subs	r0, r0, r6
 8001234:	2802      	cmp	r0, #2
 8001236:	d9ef      	bls.n	8001218 <HAL_RCC_OscConfig+0x118>
 8001238:	e7a9      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800123a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800123c:	f7ff f99a 	bl	8000574 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001240:	4d64      	ldr	r5, [pc, #400]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001242:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001244:	682b      	ldr	r3, [r5, #0]
 8001246:	0799      	lsls	r1, r3, #30
 8001248:	f57f af68 	bpl.w	800111c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800124c:	f7ff f992 	bl	8000574 <HAL_GetTick>
 8001250:	1b80      	subs	r0, r0, r6
 8001252:	2802      	cmp	r0, #2
 8001254:	d9f6      	bls.n	8001244 <HAL_RCC_OscConfig+0x144>
 8001256:	e79a      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001258:	6962      	ldr	r2, [r4, #20]
 800125a:	4b60      	ldr	r3, [pc, #384]	; (80013dc <HAL_RCC_OscConfig+0x2dc>)
 800125c:	b17a      	cbz	r2, 800127e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800125e:	2201      	movs	r2, #1
 8001260:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001262:	f7ff f987 	bl	8000574 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001266:	4d5b      	ldr	r5, [pc, #364]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001268:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800126c:	079f      	lsls	r7, r3, #30
 800126e:	f53f af59 	bmi.w	8001124 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001272:	f7ff f97f 	bl	8000574 <HAL_GetTick>
 8001276:	1b80      	subs	r0, r0, r6
 8001278:	2802      	cmp	r0, #2
 800127a:	d9f6      	bls.n	800126a <HAL_RCC_OscConfig+0x16a>
 800127c:	e787      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800127e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001280:	f7ff f978 	bl	8000574 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001284:	4d53      	ldr	r5, [pc, #332]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001286:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001288:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800128a:	0798      	lsls	r0, r3, #30
 800128c:	f57f af4a 	bpl.w	8001124 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001290:	f7ff f970 	bl	8000574 <HAL_GetTick>
 8001294:	1b80      	subs	r0, r0, r6
 8001296:	2802      	cmp	r0, #2
 8001298:	d9f6      	bls.n	8001288 <HAL_RCC_OscConfig+0x188>
 800129a:	e778      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800129c:	4b4d      	ldr	r3, [pc, #308]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
 800129e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012a0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80012a4:	d128      	bne.n	80012f8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	9201      	str	r2, [sp, #4]
 80012a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012ae:	641a      	str	r2, [r3, #64]	; 0x40
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012ba:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012bc:	4d48      	ldr	r5, [pc, #288]	; (80013e0 <HAL_RCC_OscConfig+0x2e0>)
 80012be:	682b      	ldr	r3, [r5, #0]
 80012c0:	05d9      	lsls	r1, r3, #23
 80012c2:	d51b      	bpl.n	80012fc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c4:	68a3      	ldr	r3, [r4, #8]
 80012c6:	4d43      	ldr	r5, [pc, #268]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d127      	bne.n	800131c <HAL_RCC_OscConfig+0x21c>
 80012cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80012d4:	f7ff f94e 	bl	8000574 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d8:	4d3e      	ldr	r5, [pc, #248]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80012da:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012dc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012e2:	079b      	lsls	r3, r3, #30
 80012e4:	d539      	bpl.n	800135a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80012e6:	2e00      	cmp	r6, #0
 80012e8:	f43f af20 	beq.w	800112c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ec:	4a39      	ldr	r2, [pc, #228]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
 80012ee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	e719      	b.n	800112c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80012f8:	2600      	movs	r6, #0
 80012fa:	e7df      	b.n	80012bc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012fc:	682b      	ldr	r3, [r5, #0]
 80012fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001302:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001304:	f7ff f936 	bl	8000574 <HAL_GetTick>
 8001308:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130a:	682b      	ldr	r3, [r5, #0]
 800130c:	05da      	lsls	r2, r3, #23
 800130e:	d4d9      	bmi.n	80012c4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001310:	f7ff f930 	bl	8000574 <HAL_GetTick>
 8001314:	1bc0      	subs	r0, r0, r7
 8001316:	2802      	cmp	r0, #2
 8001318:	d9f7      	bls.n	800130a <HAL_RCC_OscConfig+0x20a>
 800131a:	e738      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800131c:	2b05      	cmp	r3, #5
 800131e:	d104      	bne.n	800132a <HAL_RCC_OscConfig+0x22a>
 8001320:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	672b      	str	r3, [r5, #112]	; 0x70
 8001328:	e7d0      	b.n	80012cc <HAL_RCC_OscConfig+0x1cc>
 800132a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800132c:	f022 0201 	bic.w	r2, r2, #1
 8001330:	672a      	str	r2, [r5, #112]	; 0x70
 8001332:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001334:	f022 0204 	bic.w	r2, r2, #4
 8001338:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1ca      	bne.n	80012d4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800133e:	f7ff f919 	bl	8000574 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001342:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001346:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001348:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800134a:	0798      	lsls	r0, r3, #30
 800134c:	d5cb      	bpl.n	80012e6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800134e:	f7ff f911 	bl	8000574 <HAL_GetTick>
 8001352:	1bc0      	subs	r0, r0, r7
 8001354:	4540      	cmp	r0, r8
 8001356:	d9f7      	bls.n	8001348 <HAL_RCC_OscConfig+0x248>
 8001358:	e719      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800135a:	f7ff f90b 	bl	8000574 <HAL_GetTick>
 800135e:	1bc0      	subs	r0, r0, r7
 8001360:	4540      	cmp	r0, r8
 8001362:	d9bd      	bls.n	80012e0 <HAL_RCC_OscConfig+0x1e0>
 8001364:	e713      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001366:	4d1b      	ldr	r5, [pc, #108]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
 8001368:	68ab      	ldr	r3, [r5, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b08      	cmp	r3, #8
 8001370:	f43f aeca 	beq.w	8001108 <HAL_RCC_OscConfig+0x8>
 8001374:	4e1b      	ldr	r6, [pc, #108]	; (80013e4 <HAL_RCC_OscConfig+0x2e4>)
 8001376:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001378:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800137a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800137c:	d134      	bne.n	80013e8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800137e:	f7ff f8f9 	bl	8000574 <HAL_GetTick>
 8001382:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001384:	682b      	ldr	r3, [r5, #0]
 8001386:	0199      	lsls	r1, r3, #6
 8001388:	d41e      	bmi.n	80013c8 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800138a:	6a22      	ldr	r2, [r4, #32]
 800138c:	69e3      	ldr	r3, [r4, #28]
 800138e:	4313      	orrs	r3, r2
 8001390:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001392:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001396:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001398:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800139c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800139e:	4c0d      	ldr	r4, [pc, #52]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013a0:	0852      	lsrs	r2, r2, #1
 80013a2:	3a01      	subs	r2, #1
 80013a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80013a8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80013aa:	2301      	movs	r3, #1
 80013ac:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80013ae:	f7ff f8e1 	bl	8000574 <HAL_GetTick>
 80013b2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b4:	6823      	ldr	r3, [r4, #0]
 80013b6:	019a      	lsls	r2, r3, #6
 80013b8:	f53f aebc 	bmi.w	8001134 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013bc:	f7ff f8da 	bl	8000574 <HAL_GetTick>
 80013c0:	1b40      	subs	r0, r0, r5
 80013c2:	2802      	cmp	r0, #2
 80013c4:	d9f6      	bls.n	80013b4 <HAL_RCC_OscConfig+0x2b4>
 80013c6:	e6e2      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c8:	f7ff f8d4 	bl	8000574 <HAL_GetTick>
 80013cc:	1bc0      	subs	r0, r0, r7
 80013ce:	2802      	cmp	r0, #2
 80013d0:	d9d8      	bls.n	8001384 <HAL_RCC_OscConfig+0x284>
 80013d2:	e6dc      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
 80013d4:	40023800 	.word	0x40023800
 80013d8:	42470000 	.word	0x42470000
 80013dc:	42470e80 	.word	0x42470e80
 80013e0:	40007000 	.word	0x40007000
 80013e4:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80013e8:	f7ff f8c4 	bl	8000574 <HAL_GetTick>
 80013ec:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ee:	682b      	ldr	r3, [r5, #0]
 80013f0:	019b      	lsls	r3, r3, #6
 80013f2:	f57f ae9f 	bpl.w	8001134 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f6:	f7ff f8bd 	bl	8000574 <HAL_GetTick>
 80013fa:	1b00      	subs	r0, r0, r4
 80013fc:	2802      	cmp	r0, #2
 80013fe:	d9f6      	bls.n	80013ee <HAL_RCC_OscConfig+0x2ee>
 8001400:	e6c5      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
 8001402:	bf00      	nop

08001404 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001404:	4913      	ldr	r1, [pc, #76]	; (8001454 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001406:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001408:	688b      	ldr	r3, [r1, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	2b04      	cmp	r3, #4
 8001410:	d003      	beq.n	800141a <HAL_RCC_GetSysClockFreq+0x16>
 8001412:	2b08      	cmp	r3, #8
 8001414:	d003      	beq.n	800141e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001416:	4810      	ldr	r0, [pc, #64]	; (8001458 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001418:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800141a:	4810      	ldr	r0, [pc, #64]	; (800145c <HAL_RCC_GetSysClockFreq+0x58>)
 800141c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800141e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001420:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001422:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001424:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001428:	bf14      	ite	ne
 800142a:	480c      	ldrne	r0, [pc, #48]	; (800145c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800142c:	480a      	ldreq	r0, [pc, #40]	; (8001458 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800142e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001432:	bf18      	it	ne
 8001434:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001436:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800143a:	fba1 0100 	umull	r0, r1, r1, r0
 800143e:	f7fe fec7 	bl	80001d0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <HAL_RCC_GetSysClockFreq+0x50>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800144a:	3301      	adds	r3, #1
 800144c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800144e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001452:	bd08      	pop	{r3, pc}
 8001454:	40023800 	.word	0x40023800
 8001458:	00f42400 	.word	0x00f42400
 800145c:	007a1200 	.word	0x007a1200

08001460 <HAL_RCC_ClockConfig>:
{
 8001460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001464:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001466:	4604      	mov	r4, r0
 8001468:	b910      	cbnz	r0, 8001470 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800146a:	2001      	movs	r0, #1
 800146c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001470:	4b44      	ldr	r3, [pc, #272]	; (8001584 <HAL_RCC_ClockConfig+0x124>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	f002 020f 	and.w	r2, r2, #15
 8001478:	428a      	cmp	r2, r1
 800147a:	d328      	bcc.n	80014ce <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800147c:	6821      	ldr	r1, [r4, #0]
 800147e:	078f      	lsls	r7, r1, #30
 8001480:	d42d      	bmi.n	80014de <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001482:	07c8      	lsls	r0, r1, #31
 8001484:	d440      	bmi.n	8001508 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001486:	4b3f      	ldr	r3, [pc, #252]	; (8001584 <HAL_RCC_ClockConfig+0x124>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	f002 020f 	and.w	r2, r2, #15
 800148e:	4295      	cmp	r5, r2
 8001490:	d366      	bcc.n	8001560 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001492:	6822      	ldr	r2, [r4, #0]
 8001494:	0751      	lsls	r1, r2, #29
 8001496:	d46c      	bmi.n	8001572 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001498:	0713      	lsls	r3, r2, #28
 800149a:	d507      	bpl.n	80014ac <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800149c:	4a3a      	ldr	r2, [pc, #232]	; (8001588 <HAL_RCC_ClockConfig+0x128>)
 800149e:	6921      	ldr	r1, [r4, #16]
 80014a0:	6893      	ldr	r3, [r2, #8]
 80014a2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80014a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014aa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014ac:	f7ff ffaa 	bl	8001404 <HAL_RCC_GetSysClockFreq>
 80014b0:	4b35      	ldr	r3, [pc, #212]	; (8001588 <HAL_RCC_ClockConfig+0x128>)
 80014b2:	4a36      	ldr	r2, [pc, #216]	; (800158c <HAL_RCC_ClockConfig+0x12c>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014ba:	5cd3      	ldrb	r3, [r2, r3]
 80014bc:	40d8      	lsrs	r0, r3
 80014be:	4b34      	ldr	r3, [pc, #208]	; (8001590 <HAL_RCC_ClockConfig+0x130>)
 80014c0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80014c2:	200f      	movs	r0, #15
 80014c4:	f7ff f80c 	bl	80004e0 <HAL_InitTick>
  return HAL_OK;
 80014c8:	2000      	movs	r0, #0
 80014ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ce:	b2ca      	uxtb	r2, r1
 80014d0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 030f 	and.w	r3, r3, #15
 80014d8:	4299      	cmp	r1, r3
 80014da:	d1c6      	bne.n	800146a <HAL_RCC_ClockConfig+0xa>
 80014dc:	e7ce      	b.n	800147c <HAL_RCC_ClockConfig+0x1c>
 80014de:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014e4:	bf1e      	ittt	ne
 80014e6:	689a      	ldrne	r2, [r3, #8]
 80014e8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80014ec:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ee:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014f0:	bf42      	ittt	mi
 80014f2:	689a      	ldrmi	r2, [r3, #8]
 80014f4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80014f8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	68a0      	ldr	r0, [r4, #8]
 80014fe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001502:	4302      	orrs	r2, r0
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	e7bc      	b.n	8001482 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001508:	6862      	ldr	r2, [r4, #4]
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <HAL_RCC_ClockConfig+0x128>)
 800150c:	2a01      	cmp	r2, #1
 800150e:	d11d      	bne.n	800154c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001516:	d0a8      	beq.n	800146a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001518:	4e1b      	ldr	r6, [pc, #108]	; (8001588 <HAL_RCC_ClockConfig+0x128>)
 800151a:	68b3      	ldr	r3, [r6, #8]
 800151c:	f023 0303 	bic.w	r3, r3, #3
 8001520:	4313      	orrs	r3, r2
 8001522:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001524:	f7ff f826 	bl	8000574 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001528:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800152c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152e:	68b3      	ldr	r3, [r6, #8]
 8001530:	6862      	ldr	r2, [r4, #4]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800153a:	d0a4      	beq.n	8001486 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800153c:	f7ff f81a 	bl	8000574 <HAL_GetTick>
 8001540:	1bc0      	subs	r0, r0, r7
 8001542:	4540      	cmp	r0, r8
 8001544:	d9f3      	bls.n	800152e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001546:	2003      	movs	r0, #3
}
 8001548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800154c:	1e91      	subs	r1, r2, #2
 800154e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001550:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001552:	d802      	bhi.n	800155a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001554:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001558:	e7dd      	b.n	8001516 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155a:	f013 0f02 	tst.w	r3, #2
 800155e:	e7da      	b.n	8001516 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001560:	b2ea      	uxtb	r2, r5
 8001562:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	429d      	cmp	r5, r3
 800156c:	f47f af7d 	bne.w	800146a <HAL_RCC_ClockConfig+0xa>
 8001570:	e78f      	b.n	8001492 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001572:	4905      	ldr	r1, [pc, #20]	; (8001588 <HAL_RCC_ClockConfig+0x128>)
 8001574:	68e0      	ldr	r0, [r4, #12]
 8001576:	688b      	ldr	r3, [r1, #8]
 8001578:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800157c:	4303      	orrs	r3, r0
 800157e:	608b      	str	r3, [r1, #8]
 8001580:	e78a      	b.n	8001498 <HAL_RCC_ClockConfig+0x38>
 8001582:	bf00      	nop
 8001584:	40023c00 	.word	0x40023c00
 8001588:	40023800 	.word	0x40023800
 800158c:	08003ae9 	.word	0x08003ae9
 8001590:	2000011c 	.word	0x2000011c

08001594 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001594:	4b01      	ldr	r3, [pc, #4]	; (800159c <HAL_RCC_GetHCLKFreq+0x8>)
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	2000011c 	.word	0x2000011c

080015a0 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80015a0:	b084      	sub	sp, #16
 80015a2:	b538      	push	{r3, r4, r5, lr}
 80015a4:	ad05      	add	r5, sp, #20
 80015a6:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80015aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015ac:	2b01      	cmp	r3, #1
{
 80015ae:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80015b0:	d126      	bne.n	8001600 <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80015b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80015b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b8:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80015ba:	68c3      	ldr	r3, [r0, #12]
 80015bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80015c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015c4:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80015c6:	68c3      	ldr	r3, [r0, #12]
 80015c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80015cc:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 80015ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80015d0:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80015d2:	bf02      	ittt	eq
 80015d4:	68c3      	ldreq	r3, [r0, #12]
 80015d6:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 80015da:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 80015dc:	f000 fbde 	bl	8001d9c <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 80015e0:	9b08      	ldr	r3, [sp, #32]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d107      	bne.n	80015f6 <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80015e6:	68a3      	ldr	r3, [r4, #8]
 80015e8:	f043 0306 	orr.w	r3, r3, #6
 80015ec:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80015ee:	68a3      	ldr	r3, [r4, #8]
 80015f0:	f043 0320 	orr.w	r3, r3, #32
 80015f4:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 80015f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80015fa:	2000      	movs	r0, #0
 80015fc:	b004      	add	sp, #16
 80015fe:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001600:	68c3      	ldr	r3, [r0, #12]
 8001602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001606:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8001608:	f000 fbc8 	bl	8001d9c <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800160c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001610:	63a3      	str	r3, [r4, #56]	; 0x38
 8001612:	e7e5      	b.n	80015e0 <USB_CoreInit+0x40>

08001614 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001614:	6883      	ldr	r3, [r0, #8]
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 800161c:	2000      	movs	r0, #0
 800161e:	4770      	bx	lr

08001620 <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001620:	6883      	ldr	r3, [r0, #8]
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001628:	2000      	movs	r0, #0
 800162a:	4770      	bx	lr

0800162c <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 800162c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800162e:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8001630:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8001632:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001636:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8001638:	d108      	bne.n	800164c <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 800163a:	68c3      	ldr	r3, [r0, #12]
 800163c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001640:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 8001642:	2032      	movs	r0, #50	; 0x32
 8001644:	f7fe ff9c 	bl	8000580 <HAL_Delay>
  
  return HAL_OK;
}
 8001648:	2000      	movs	r0, #0
 800164a:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 800164c:	2900      	cmp	r1, #0
 800164e:	d1f8      	bne.n	8001642 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8001650:	68c3      	ldr	r3, [r0, #12]
 8001652:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001656:	60c3      	str	r3, [r0, #12]
 8001658:	e7f3      	b.n	8001642 <USB_SetCurrentMode+0x16>
	...

0800165c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800165c:	b084      	sub	sp, #16
 800165e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001662:	4604      	mov	r4, r0
 8001664:	a807      	add	r0, sp, #28
 8001666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800166a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800166c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800166e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001670:	4688      	mov	r8, r1
  if (cfg.vbus_sensing_enable == 0U)
 8001672:	b9a6      	cbnz	r6, 800169e <USB_DevInit+0x42>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001678:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001680:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8001684:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8001688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800168a:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800168c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8001690:	d15e      	bne.n	8001750 <USB_DevInit+0xf4>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8001692:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001694:	b939      	cbnz	r1, 80016a6 <USB_DevInit+0x4a>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8001696:	4620      	mov	r0, r4
 8001698:	f000 f89e 	bl	80017d8 <USB_SetDevSpeed>
 800169c:	e007      	b.n	80016ae <USB_DevInit+0x52>
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800169e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016a2:	63a3      	str	r3, [r4, #56]	; 0x38
 80016a4:	e7e9      	b.n	800167a <USB_DevInit+0x1e>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 80016a6:	4619      	mov	r1, r3
 80016a8:	4620      	mov	r0, r4
 80016aa:	f000 f895 	bl	80017d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 80016ae:	2110      	movs	r1, #16
 80016b0:	4620      	mov	r0, r4
 80016b2:	f000 f86f 	bl	8001794 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80016b6:	4620      	mov	r0, r4
 80016b8:	f000 f87e 	bl	80017b8 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80016bc:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80016be:	f04f 32ff 	mov.w	r2, #4294967295
  USBx_DEVICE->DIEPMSK = 0U;
 80016c2:	612b      	str	r3, [r5, #16]
 80016c4:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0U;
 80016c6:	616b      	str	r3, [r5, #20]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80016c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80016cc:	61aa      	str	r2, [r5, #24]
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 80016ce:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0U;
 80016d2:	61eb      	str	r3, [r5, #28]
 80016d4:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80016d8:	4543      	cmp	r3, r8
 80016da:	d13b      	bne.n	8001754 <USB_DevInit+0xf8>
 80016dc:	2100      	movs	r1, #0
 80016de:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
 80016e2:	4608      	mov	r0, r1
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80016e4:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 80016e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80016ec:	428b      	cmp	r3, r1
 80016ee:	d13e      	bne.n	800176e <USB_DevInit+0x112>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80016f0:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 80016f2:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80016f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016f8:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80016fa:	d108      	bne.n	800170e <USB_DevInit+0xb2>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 80016fc:	4b23      	ldr	r3, [pc, #140]	; (800178c <USB_DevInit+0x130>)
 80016fe:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8001700:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001706:	f043 0303 	orr.w	r3, r3, #3
 800170a:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 800170c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001712:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8001716:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8001718:	b91f      	cbnz	r7, 8001722 <USB_DevInit+0xc6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 800171a:	69a3      	ldr	r3, [r4, #24]
 800171c:	f043 0310 	orr.w	r3, r3, #16
 8001720:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8001722:	69a2      	ldr	r2, [r4, #24]
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <USB_DevInit+0x134>)
 8001726:	4313      	orrs	r3, r2
 8001728:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 800172a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800172c:	b11b      	cbz	r3, 8001736 <USB_DevInit+0xda>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800172e:	69a3      	ldr	r3, [r4, #24]
 8001730:	f043 0308 	orr.w	r3, r3, #8
 8001734:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8001736:	2e01      	cmp	r6, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8001738:	bf01      	itttt	eq
 800173a:	69a3      	ldreq	r3, [r4, #24]
 800173c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8001740:	f043 0304 	orreq.w	r3, r3, #4
 8001744:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 8001746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800174a:	2000      	movs	r0, #0
 800174c:	b004      	add	sp, #16
 800174e:	4770      	bx	lr
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8001750:	2103      	movs	r1, #3
 8001752:	e7a0      	b.n	8001696 <USB_DevInit+0x3a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001754:	f8d2 c000 	ldr.w	ip, [r2]
 8001758:	f1bc 0f00 	cmp.w	ip, #0
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800175c:	bfb4      	ite	lt
 800175e:	6010      	strlt	r0, [r2, #0]
      USBx_INEP(i)->DIEPCTL = 0U;
 8001760:	6011      	strge	r1, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001762:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8001764:	6111      	str	r1, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8001766:	f8c2 e008 	str.w	lr, [r2, #8]
 800176a:	3220      	adds	r2, #32
 800176c:	e7b4      	b.n	80016d8 <USB_DevInit+0x7c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800176e:	f8d2 8000 	ldr.w	r8, [r2]
 8001772:	f1b8 0f00 	cmp.w	r8, #0
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8001776:	bfb4      	ite	lt
 8001778:	f8c2 e000 	strlt.w	lr, [r2]
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800177c:	6010      	strge	r0, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800177e:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8001780:	6110      	str	r0, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8001782:	f8c2 c008 	str.w	ip, [r2, #8]
 8001786:	3220      	adds	r2, #32
 8001788:	e7b0      	b.n	80016ec <USB_DevInit+0x90>
 800178a:	bf00      	nop
 800178c:	00800100 	.word	0x00800100
 8001790:	803c3800 	.word	0x803c3800

08001794 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8001794:	0189      	lsls	r1, r1, #6
 8001796:	f041 0120 	orr.w	r1, r1, #32
 800179a:	4a06      	ldr	r2, [pc, #24]	; (80017b4 <USB_FlushTxFifo+0x20>)
 800179c:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 800179e:	3a01      	subs	r2, #1
 80017a0:	d005      	beq.n	80017ae <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80017a2:	6903      	ldr	r3, [r0, #16]
 80017a4:	f013 0320 	ands.w	r3, r3, #32
 80017a8:	d1f9      	bne.n	800179e <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 80017aa:	4618      	mov	r0, r3
 80017ac:	4770      	bx	lr
      return HAL_TIMEOUT;
 80017ae:	2003      	movs	r0, #3
}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	00030d41 	.word	0x00030d41

080017b8 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80017b8:	2310      	movs	r3, #16
 80017ba:	4a06      	ldr	r2, [pc, #24]	; (80017d4 <USB_FlushRxFifo+0x1c>)
 80017bc:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80017be:	3a01      	subs	r2, #1
 80017c0:	d005      	beq.n	80017ce <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80017c2:	6903      	ldr	r3, [r0, #16]
 80017c4:	f013 0310 	ands.w	r3, r3, #16
 80017c8:	d1f9      	bne.n	80017be <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 80017ca:	4618      	mov	r0, r3
 80017cc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80017ce:	2003      	movs	r0, #3
}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	00030d41 	.word	0x00030d41

080017d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 80017d8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80017dc:	4319      	orrs	r1, r3
 80017de:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 80017e2:	2000      	movs	r0, #0
 80017e4:	4770      	bx	lr

080017e6 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80017e6:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 80017ea:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 80017ee:	f010 0006 	ands.w	r0, r0, #6
 80017f2:	d012      	beq.n	800181a <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 80017f4:	6893      	ldr	r3, [r2, #8]
 80017f6:	f003 0306 	and.w	r3, r3, #6
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d00c      	beq.n	8001818 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 80017fe:	6893      	ldr	r3, [r2, #8]
 8001800:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8001804:	2b06      	cmp	r3, #6
 8001806:	d007      	beq.n	8001818 <USB_GetDevSpeed+0x32>
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8001808:	6893      	ldr	r3, [r2, #8]
 800180a:	f003 0306 	and.w	r3, r3, #6
 800180e:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 8001810:	bf14      	ite	ne
 8001812:	2000      	movne	r0, #0
 8001814:	2002      	moveq	r0, #2
 8001816:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 8001818:	2003      	movs	r0, #3
  }
  
  return speed;
}
 800181a:	4770      	bx	lr

0800181c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800181c:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 800181e:	784b      	ldrb	r3, [r1, #1]
 8001820:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8001822:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8001826:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 800182a:	2b01      	cmp	r3, #1
 800182c:	d11b      	bne.n	8001866 <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 800182e:	40a3      	lsls	r3, r4
 8001830:	b29b      	uxth	r3, r3
 8001832:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001834:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8001838:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800183a:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	0412      	lsls	r2, r2, #16
 8001842:	d40e      	bmi.n	8001862 <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8001844:	688a      	ldr	r2, [r1, #8]
 8001846:	78c8      	ldrb	r0, [r1, #3]
 8001848:	681d      	ldr	r5, [r3, #0]
 800184a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800184e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001856:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 800185a:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 800185e:	4328      	orrs	r0, r5
 8001860:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8001862:	2000      	movs	r0, #0
 8001864:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8001866:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800186a:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800186c:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8001870:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001872:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8001876:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001878:	6803      	ldr	r3, [r0, #0]
 800187a:	041b      	lsls	r3, r3, #16
 800187c:	d4f1      	bmi.n	8001862 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 800187e:	688b      	ldr	r3, [r1, #8]
 8001880:	78c9      	ldrb	r1, [r1, #3]
 8001882:	6802      	ldr	r2, [r0, #0]
 8001884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001890:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8001894:	4313      	orrs	r3, r2
 8001896:	6003      	str	r3, [r0, #0]
 8001898:	e7e3      	b.n	8001862 <USB_ActivateEndpoint+0x46>

0800189a <USB_DeactivateEndpoint>:
 800189a:	f000 b801 	b.w	80018a0 <USB_DeactivateDedicatedEndpoint>
	...

080018a0 <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80018a0:	b570      	push	{r4, r5, r6, lr}
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 80018a2:	784b      	ldrb	r3, [r1, #1]
 80018a4:	2b01      	cmp	r3, #1
{
 80018a6:	460e      	mov	r6, r1
 80018a8:	4605      	mov	r5, r0
 80018aa:	7809      	ldrb	r1, [r1, #0]
 80018ac:	f04f 0320 	mov.w	r3, #32
  if (ep->is_in == 1U)
 80018b0:	d126      	bne.n	8001900 <USB_DeactivateDedicatedEndpoint+0x60>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 80018b2:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 80018b6:	fb13 2301 	smlabb	r3, r3, r1, r2
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018c0:	601a      	str	r2, [r3, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80018c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018c6:	601a      	str	r2, [r3, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 80018c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	4a1f      	ldr	r2, [pc, #124]	; (800194c <USB_DeactivateDedicatedEndpoint+0xac>)
    
    do
    {
      if (++count > 200000U)
 80018d0:	3a01      	subs	r2, #1
 80018d2:	d101      	bne.n	80018d8 <USB_DeactivateDedicatedEndpoint+0x38>
      {
        return HAL_TIMEOUT;
 80018d4:	2003      	movs	r0, #3
 80018d6:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 80018d8:	689c      	ldr	r4, [r3, #8]
 80018da:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 80018de:	d1f7      	bne.n	80018d0 <USB_DeactivateDedicatedEndpoint+0x30>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 80018e0:	2110      	movs	r1, #16
 80018e2:	4628      	mov	r0, r5
 80018e4:	f7ff ff56 	bl	8001794 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 80018e8:	7831      	ldrb	r1, [r6, #0]
 80018ea:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 80018ee:	2301      	movs	r3, #1
 80018f0:	408b      	lsls	r3, r1
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	ea22 0303 	bic.w	r3, r2, r3
 80018f8:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
  }
  return HAL_OK;
 80018fc:	4620      	mov	r0, r4
 80018fe:	bd70      	pop	{r4, r5, r6, pc}
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8001900:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8001904:	fb13 2301 	smlabb	r3, r3, r1, r2
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800190e:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001910:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001914:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8001916:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	4a0b      	ldr	r2, [pc, #44]	; (800194c <USB_DeactivateDedicatedEndpoint+0xac>)
      if (++count > 200000U)
 800191e:	3a01      	subs	r2, #1
 8001920:	d0d8      	beq.n	80018d4 <USB_DeactivateDedicatedEndpoint+0x34>
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8001922:	6898      	ldr	r0, [r3, #8]
 8001924:	f010 0010 	ands.w	r0, r0, #16
 8001928:	d1f9      	bne.n	800191e <USB_DeactivateDedicatedEndpoint+0x7e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800192a:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 800192e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001932:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 8001936:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 800193a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800193e:	408a      	lsls	r2, r1
 8001940:	ea23 0302 	bic.w	r3, r3, r2
 8001944:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c

}
 8001948:	bd70      	pop	{r4, r5, r6, pc}
 800194a:	bf00      	nop
 800194c:	00030d41 	.word	0x00030d41

08001950 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8001950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8001952:	784b      	ldrb	r3, [r1, #1]
 8001954:	780c      	ldrb	r4, [r1, #0]
 8001956:	2b01      	cmp	r3, #1
 8001958:	694b      	ldr	r3, [r1, #20]
 800195a:	d177      	bne.n	8001a4c <USB_EPStartXfer+0xfc>
 800195c:	2620      	movs	r6, #32
 800195e:	f500 6510 	add.w	r5, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001962:	fb16 5404 	smlabb	r4, r6, r4, r5
 8001966:	6926      	ldr	r6, [r4, #16]
    if (ep->xfer_len == 0U)
 8001968:	2b00      	cmp	r3, #0
 800196a:	d138      	bne.n	80019de <USB_EPStartXfer+0x8e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800196c:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8001970:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8001974:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001976:	6926      	ldr	r6, [r4, #16]
 8001978:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800197c:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 800197e:	6926      	ldr	r6, [r4, #16]
 8001980:	0cf6      	lsrs	r6, r6, #19
 8001982:	04f6      	lsls	r6, r6, #19
 8001984:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 8001986:	2a01      	cmp	r2, #1
 8001988:	d150      	bne.n	8001a2c <USB_EPStartXfer+0xdc>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800198a:	780c      	ldrb	r4, [r1, #0]
 800198c:	690e      	ldr	r6, [r1, #16]
 800198e:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8001992:	6166      	str	r6, [r4, #20]
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8001994:	78ce      	ldrb	r6, [r1, #3]
 8001996:	2e01      	cmp	r6, #1
 8001998:	d10f      	bne.n	80019ba <USB_EPStartXfer+0x6a>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 800199a:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 800199e:	780f      	ldrb	r7, [r1, #0]
 80019a0:	f414 7f80 	tst.w	r4, #256	; 0x100
 80019a4:	f04f 0420 	mov.w	r4, #32
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80019a8:	fb14 5407 	smlabb	r4, r4, r7, r5
 80019ac:	6827      	ldr	r7, [r4, #0]
 80019ae:	bf0c      	ite	eq
 80019b0:	f047 5700 	orreq.w	r7, r7, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80019b4:	f047 5780 	orrne.w	r7, r7, #268435456	; 0x10000000
 80019b8:	6027      	str	r7, [r4, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80019ba:	780f      	ldrb	r7, [r1, #0]
 80019bc:	eb05 1547 	add.w	r5, r5, r7, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 80019c0:	2e01      	cmp	r6, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80019c2:	682c      	ldr	r4, [r5, #0]
 80019c4:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80019c8:	602c      	str	r4, [r5, #0]
    if (ep->type == EP_TYPE_ISOC)
 80019ca:	d105      	bne.n	80019d8 <USB_EPStartXfer+0x88>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 80019cc:	9200      	str	r2, [sp, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	463a      	mov	r2, r7
 80019d2:	68c9      	ldr	r1, [r1, #12]
 80019d4:	f000 f8ef 	bl	8001bb6 <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 80019d8:	2000      	movs	r0, #0
 80019da:	b003      	add	sp, #12
 80019dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80019de:	0cf6      	lsrs	r6, r6, #19
 80019e0:	04f6      	lsls	r6, r6, #19
 80019e2:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80019e4:	6926      	ldr	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 80019e6:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80019e8:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 80019ec:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 80019f0:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 80019f2:	19de      	adds	r6, r3, r7
 80019f4:	3e01      	subs	r6, #1
 80019f6:	fbb6 f7f7 	udiv	r7, r6, r7
 80019fa:	4e37      	ldr	r6, [pc, #220]	; (8001ad8 <USB_EPStartXfer+0x188>)
 80019fc:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8001a00:	ea06 46c7 	and.w	r6, r6, r7, lsl #19
 8001a04:	ea46 060e 	orr.w	r6, r6, lr
 8001a08:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8001a0a:	6927      	ldr	r7, [r4, #16]
 8001a0c:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8001a10:	433e      	orrs	r6, r7
 8001a12:	6126      	str	r6, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8001a14:	78ce      	ldrb	r6, [r1, #3]
 8001a16:	2e01      	cmp	r6, #1
 8001a18:	d15a      	bne.n	8001ad0 <USB_EPStartXfer+0x180>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8001a1a:	6926      	ldr	r6, [r4, #16]
 8001a1c:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 8001a20:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8001a22:	6926      	ldr	r6, [r4, #16]
 8001a24:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8001a28:	6126      	str	r6, [r4, #16]
 8001a2a:	e7ac      	b.n	8001986 <USB_EPStartXfer+0x36>
      if (ep->type != EP_TYPE_ISOC)
 8001a2c:	78ce      	ldrb	r6, [r1, #3]
 8001a2e:	2e01      	cmp	r6, #1
 8001a30:	d0b3      	beq.n	800199a <USB_EPStartXfer+0x4a>
        if (ep->xfer_len > 0U)
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0ae      	beq.n	8001994 <USB_EPStartXfer+0x44>
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8001a36:	f891 e000 	ldrb.w	lr, [r1]
 8001a3a:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 8001a3e:	2401      	movs	r4, #1
 8001a40:	fa04 f40e 	lsl.w	r4, r4, lr
 8001a44:	433c      	orrs	r4, r7
 8001a46:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 8001a4a:	e7a3      	b.n	8001994 <USB_EPStartXfer+0x44>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001a4c:	f500 6530 	add.w	r5, r0, #2816	; 0xb00
 8001a50:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8001a54:	6925      	ldr	r5, [r4, #16]
 8001a56:	0ced      	lsrs	r5, r5, #19
 8001a58:	04ed      	lsls	r5, r5, #19
 8001a5a:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8001a5c:	6925      	ldr	r5, [r4, #16]
 8001a5e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8001a62:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8001a66:	6125      	str	r5, [r4, #16]
 8001a68:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 8001a6a:	b9fb      	cbnz	r3, 8001aac <USB_EPStartXfer+0x15c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8001a6c:	6923      	ldr	r3, [r4, #16]
 8001a6e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8001a72:	431d      	orrs	r5, r3
 8001a74:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8001a76:	6923      	ldr	r3, [r4, #16]
 8001a78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a7c:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 8001a7e:	2a01      	cmp	r2, #1
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8001a80:	bf04      	itt	eq
 8001a82:	68cb      	ldreq	r3, [r1, #12]
 8001a84:	6163      	streq	r3, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 8001a86:	78cb      	ldrb	r3, [r1, #3]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d10a      	bne.n	8001aa2 <USB_EPStartXfer+0x152>
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8001a8c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8001a90:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8001a94:	6823      	ldr	r3, [r4, #0]
 8001a96:	bf0c      	ite	eq
 8001a98:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8001a9c:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	6023      	str	r3, [r4, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001aa8:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8001aaa:	e795      	b.n	80019d8 <USB_EPStartXfer+0x88>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8001aac:	4e0a      	ldr	r6, [pc, #40]	; (8001ad8 <USB_EPStartXfer+0x188>)
 8001aae:	6927      	ldr	r7, [r4, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8001ab0:	442b      	add	r3, r5
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8001ab8:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8001abc:	433e      	orrs	r6, r7
 8001abe:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	6926      	ldr	r6, [r4, #16]
 8001ac4:	435d      	muls	r5, r3
 8001ac6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8001aca:	4335      	orrs	r5, r6
 8001acc:	6125      	str	r5, [r4, #16]
 8001ace:	e7d6      	b.n	8001a7e <USB_EPStartXfer+0x12e>
    if (dma == 1U)
 8001ad0:	2a01      	cmp	r2, #1
 8001ad2:	d1ae      	bne.n	8001a32 <USB_EPStartXfer+0xe2>
 8001ad4:	e759      	b.n	800198a <USB_EPStartXfer+0x3a>
 8001ad6:	bf00      	nop
 8001ad8:	1ff80000 	.word	0x1ff80000

08001adc <USB_EP0StartXfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  /* IN endpoint */
  if (ep->is_in == 1U)
 8001adc:	784b      	ldrb	r3, [r1, #1]
 8001ade:	2b01      	cmp	r3, #1
{
 8001ae0:	b570      	push	{r4, r5, r6, lr}
 8001ae2:	780b      	ldrb	r3, [r1, #0]
 8001ae4:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1U)
 8001ae6:	d143      	bne.n	8001b70 <USB_EP0StartXfer+0x94>
 8001ae8:	2420      	movs	r4, #32
 8001aea:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001aee:	fb14 6303 	smlabb	r3, r4, r3, r6
 8001af2:	691c      	ldr	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8001af4:	b9cd      	cbnz	r5, 8001b2a <USB_EP0StartXfer+0x4e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001af6:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001afa:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001afe:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001b00:	691c      	ldr	r4, [r3, #16]
 8001b02:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001b06:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8001b08:	691c      	ldr	r4, [r3, #16]
 8001b0a:	0ce4      	lsrs	r4, r4, #19
 8001b0c:	04e4      	lsls	r4, r4, #19
 8001b0e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8001b10:	780d      	ldrb	r5, [r1, #0]
 8001b12:	eb06 1345 	add.w	r3, r6, r5, lsl #5
    
    if (dma == 1)
 8001b16:	2a01      	cmp	r2, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8001b18:	681c      	ldr	r4, [r3, #0]
 8001b1a:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8001b1e:	601c      	str	r4, [r3, #0]
    if (dma == 1)
 8001b20:	d11b      	bne.n	8001b5a <USB_EP0StartXfer+0x7e>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8001b22:	690a      	ldr	r2, [r1, #16]
 8001b24:	615a      	str	r2, [r3, #20]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8001b26:	2000      	movs	r0, #0
 8001b28:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001b2a:	0ce4      	lsrs	r4, r4, #19
 8001b2c:	04e4      	lsls	r4, r4, #19
 8001b2e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001b30:	691c      	ldr	r4, [r3, #16]
 8001b32:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001b36:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001b3a:	611c      	str	r4, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8001b3c:	688c      	ldr	r4, [r1, #8]
 8001b3e:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8001b40:	bf88      	it	hi
 8001b42:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001b44:	691c      	ldr	r4, [r3, #16]
 8001b46:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001b4a:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8001b4c:	694c      	ldr	r4, [r1, #20]
 8001b4e:	691d      	ldr	r5, [r3, #16]
 8001b50:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8001b54:	432c      	orrs	r4, r5
 8001b56:	611c      	str	r4, [r3, #16]
 8001b58:	e7da      	b.n	8001b10 <USB_EP0StartXfer+0x34>
      if (ep->xfer_len > 0U)
 8001b5a:	694b      	ldr	r3, [r1, #20]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0e2      	beq.n	8001b26 <USB_EP0StartXfer+0x4a>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8001b60:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8001b64:	2301      	movs	r3, #1
 8001b66:	40ab      	lsls	r3, r5
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8001b6e:	e7da      	b.n	8001b26 <USB_EP0StartXfer+0x4a>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001b70:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8001b74:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8001b78:	6903      	ldr	r3, [r0, #16]
 8001b7a:	0cdb      	lsrs	r3, r3, #19
 8001b7c:	04db      	lsls	r3, r3, #19
 8001b7e:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8001b80:	6903      	ldr	r3, [r0, #16]
 8001b82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8001b86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8001b8a:	6103      	str	r3, [r0, #16]
 8001b8c:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0U)
 8001b8e:	b105      	cbz	r5, 8001b92 <USB_EP0StartXfer+0xb6>
      ep->xfer_len = ep->maxpacket;
 8001b90:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8001b92:	6904      	ldr	r4, [r0, #16]
 8001b94:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001b98:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8001b9a:	6904      	ldr	r4, [r0, #16]
 8001b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba0:	4323      	orrs	r3, r4
    if (dma == 1U)
 8001ba2:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8001ba4:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8001ba6:	bf04      	itt	eq
 8001ba8:	68cb      	ldreq	r3, [r1, #12]
 8001baa:	6143      	streq	r3, [r0, #20]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8001bac:	6803      	ldr	r3, [r0, #0]
 8001bae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001bb2:	6003      	str	r3, [r0, #0]
 8001bb4:	e7b7      	b.n	8001b26 <USB_EP0StartXfer+0x4a>

08001bb6 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8001bb6:	b510      	push	{r4, lr}
 8001bb8:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8001bbc:	b94c      	cbnz	r4, 8001bd2 <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 8001bbe:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8001bc0:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8001bc4:	f023 0303 	bic.w	r3, r3, #3
 8001bc8:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8001bcc:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 8001bce:	4299      	cmp	r1, r3
 8001bd0:	d101      	bne.n	8001bd6 <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8001bd6:	f851 0b04 	ldr.w	r0, [r1], #4
 8001bda:	6010      	str	r0, [r2, #0]
 8001bdc:	e7f7      	b.n	8001bce <USB_WritePacket+0x18>

08001bde <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8001bde:	3203      	adds	r2, #3
 8001be0:	f022 0203 	bic.w	r2, r2, #3
 8001be4:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8001be6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8001bea:	4291      	cmp	r1, r2
 8001bec:	d101      	bne.n	8001bf2 <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 8001bee:	4608      	mov	r0, r1
 8001bf0:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8001bf2:	6803      	ldr	r3, [r0, #0]
 8001bf4:	f841 3b04 	str.w	r3, [r1], #4
 8001bf8:	e7f7      	b.n	8001bea <USB_ReadPacket+0xc>

08001bfa <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8001bfa:	784b      	ldrb	r3, [r1, #1]
 8001bfc:	780a      	ldrb	r2, [r1, #0]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	f04f 0320 	mov.w	r3, #32
 8001c04:	d10b      	bne.n	8001c1e <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8001c06:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8001c0a:	fb13 0002 	smlabb	r0, r3, r2, r0
 8001c0e:	6803      	ldr	r3, [r0, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	db0b      	blt.n	8001c2c <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8001c14:	6803      	ldr	r3, [r0, #0]
 8001c16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001c1a:	6003      	str	r3, [r0, #0]
 8001c1c:	e006      	b.n	8001c2c <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8001c1e:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8001c22:	fb13 0002 	smlabb	r0, r3, r2, r0
 8001c26:	6803      	ldr	r3, [r0, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	daf3      	bge.n	8001c14 <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8001c2c:	6803      	ldr	r3, [r0, #0]
 8001c2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c32:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8001c34:	2000      	movs	r0, #0
 8001c36:	4770      	bx	lr

08001c38 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8001c38:	784b      	ldrb	r3, [r1, #1]
 8001c3a:	780a      	ldrb	r2, [r1, #0]
 8001c3c:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c3e:	bf0c      	ite	eq
 8001c40:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c44:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8001c48:	2320      	movs	r3, #32
 8001c4a:	fb13 0002 	smlabb	r0, r3, r2, r0
 8001c4e:	6803      	ldr	r3, [r0, #0]
 8001c50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c54:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8001c56:	78cb      	ldrb	r3, [r1, #3]
 8001c58:	3b02      	subs	r3, #2
 8001c5a:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8001c5c:	bf9e      	ittt	ls
 8001c5e:	6803      	ldrls	r3, [r0, #0]
 8001c60:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8001c64:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8001c66:	2000      	movs	r0, #0
 8001c68:	4770      	bx	lr

08001c6a <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8001c6a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001c6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c72:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8001c76:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001c7a:	0109      	lsls	r1, r1, #4
 8001c7c:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8001c80:	4319      	orrs	r1, r3
 8001c82:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 8001c86:	2000      	movs	r0, #0
 8001c88:	4770      	bx	lr

08001c8a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8001c8a:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8001c8c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001c90:	f023 0302 	bic.w	r3, r3, #2
 8001c94:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8001c98:	2003      	movs	r0, #3
 8001c9a:	f7fe fc71 	bl	8000580 <HAL_Delay>
  
  return HAL_OK;  
}
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	bd08      	pop	{r3, pc}

08001ca2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8001ca2:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8001ca4:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	f7fe fc65 	bl	8000580 <HAL_Delay>
  
  return HAL_OK;  
}
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	bd08      	pop	{r3, pc}

08001cba <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8001cba:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8001cbc:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8001cbe:	4010      	ands	r0, r2
 8001cc0:	4770      	bx	lr

08001cc2 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8001cc2:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8001cc6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8001cca:	69c0      	ldr	r0, [r0, #28]
 8001ccc:	4018      	ands	r0, r3
  return ((v & 0xffff0000U) >> 16U);
}
 8001cce:	0c00      	lsrs	r0, r0, #16
 8001cd0:	4770      	bx	lr

08001cd2 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8001cd2:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8001cd6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8001cda:	69c0      	ldr	r0, [r0, #28]
 8001cdc:	4018      	ands	r0, r3
  return ((v & 0xFFFFU));
}
 8001cde:	b280      	uxth	r0, r0
 8001ce0:	4770      	bx	lr

08001ce2 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8001ce2:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8001ce6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 8001cea:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8001cee:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8001cf0:	6940      	ldr	r0, [r0, #20]
  return v;
}
 8001cf2:	4010      	ands	r0, r2
 8001cf4:	4770      	bx	lr

08001cf6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8001cf6:	b510      	push	{r4, lr}
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8001cf8:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8001cfc:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8001d00:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8001d04:	40cb      	lsrs	r3, r1
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8001d06:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8001d0a:	01db      	lsls	r3, r3, #7
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8001d0c:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	4323      	orrs	r3, r4
  return v;
}
 8001d12:	4018      	ands	r0, r3
 8001d14:	bd10      	pop	{r4, pc}

08001d16 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8001d16:	6940      	ldr	r0, [r0, #20]
}
 8001d18:	f000 0001 	and.w	r0, r0, #1
 8001d1c:	4770      	bx	lr

08001d1e <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8001d1e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8001d22:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d26:	f023 0307 	bic.w	r3, r3, #7
 8001d2a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8001d2e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	f002 0206 	and.w	r2, r2, #6
 8001d38:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8001d3a:	bf02      	ittt	eq
 8001d3c:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8001d40:	f042 0203 	orreq.w	r2, r2, #3
 8001d44:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d4e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8001d50:	2000      	movs	r0, #0
 8001d52:	4770      	bx	lr

08001d54 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8001d54:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8001d56:	2400      	movs	r4, #0
 8001d58:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001d5c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8001d60:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001d64:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8001d68:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8001d6c:	f044 0418 	orr.w	r4, r4, #24
 8001d70:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8001d74:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 8001d78:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8001d7a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8001d7e:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8001d82:	bf08      	it	eq
 8001d84:	f04f 2380 	moveq.w	r3, #2147516416	; 0x80008000
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8001d88:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8001d8c:	bf04      	itt	eq
 8001d8e:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8001d92:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 8001d96:	2000      	movs	r0, #0
 8001d98:	bd10      	pop	{r4, pc}
	...

08001d9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	d101      	bne.n	8001da6 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8001da2:	2003      	movs	r0, #3
 8001da4:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001da6:	6902      	ldr	r2, [r0, #16]
 8001da8:	2a00      	cmp	r2, #0
 8001daa:	daf8      	bge.n	8001d9e <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001dac:	6903      	ldr	r3, [r0, #16]
 8001dae:	4a06      	ldr	r2, [pc, #24]	; (8001dc8 <USB_CoreReset+0x2c>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8001db6:	3a01      	subs	r2, #1
 8001db8:	d0f3      	beq.n	8001da2 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001dba:	6903      	ldr	r3, [r0, #16]
 8001dbc:	f013 0301 	ands.w	r3, r3, #1
 8001dc0:	d1f9      	bne.n	8001db6 <USB_CoreReset+0x1a>
  
  return HAL_OK;
 8001dc2:	4618      	mov	r0, r3
}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	00030d41 	.word	0x00030d41

08001dcc <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001dcc:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8001dd0:	b11b      	cbz	r3, 8001dda <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8001dd8:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8001dda:	2002      	movs	r0, #2
  }
}
 8001ddc:	4770      	bx	lr

08001dde <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8001dde:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8001de2:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001de4:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8001de8:	b15b      	cbz	r3, 8001e02 <USBD_CDC_EP0_RxReady+0x24>
 8001dea:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8001dee:	28ff      	cmp	r0, #255	; 0xff
 8001df0:	d007      	beq.n	8001e02 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8001df8:	4621      	mov	r1, r4
 8001dfa:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8001dfc:	23ff      	movs	r3, #255	; 0xff
 8001dfe:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8001e02:	2000      	movs	r0, #0
 8001e04:	bd10      	pop	{r4, pc}
	...

08001e08 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8001e08:	2343      	movs	r3, #67	; 0x43
 8001e0a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8001e0c:	4800      	ldr	r0, [pc, #0]	; (8001e10 <USBD_CDC_GetFSCfgDesc+0x8>)
 8001e0e:	4770      	bx	lr
 8001e10:	20000040 	.word	0x20000040

08001e14 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8001e14:	2343      	movs	r3, #67	; 0x43
 8001e16:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8001e18:	4800      	ldr	r0, [pc, #0]	; (8001e1c <USBD_CDC_GetHSCfgDesc+0x8>)
 8001e1a:	4770      	bx	lr
 8001e1c:	20000084 	.word	0x20000084

08001e20 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8001e20:	2343      	movs	r3, #67	; 0x43
 8001e22:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8001e24:	4800      	ldr	r0, [pc, #0]	; (8001e28 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8001e26:	4770      	bx	lr
 8001e28:	200000d4 	.word	0x200000d4

08001e2c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8001e2c:	230a      	movs	r3, #10
 8001e2e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8001e30:	4800      	ldr	r0, [pc, #0]	; (8001e34 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8001e32:	4770      	bx	lr
 8001e34:	200000c8 	.word	0x200000c8

08001e38 <USBD_CDC_DataOut>:
{      
 8001e38:	b538      	push	{r3, r4, r5, lr}
 8001e3a:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001e3c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8001e40:	f001 fcaa 	bl	8003798 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8001e44:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8001e48:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8001e4c:	b14b      	cbz	r3, 8001e62 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8001e4e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8001e52:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8001e5c:	4798      	blx	r3
    return USBD_OK;
 8001e5e:	2000      	movs	r0, #0
 8001e60:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8001e62:	2002      	movs	r0, #2
}
 8001e64:	bd38      	pop	{r3, r4, r5, pc}
	...

08001e68 <USBD_CDC_Setup>:
{
 8001e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001e6a:	780f      	ldrb	r7, [r1, #0]
 8001e6c:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8001e70:	4606      	mov	r6, r0
 8001e72:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001e74:	d023      	beq.n	8001ebe <USBD_CDC_Setup+0x56>
 8001e76:	2b20      	cmp	r3, #32
 8001e78:	d119      	bne.n	8001eae <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8001e7a:	88ca      	ldrh	r2, [r1, #6]
 8001e7c:	784b      	ldrb	r3, [r1, #1]
 8001e7e:	b1c2      	cbz	r2, 8001eb2 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8001e80:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001e82:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8001e86:	d50b      	bpl.n	8001ea0 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001e88:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	688f      	ldr	r7, [r1, #8]
 8001e90:	4629      	mov	r1, r5
 8001e92:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 8001e94:	88e2      	ldrh	r2, [r4, #6]
 8001e96:	4629      	mov	r1, r5
 8001e98:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8001e9a:	f000 fb84 	bl	80025a6 <USBD_CtlSendData>
      break;
 8001e9e:	e006      	b.n	8001eae <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8001ea0:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8001ea4:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	f000 fb91 	bl	80025d0 <USBD_CtlPrepareRx>
}
 8001eae:	2000      	movs	r0, #0
 8001eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001eb2:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8001eb6:	6884      	ldr	r4, [r0, #8]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	47a0      	blx	r4
 8001ebc:	e7f7      	b.n	8001eae <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8001ebe:	784b      	ldrb	r3, [r1, #1]
 8001ec0:	2b0a      	cmp	r3, #10
 8001ec2:	d1f4      	bne.n	8001eae <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	4901      	ldr	r1, [pc, #4]	; (8001ecc <USBD_CDC_Setup+0x64>)
 8001ec8:	e7e7      	b.n	8001e9a <USBD_CDC_Setup+0x32>
 8001eca:	bf00      	nop
 8001ecc:	200001e4 	.word	0x200001e4

08001ed0 <USBD_CDC_DeInit>:
{
 8001ed0:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8001ed2:	2181      	movs	r1, #129	; 0x81
{
 8001ed4:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8001ed6:	f001 fbf7 	bl	80036c8 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8001eda:	2101      	movs	r1, #1
 8001edc:	4620      	mov	r0, r4
 8001ede:	f001 fbf3 	bl	80036c8 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8001ee2:	2182      	movs	r1, #130	; 0x82
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f001 fbef 	bl	80036c8 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8001eea:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8001eee:	b153      	cbz	r3, 8001f06 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8001ef0:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8001ef8:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8001efc:	f001 fcfa 	bl	80038f4 <free>
    pdev->pClassData = NULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8001f06:	2000      	movs	r0, #0
 8001f08:	bd10      	pop	{r4, pc}

08001f0a <USBD_CDC_Init>:
{
 8001f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001f0c:	7c03      	ldrb	r3, [r0, #16]
{
 8001f0e:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001f10:	bb7b      	cbnz	r3, 8001f72 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8001f12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f16:	2202      	movs	r2, #2
 8001f18:	2181      	movs	r1, #129	; 0x81
 8001f1a:	f001 fbc5 	bl	80036a8 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8001f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8001f22:	2202      	movs	r2, #2
 8001f24:	2101      	movs	r1, #1
 8001f26:	4620      	mov	r0, r4
 8001f28:	f001 fbbe 	bl	80036a8 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8001f2c:	2308      	movs	r3, #8
 8001f2e:	2203      	movs	r2, #3
 8001f30:	2182      	movs	r1, #130	; 0x82
 8001f32:	4620      	mov	r0, r4
 8001f34:	f001 fbb8 	bl	80036a8 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8001f38:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8001f3c:	f001 fcd2 	bl	80038e4 <malloc>
 8001f40:	4606      	mov	r6, r0
 8001f42:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8001f46:	b320      	cbz	r0, 8001f92 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8001f48:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001f50:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8001f52:	2500      	movs	r5, #0
 8001f54:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8001f58:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001f5c:	b987      	cbnz	r7, 8001f80 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8001f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f62:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8001f66:	2101      	movs	r1, #1
 8001f68:	4620      	mov	r0, r4
 8001f6a:	f001 fc07 	bl	800377c <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8001f6e:	4638      	mov	r0, r7
 8001f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8001f72:	2340      	movs	r3, #64	; 0x40
 8001f74:	2202      	movs	r2, #2
 8001f76:	2181      	movs	r1, #129	; 0x81
 8001f78:	f001 fb96 	bl	80036a8 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8001f7c:	2340      	movs	r3, #64	; 0x40
 8001f7e:	e7d0      	b.n	8001f22 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8001f80:	2340      	movs	r3, #64	; 0x40
 8001f82:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8001f86:	2101      	movs	r1, #1
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f001 fbf7 	bl	800377c <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8001f8e:	4628      	mov	r0, r5
 8001f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 8001f92:	2001      	movs	r0, #1
}
 8001f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f96 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8001f96:	b119      	cbz	r1, 8001fa0 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8001f98:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8001fa0:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8001fa2:	4770      	bx	lr

08001fa4 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001fa4:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8001fa8:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8001faa:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8001fae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8001fb2:	4770      	bx	lr

08001fb4 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8001fb4:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8001fb8:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8001fba:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8001fbe:	4770      	bx	lr

08001fc0 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001fc0:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8001fc4:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8001fc6:	b162      	cbz	r2, 8001fe2 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001fc8:	7c04      	ldrb	r4, [r0, #16]
 8001fca:	b944      	cbnz	r4, 8001fde <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8001fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8001fd0:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	f001 fbd1 	bl	800377c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8001fda:	2000      	movs	r0, #0
 8001fdc:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8001fde:	2340      	movs	r3, #64	; 0x40
 8001fe0:	e7f6      	b.n	8001fd0 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8001fe2:	2002      	movs	r0, #2
  }
}
 8001fe4:	bd10      	pop	{r4, pc}

08001fe6 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8001fe6:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8001fe8:	b180      	cbz	r0, 800200c <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8001fea:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001fee:	b113      	cbz	r3, 8001ff6 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8001ff6:	b109      	cbz	r1, 8001ffc <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8001ff8:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8002002:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002004:	f001 fb0e 	bl	8003624 <USBD_LL_Init>
  
  return USBD_OK; 
 8002008:	2000      	movs	r0, #0
 800200a:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800200c:	2002      	movs	r0, #2
}
 800200e:	bd08      	pop	{r3, pc}

08002010 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002010:	b119      	cbz	r1, 800201a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002012:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002016:	2000      	movs	r0, #0
 8002018:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800201a:	2002      	movs	r0, #2
  }
  
  return status;
}
 800201c:	4770      	bx	lr

0800201e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800201e:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002020:	f001 fb34 	bl	800368c <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002024:	2000      	movs	r0, #0
 8002026:	bd08      	pop	{r3, pc}

08002028 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002028:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800202a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800202e:	b90b      	cbnz	r3, 8002034 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002030:	2002      	movs	r0, #2
 8002032:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4798      	blx	r3
 8002038:	2800      	cmp	r0, #0
 800203a:	d1f9      	bne.n	8002030 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800203c:	bd08      	pop	{r3, pc}

0800203e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800203e:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002040:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4798      	blx	r3
  return USBD_OK;
}
 8002048:	2000      	movs	r0, #0
 800204a:	bd08      	pop	{r3, pc}

0800204c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800204c:	b538      	push	{r3, r4, r5, lr}
 800204e:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002050:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8002054:	4628      	mov	r0, r5
 8002056:	f000 fa76 	bl	8002546 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800205a:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800205c:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8002060:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8002064:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8002068:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 800206c:	f001 031f 	and.w	r3, r1, #31
 8002070:	2b01      	cmp	r3, #1
 8002072:	d00e      	beq.n	8002092 <USBD_LL_SetupStage+0x46>
 8002074:	d307      	bcc.n	8002086 <USBD_LL_SetupStage+0x3a>
 8002076:	2b02      	cmp	r3, #2
 8002078:	d010      	beq.n	800209c <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800207a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800207e:	4620      	mov	r0, r4
 8002080:	f001 fb30 	bl	80036e4 <USBD_LL_StallEP>
    break;
 8002084:	e003      	b.n	800208e <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002086:	4629      	mov	r1, r5
 8002088:	4620      	mov	r0, r4
 800208a:	f000 f8e7 	bl	800225c <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 800208e:	2000      	movs	r0, #0
 8002090:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002092:	4629      	mov	r1, r5
 8002094:	4620      	mov	r0, r4
 8002096:	f000 f9db 	bl	8002450 <USBD_StdItfReq>
    break;
 800209a:	e7f8      	b.n	800208e <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 800209c:	4629      	mov	r1, r5
 800209e:	4620      	mov	r0, r4
 80020a0:	f000 f9ee 	bl	8002480 <USBD_StdEPReq>
    break;
 80020a4:	e7f3      	b.n	800208e <USBD_LL_SetupStage+0x42>

080020a6 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80020a6:	b538      	push	{r3, r4, r5, lr}
 80020a8:	4604      	mov	r4, r0
 80020aa:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80020ac:	bb11      	cbnz	r1, 80020f4 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80020ae:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d10f      	bne.n	80020d6 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 80020b6:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80020ba:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80020be:	4293      	cmp	r3, r2
 80020c0:	d90b      	bls.n	80020da <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80020c2:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80020c4:	429a      	cmp	r2, r3
 80020c6:	bf28      	it	cs
 80020c8:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80020ca:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 80020ce:	b292      	uxth	r2, r2
 80020d0:	4629      	mov	r1, r5
 80020d2:	f000 fa8c 	bl	80025ee <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80020d6:	2000      	movs	r0, #0
 80020d8:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80020da:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	b123      	cbz	r3, 80020ec <USBD_LL_DataOutStage+0x46>
 80020e2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80020e6:	2a03      	cmp	r2, #3
 80020e8:	d100      	bne.n	80020ec <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 80020ea:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80020ec:	4620      	mov	r0, r4
 80020ee:	f000 fa86 	bl	80025fe <USBD_CtlSendStatus>
 80020f2:	e7f0      	b.n	80020d6 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 80020f4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0eb      	beq.n	80020d6 <USBD_LL_DataOutStage+0x30>
 80020fe:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002102:	2a03      	cmp	r2, #3
 8002104:	d1e7      	bne.n	80020d6 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8002106:	4798      	blx	r3
 8002108:	e7e5      	b.n	80020d6 <USBD_LL_DataOutStage+0x30>

0800210a <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800210a:	b570      	push	{r4, r5, r6, lr}
 800210c:	4613      	mov	r3, r2
 800210e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002110:	460e      	mov	r6, r1
 8002112:	2900      	cmp	r1, #0
 8002114:	d13d      	bne.n	8002192 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002116:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800211a:	2a02      	cmp	r2, #2
 800211c:	d10f      	bne.n	800213e <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 800211e:	69c5      	ldr	r5, [r0, #28]
 8002120:	6a02      	ldr	r2, [r0, #32]
 8002122:	4295      	cmp	r5, r2
 8002124:	d914      	bls.n	8002150 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8002126:	1aaa      	subs	r2, r5, r2
 8002128:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800212a:	4619      	mov	r1, r3
 800212c:	b292      	uxth	r2, r2
 800212e:	f000 fa47 	bl	80025c0 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002132:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002134:	461a      	mov	r2, r3
 8002136:	4619      	mov	r1, r3
 8002138:	4620      	mov	r0, r4
 800213a:	f001 fb1f 	bl	800377c <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800213e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002142:	2b01      	cmp	r3, #1
 8002144:	d102      	bne.n	800214c <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 800214c:	2000      	movs	r0, #0
 800214e:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8002150:	6983      	ldr	r3, [r0, #24]
 8002152:	fbb3 f5f2 	udiv	r5, r3, r2
 8002156:	fb02 3515 	mls	r5, r2, r5, r3
 800215a:	b965      	cbnz	r5, 8002176 <USBD_LL_DataInStage+0x6c>
 800215c:	429a      	cmp	r2, r3
 800215e:	d80a      	bhi.n	8002176 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002160:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8002164:	4293      	cmp	r3, r2
 8002166:	d206      	bcs.n	8002176 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002168:	462a      	mov	r2, r5
 800216a:	f000 fa29 	bl	80025c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800216e:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8002172:	462b      	mov	r3, r5
 8002174:	e7de      	b.n	8002134 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002176:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	b12b      	cbz	r3, 800218a <USBD_LL_DataInStage+0x80>
 800217e:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8002182:	2a03      	cmp	r2, #3
 8002184:	d101      	bne.n	800218a <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8002186:	4620      	mov	r0, r4
 8002188:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 800218a:	4620      	mov	r0, r4
 800218c:	f000 fa42 	bl	8002614 <USBD_CtlReceiveStatus>
 8002190:	e7d5      	b.n	800213e <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002192:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0d7      	beq.n	800214c <USBD_LL_DataInStage+0x42>
 800219c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80021a0:	2a03      	cmp	r2, #3
 80021a2:	d1d3      	bne.n	800214c <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 80021a4:	4798      	blx	r3
 80021a6:	e7d1      	b.n	800214c <USBD_LL_DataInStage+0x42>

080021a8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80021a8:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80021aa:	2200      	movs	r2, #0
{
 80021ac:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 80021ae:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80021b0:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 80021b2:	2340      	movs	r3, #64	; 0x40
 80021b4:	f001 fa78 	bl	80036a8 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80021b8:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80021ba:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 80021be:	2200      	movs	r2, #0
 80021c0:	2180      	movs	r1, #128	; 0x80
 80021c2:	4620      	mov	r0, r4
 80021c4:	f001 fa70 	bl	80036a8 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80021ce:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80021d2:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 80021d4:	b12b      	cbz	r3, 80021e2 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80021d6:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80021da:	7921      	ldrb	r1, [r4, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4620      	mov	r0, r4
 80021e0:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80021e2:	2000      	movs	r0, #0
 80021e4:	bd38      	pop	{r3, r4, r5, pc}

080021e6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80021e6:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80021e8:	2000      	movs	r0, #0
 80021ea:	4770      	bx	lr

080021ec <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80021ec:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80021f0:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80021f4:	2304      	movs	r3, #4
 80021f6:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80021fa:	2000      	movs	r0, #0
 80021fc:	4770      	bx	lr

080021fe <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 80021fe:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002202:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002206:	2000      	movs	r0, #0
 8002208:	4770      	bx	lr

0800220a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800220a:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800220c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002210:	2a03      	cmp	r2, #3
 8002212:	d104      	bne.n	800221e <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002214:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	b103      	cbz	r3, 800221e <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800221c:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800221e:	2000      	movs	r0, #0
 8002220:	bd08      	pop	{r3, pc}

08002222 <USBD_LL_IsoINIncomplete>:
 8002222:	2000      	movs	r0, #0
 8002224:	4770      	bx	lr

08002226 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8002226:	2000      	movs	r0, #0
 8002228:	4770      	bx	lr

0800222a <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 800222a:	2000      	movs	r0, #0
 800222c:	4770      	bx	lr

0800222e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800222e:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002230:	2201      	movs	r2, #1
 8002232:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002236:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 800223a:	7901      	ldrb	r1, [r0, #4]
 800223c:	6852      	ldr	r2, [r2, #4]
 800223e:	4790      	blx	r2
   
  return USBD_OK;
}
 8002240:	2000      	movs	r0, #0
 8002242:	bd08      	pop	{r3, pc}

08002244 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002244:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8002246:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002248:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800224a:	f001 fa4b 	bl	80036e4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800224e:	4620      	mov	r0, r4
 8002250:	2100      	movs	r1, #0
}
 8002252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002256:	f001 ba45 	b.w	80036e4 <USBD_LL_StallEP>
	...

0800225c <USBD_StdDevReq>:
{
 800225c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 800225e:	784b      	ldrb	r3, [r1, #1]
{
 8002260:	4604      	mov	r4, r0
 8002262:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002264:	2b09      	cmp	r3, #9
 8002266:	d879      	bhi.n	800235c <USBD_StdDevReq+0x100>
 8002268:	e8df f013 	tbh	[pc, r3, lsl #1]
 800226c:	00e500c9 	.word	0x00e500c9
 8002270:	00d90078 	.word	0x00d90078
 8002274:	006d0078 	.word	0x006d0078
 8002278:	0078000a 	.word	0x0078000a
 800227c:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8002280:	884b      	ldrh	r3, [r1, #2]
 8002282:	0a1a      	lsrs	r2, r3, #8
 8002284:	3a01      	subs	r2, #1
 8002286:	2a06      	cmp	r2, #6
 8002288:	d868      	bhi.n	800235c <USBD_StdDevReq+0x100>
 800228a:	e8df f002 	tbb	[pc, r2]
 800228e:	1c04      	.short	0x1c04
 8002290:	49676729 	.word	0x49676729
 8002294:	52          	.byte	0x52
 8002295:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002296:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800229a:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800229c:	7c20      	ldrb	r0, [r4, #16]
 800229e:	f10d 0106 	add.w	r1, sp, #6
 80022a2:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80022a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80022a8:	2a00      	cmp	r2, #0
 80022aa:	d067      	beq.n	800237c <USBD_StdDevReq+0x120>
 80022ac:	88eb      	ldrh	r3, [r5, #6]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d064      	beq.n	800237c <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 80022b2:	429a      	cmp	r2, r3
 80022b4:	bf28      	it	cs
 80022b6:	461a      	movcs	r2, r3
 80022b8:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80022bc:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 80022be:	4620      	mov	r0, r4
 80022c0:	f000 f971 	bl	80025a6 <USBD_CtlSendData>
 80022c4:	e05a      	b.n	800237c <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80022c6:	7c02      	ldrb	r2, [r0, #16]
 80022c8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80022cc:	b932      	cbnz	r2, 80022dc <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80022d0:	f10d 0006 	add.w	r0, sp, #6
 80022d4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80022d6:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80022d8:	7043      	strb	r3, [r0, #1]
 80022da:	e7e3      	b.n	80022a4 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	e7f7      	b.n	80022d0 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b05      	cmp	r3, #5
 80022e4:	d83a      	bhi.n	800235c <USBD_StdDevReq+0x100>
 80022e6:	e8df f003 	tbb	[pc, r3]
 80022ea:	0703      	.short	0x0703
 80022ec:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80022f0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	e7d1      	b.n	800229c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80022f8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	e7cd      	b.n	800229c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002300:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	e7c9      	b.n	800229c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002308:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	e7c5      	b.n	800229c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002310:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	e7c1      	b.n	800229c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002318:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	e7bd      	b.n	800229c <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002320:	7c03      	ldrb	r3, [r0, #16]
 8002322:	b9db      	cbnz	r3, 800235c <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002324:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002328:	f10d 0006 	add.w	r0, sp, #6
 800232c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232e:	4798      	blx	r3
 8002330:	e7b8      	b.n	80022a4 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002332:	7c03      	ldrb	r3, [r0, #16]
 8002334:	b993      	cbnz	r3, 800235c <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002336:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800233a:	f10d 0006 	add.w	r0, sp, #6
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002342:	2307      	movs	r3, #7
 8002344:	e7c8      	b.n	80022d8 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002346:	888b      	ldrh	r3, [r1, #4]
 8002348:	b943      	cbnz	r3, 800235c <USBD_StdDevReq+0x100>
 800234a:	88cb      	ldrh	r3, [r1, #6]
 800234c:	b933      	cbnz	r3, 800235c <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800234e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002352:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002354:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002356:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800235a:	d103      	bne.n	8002364 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 800235c:	4620      	mov	r0, r4
 800235e:	f7ff ff71 	bl	8002244 <USBD_CtlError.constprop.0>
    break;
 8002362:	e00b      	b.n	800237c <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8002364:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8002368:	4629      	mov	r1, r5
 800236a:	f001 f9eb 	bl	8003744 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800236e:	4620      	mov	r0, r4
 8002370:	f000 f945 	bl	80025fe <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002374:	b12d      	cbz	r5, 8002382 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002376:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002378:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 800237c:	2000      	movs	r0, #0
 800237e:	b003      	add	sp, #12
 8002380:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002382:	2301      	movs	r3, #1
 8002384:	e7f8      	b.n	8002378 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8002386:	7889      	ldrb	r1, [r1, #2]
 8002388:	4d30      	ldr	r5, [pc, #192]	; (800244c <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800238a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 800238c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800238e:	d8e5      	bhi.n	800235c <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8002390:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002394:	2b02      	cmp	r3, #2
 8002396:	d00c      	beq.n	80023b2 <USBD_StdDevReq+0x156>
 8002398:	2b03      	cmp	r3, #3
 800239a:	d1df      	bne.n	800235c <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 800239c:	b9b1      	cbnz	r1, 80023cc <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800239e:	2302      	movs	r3, #2
 80023a0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80023a4:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80023a6:	f7ff fe4a 	bl	800203e <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80023aa:	4620      	mov	r0, r4
 80023ac:	f000 f927 	bl	80025fe <USBD_CtlSendStatus>
 80023b0:	e7e4      	b.n	800237c <USBD_StdDevReq+0x120>
      if (cfgidx) 
 80023b2:	2900      	cmp	r1, #0
 80023b4:	d0f9      	beq.n	80023aa <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 80023b6:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80023b8:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80023ba:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80023bc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80023c0:	4620      	mov	r0, r4
 80023c2:	f7ff fe31 	bl	8002028 <USBD_SetClassConfig>
 80023c6:	2802      	cmp	r0, #2
 80023c8:	d1ef      	bne.n	80023aa <USBD_StdDevReq+0x14e>
 80023ca:	e7c7      	b.n	800235c <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 80023cc:	6841      	ldr	r1, [r0, #4]
 80023ce:	2901      	cmp	r1, #1
 80023d0:	d0eb      	beq.n	80023aa <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80023d2:	b2c9      	uxtb	r1, r1
 80023d4:	f7ff fe33 	bl	800203e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80023d8:	7829      	ldrb	r1, [r5, #0]
 80023da:	6061      	str	r1, [r4, #4]
 80023dc:	e7f0      	b.n	80023c0 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 80023de:	88ca      	ldrh	r2, [r1, #6]
 80023e0:	2a01      	cmp	r2, #1
 80023e2:	d1bb      	bne.n	800235c <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 80023e4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d003      	beq.n	80023f4 <USBD_StdDevReq+0x198>
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	d1b5      	bne.n	800235c <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 80023f0:	1d01      	adds	r1, r0, #4
 80023f2:	e764      	b.n	80022be <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 80023f4:	4601      	mov	r1, r0
 80023f6:	2300      	movs	r3, #0
 80023f8:	f841 3f08 	str.w	r3, [r1, #8]!
 80023fc:	e75f      	b.n	80022be <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 80023fe:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002402:	3b02      	subs	r3, #2
 8002404:	2b01      	cmp	r3, #1
 8002406:	d8a9      	bhi.n	800235c <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002408:	2301      	movs	r3, #1
 800240a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800240c:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002410:	b10b      	cbz	r3, 8002416 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002412:	2303      	movs	r3, #3
 8002414:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8002416:	2202      	movs	r2, #2
 8002418:	f104 010c 	add.w	r1, r4, #12
 800241c:	e74f      	b.n	80022be <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800241e:	884b      	ldrh	r3, [r1, #2]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d1ab      	bne.n	800237c <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002424:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002428:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800242c:	4629      	mov	r1, r5
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4620      	mov	r0, r4
 8002432:	4798      	blx	r3
 8002434:	e7b9      	b.n	80023aa <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8002436:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800243a:	3b02      	subs	r3, #2
 800243c:	2b01      	cmp	r3, #1
 800243e:	d88d      	bhi.n	800235c <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002440:	884b      	ldrh	r3, [r1, #2]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d19a      	bne.n	800237c <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002446:	2300      	movs	r3, #0
 8002448:	e7ec      	b.n	8002424 <USBD_StdDevReq+0x1c8>
 800244a:	bf00      	nop
 800244c:	200001e5 	.word	0x200001e5

08002450 <USBD_StdItfReq>:
{
 8002450:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8002452:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002456:	2b03      	cmp	r3, #3
{
 8002458:	4604      	mov	r4, r0
 800245a:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 800245c:	d10d      	bne.n	800247a <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800245e:	790b      	ldrb	r3, [r1, #4]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d80a      	bhi.n	800247a <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8002464:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 800246c:	88eb      	ldrh	r3, [r5, #6]
 800246e:	b913      	cbnz	r3, 8002476 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8002470:	4620      	mov	r0, r4
 8002472:	f000 f8c4 	bl	80025fe <USBD_CtlSendStatus>
}
 8002476:	2000      	movs	r0, #0
 8002478:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 800247a:	f7ff fee3 	bl	8002244 <USBD_CtlError.constprop.0>
    break;
 800247e:	e7fa      	b.n	8002476 <USBD_StdItfReq+0x26>

08002480 <USBD_StdEPReq>:
{
 8002480:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8002482:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8002484:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8002486:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800248a:	2a20      	cmp	r2, #32
{
 800248c:	4604      	mov	r4, r0
 800248e:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8002490:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8002492:	d105      	bne.n	80024a0 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8002494:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	4798      	blx	r3
}
 800249c:	2000      	movs	r0, #0
 800249e:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 80024a0:	784a      	ldrb	r2, [r1, #1]
 80024a2:	2a01      	cmp	r2, #1
 80024a4:	d01c      	beq.n	80024e0 <USBD_StdEPReq+0x60>
 80024a6:	d32a      	bcc.n	80024fe <USBD_StdEPReq+0x7e>
 80024a8:	2a03      	cmp	r2, #3
 80024aa:	d1f7      	bne.n	800249c <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80024ac:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80024b0:	2a02      	cmp	r2, #2
 80024b2:	d040      	beq.n	8002536 <USBD_StdEPReq+0xb6>
 80024b4:	2a03      	cmp	r2, #3
 80024b6:	d002      	beq.n	80024be <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 80024b8:	f7ff fec4 	bl	8002244 <USBD_CtlError.constprop.0>
      break;
 80024bc:	e7ee      	b.n	800249c <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80024be:	884a      	ldrh	r2, [r1, #2]
 80024c0:	b922      	cbnz	r2, 80024cc <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80024c2:	065e      	lsls	r6, r3, #25
 80024c4:	d002      	beq.n	80024cc <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 80024c6:	4619      	mov	r1, r3
 80024c8:	f001 f90c 	bl	80036e4 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 80024cc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80024d0:	4629      	mov	r1, r5
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4620      	mov	r0, r4
 80024d6:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80024d8:	4620      	mov	r0, r4
 80024da:	f000 f890 	bl	80025fe <USBD_CtlSendStatus>
 80024de:	e7dd      	b.n	800249c <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80024e0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80024e4:	2a02      	cmp	r2, #2
 80024e6:	d026      	beq.n	8002536 <USBD_StdEPReq+0xb6>
 80024e8:	2a03      	cmp	r2, #3
 80024ea:	d1e5      	bne.n	80024b8 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80024ec:	884a      	ldrh	r2, [r1, #2]
 80024ee:	2a00      	cmp	r2, #0
 80024f0:	d1d4      	bne.n	800249c <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 80024f2:	0659      	lsls	r1, r3, #25
 80024f4:	d0f0      	beq.n	80024d8 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80024f6:	4619      	mov	r1, r3
 80024f8:	f001 f902 	bl	8003700 <USBD_LL_ClearStallEP>
 80024fc:	e7e6      	b.n	80024cc <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 80024fe:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002502:	2a02      	cmp	r2, #2
 8002504:	d017      	beq.n	8002536 <USBD_StdEPReq+0xb6>
 8002506:	2a03      	cmp	r2, #3
 8002508:	d1d6      	bne.n	80024b8 <USBD_StdEPReq+0x38>
 800250a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800250e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002512:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002516:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002518:	bf14      	ite	ne
 800251a:	3514      	addne	r5, #20
 800251c:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002520:	f001 f8fc 	bl	800371c <USBD_LL_IsStallEP>
 8002524:	b168      	cbz	r0, 8002542 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8002526:	2301      	movs	r3, #1
 8002528:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 800252a:	2202      	movs	r2, #2
 800252c:	4629      	mov	r1, r5
 800252e:	4620      	mov	r0, r4
 8002530:	f000 f839 	bl	80025a6 <USBD_CtlSendData>
      break;
 8002534:	e7b2      	b.n	800249c <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8002536:	065a      	lsls	r2, r3, #25
 8002538:	d0b0      	beq.n	800249c <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 800253a:	4619      	mov	r1, r3
 800253c:	f001 f8d2 	bl	80036e4 <USBD_LL_StallEP>
 8002540:	e7ac      	b.n	800249c <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8002542:	6028      	str	r0, [r5, #0]
 8002544:	e7f1      	b.n	800252a <USBD_StdEPReq+0xaa>

08002546 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002546:	780b      	ldrb	r3, [r1, #0]
 8002548:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800254a:	784b      	ldrb	r3, [r1, #1]
 800254c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800254e:	78ca      	ldrb	r2, [r1, #3]
 8002550:	788b      	ldrb	r3, [r1, #2]
 8002552:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002556:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002558:	794a      	ldrb	r2, [r1, #5]
 800255a:	790b      	ldrb	r3, [r1, #4]
 800255c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002560:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002562:	79ca      	ldrb	r2, [r1, #7]
 8002564:	798b      	ldrb	r3, [r1, #6]
 8002566:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800256a:	80c3      	strh	r3, [r0, #6]
 800256c:	4770      	bx	lr

0800256e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800256e:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8002570:	b188      	cbz	r0, 8002596 <USBD_GetString+0x28>
 8002572:	4605      	mov	r5, r0
 8002574:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8002576:	f815 4b01 	ldrb.w	r4, [r5], #1
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2c00      	cmp	r4, #0
 800257e:	d1f9      	bne.n	8002574 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	3302      	adds	r3, #2
 8002584:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8002586:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8002588:	2303      	movs	r3, #3
 800258a:	704b      	strb	r3, [r1, #1]
 800258c:	3801      	subs	r0, #1
 800258e:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8002590:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002594:	b905      	cbnz	r5, 8002598 <USBD_GetString+0x2a>
 8002596:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 800259e:	3302      	adds	r3, #2
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	548c      	strb	r4, [r1, r2]
 80025a4:	e7f4      	b.n	8002590 <USBD_GetString+0x22>

080025a6 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80025a6:	b510      	push	{r4, lr}
 80025a8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80025aa:	2202      	movs	r2, #2
 80025ac:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80025b0:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80025b2:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80025b4:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80025b6:	2100      	movs	r1, #0
 80025b8:	f001 f8d2 	bl	8003760 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80025bc:	2000      	movs	r0, #0
 80025be:	bd10      	pop	{r4, pc}

080025c0 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80025c0:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80025c2:	4613      	mov	r3, r2
 80025c4:	460a      	mov	r2, r1
 80025c6:	2100      	movs	r1, #0
 80025c8:	f001 f8ca 	bl	8003760 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80025cc:	2000      	movs	r0, #0
 80025ce:	bd08      	pop	{r3, pc}

080025d0 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80025d0:	b510      	push	{r4, lr}
 80025d2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80025d4:	2203      	movs	r2, #3
 80025d6:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80025da:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80025de:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80025e0:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 80025e4:	2100      	movs	r1, #0
 80025e6:	f001 f8c9 	bl	800377c <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80025ea:	2000      	movs	r0, #0
 80025ec:	bd10      	pop	{r4, pc}

080025ee <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80025ee:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80025f0:	4613      	mov	r3, r2
 80025f2:	460a      	mov	r2, r1
 80025f4:	2100      	movs	r1, #0
 80025f6:	f001 f8c1 	bl	800377c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80025fa:	2000      	movs	r0, #0
 80025fc:	bd08      	pop	{r3, pc}

080025fe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80025fe:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002600:	2304      	movs	r3, #4
 8002602:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8002606:	2300      	movs	r3, #0
 8002608:	461a      	mov	r2, r3
 800260a:	4619      	mov	r1, r3
 800260c:	f001 f8a8 	bl	8003760 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002610:	2000      	movs	r0, #0
 8002612:	bd08      	pop	{r3, pc}

08002614 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002614:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8002616:	2305      	movs	r3, #5
 8002618:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800261c:	2300      	movs	r3, #0
 800261e:	461a      	mov	r2, r3
 8002620:	4619      	mov	r1, r3
 8002622:	f001 f8ab 	bl	800377c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8002626:	2000      	movs	r0, #0
 8002628:	bd08      	pop	{r3, pc}

0800262a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800262a:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800262c:	f000 fbee 	bl	8002e0c <vTaskStartScheduler>
  
  return osOK;
}
 8002630:	2000      	movs	r0, #0
 8002632:	bd08      	pop	{r3, pc}

08002634 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002634:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002636:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 800263a:	8a02      	ldrh	r2, [r0, #16]
{
 800263c:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800263e:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8002642:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8002644:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8002646:	bf14      	ite	ne
 8002648:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800264a:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800264c:	a803      	add	r0, sp, #12
 800264e:	9001      	str	r0, [sp, #4]
 8002650:	9400      	str	r4, [sp, #0]
 8002652:	4628      	mov	r0, r5
 8002654:	f000 fb04 	bl	8002c60 <xTaskCreate>
 8002658:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800265a:	bf0c      	ite	eq
 800265c:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800265e:	2000      	movne	r0, #0
}
 8002660:	b005      	add	sp, #20
 8002662:	bd30      	pop	{r4, r5, pc}

08002664 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002664:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002666:	2800      	cmp	r0, #0
 8002668:	bf08      	it	eq
 800266a:	2001      	moveq	r0, #1
 800266c:	f000 fd1c 	bl	80030a8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002670:	2000      	movs	r0, #0
 8002672:	bd08      	pop	{r3, pc}

08002674 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8002674:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002676:	f000 fdc7 	bl	8003208 <xTaskGetSchedulerState>
 800267a:	2801      	cmp	r0, #1
 800267c:	d003      	beq.n	8002686 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800267e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8002682:	f000 b907 	b.w	8002894 <xPortSysTickHandler>
 8002686:	bd08      	pop	{r3, pc}

08002688 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002688:	f100 0308 	add.w	r3, r0, #8
 800268c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800268e:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002692:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002694:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002696:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002698:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800269a:	6003      	str	r3, [r0, #0]
 800269c:	4770      	bx	lr

0800269e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	6103      	str	r3, [r0, #16]
 80026a2:	4770      	bx	lr

080026a4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80026a4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026a6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80026b0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80026b2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80026b4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80026b6:	3301      	adds	r3, #1
 80026b8:	6003      	str	r3, [r0, #0]
 80026ba:	4770      	bx	lr

080026bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80026bc:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80026be:	1c53      	adds	r3, r2, #1
{
 80026c0:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80026c2:	d10a      	bne.n	80026da <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80026c4:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026ca:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026cc:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80026ce:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80026d0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80026d2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80026d4:	3301      	adds	r3, #1
 80026d6:	6003      	str	r3, [r0, #0]
 80026d8:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026da:	f100 0308 	add.w	r3, r0, #8
 80026de:	685c      	ldr	r4, [r3, #4]
 80026e0:	6825      	ldr	r5, [r4, #0]
 80026e2:	42aa      	cmp	r2, r5
 80026e4:	d3ef      	bcc.n	80026c6 <vListInsert+0xa>
 80026e6:	4623      	mov	r3, r4
 80026e8:	e7f9      	b.n	80026de <vListInsert+0x22>

080026ea <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026ea:	6841      	ldr	r1, [r0, #4]
 80026ec:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80026ee:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026f0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026f2:	6882      	ldr	r2, [r0, #8]
 80026f4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026fa:	bf08      	it	eq
 80026fc:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80026fe:	2200      	movs	r2, #0
 8002700:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	3801      	subs	r0, #1
 8002706:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002708:	4770      	bx	lr
	...

0800270c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800270c:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <prvTaskExitError+0x2c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	3301      	adds	r3, #1
 8002712:	d008      	beq.n	8002726 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002718:	f383 8811 	msr	BASEPRI, r3
 800271c:	f3bf 8f6f 	isb	sy
 8002720:	f3bf 8f4f 	dsb	sy
 8002724:	e7fe      	b.n	8002724 <prvTaskExitError+0x18>
 8002726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272a:	f383 8811 	msr	BASEPRI, r3
 800272e:	f3bf 8f6f 	isb	sy
 8002732:	f3bf 8f4f 	dsb	sy
 8002736:	e7fe      	b.n	8002736 <prvTaskExitError+0x2a>
 8002738:	20000118 	.word	0x20000118

0800273c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800273c:	4806      	ldr	r0, [pc, #24]	; (8002758 <prvPortStartFirstTask+0x1c>)
 800273e:	6800      	ldr	r0, [r0, #0]
 8002740:	6800      	ldr	r0, [r0, #0]
 8002742:	f380 8808 	msr	MSP, r0
 8002746:	b662      	cpsie	i
 8002748:	b661      	cpsie	f
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	df00      	svc	0
 8002754:	bf00      	nop
 8002756:	0000      	.short	0x0000
 8002758:	e000ed08 	.word	0xe000ed08

0800275c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800275c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800276c <vPortEnableVFP+0x10>
 8002760:	6801      	ldr	r1, [r0, #0]
 8002762:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002766:	6001      	str	r1, [r0, #0]
 8002768:	4770      	bx	lr
 800276a:	0000      	.short	0x0000
 800276c:	e000ed88 	.word	0xe000ed88

08002770 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002774:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002778:	4b07      	ldr	r3, [pc, #28]	; (8002798 <pxPortInitialiseStack+0x28>)
 800277a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800277e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002782:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002786:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800278a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800278e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002792:	3844      	subs	r0, #68	; 0x44
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	0800270d 	.word	0x0800270d
 800279c:	00000000 	.word	0x00000000

080027a0 <SVC_Handler>:
	__asm volatile (
 80027a0:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <pxCurrentTCBConst2>)
 80027a2:	6819      	ldr	r1, [r3, #0]
 80027a4:	6808      	ldr	r0, [r1, #0]
 80027a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027aa:	f380 8809 	msr	PSP, r0
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	f04f 0000 	mov.w	r0, #0
 80027b6:	f380 8811 	msr	BASEPRI, r0
 80027ba:	4770      	bx	lr
 80027bc:	f3af 8000 	nop.w

080027c0 <pxCurrentTCBConst2>:
 80027c0:	20003e04 	.word	0x20003e04

080027c4 <vPortEnterCritical>:
 80027c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c8:	f383 8811 	msr	BASEPRI, r3
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80027d4:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <vPortEnterCritical+0x3c>)
 80027d6:	6813      	ldr	r3, [r2, #0]
 80027d8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80027da:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80027dc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80027de:	d10d      	bne.n	80027fc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80027e0:	4b08      	ldr	r3, [pc, #32]	; (8002804 <vPortEnterCritical+0x40>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80027e8:	d008      	beq.n	80027fc <vPortEnterCritical+0x38>
 80027ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ee:	f383 8811 	msr	BASEPRI, r3
 80027f2:	f3bf 8f6f 	isb	sy
 80027f6:	f3bf 8f4f 	dsb	sy
 80027fa:	e7fe      	b.n	80027fa <vPortEnterCritical+0x36>
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20000118 	.word	0x20000118
 8002804:	e000ed04 	.word	0xe000ed04

08002808 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002808:	4a08      	ldr	r2, [pc, #32]	; (800282c <vPortExitCritical+0x24>)
 800280a:	6813      	ldr	r3, [r2, #0]
 800280c:	b943      	cbnz	r3, 8002820 <vPortExitCritical+0x18>
 800280e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002812:	f383 8811 	msr	BASEPRI, r3
 8002816:	f3bf 8f6f 	isb	sy
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	e7fe      	b.n	800281e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002820:	3b01      	subs	r3, #1
 8002822:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002824:	b90b      	cbnz	r3, 800282a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002826:	f383 8811 	msr	BASEPRI, r3
 800282a:	4770      	bx	lr
 800282c:	20000118 	.word	0x20000118

08002830 <PendSV_Handler>:
	__asm volatile
 8002830:	f3ef 8009 	mrs	r0, PSP
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	4b15      	ldr	r3, [pc, #84]	; (8002890 <pxCurrentTCBConst>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	f01e 0f10 	tst.w	lr, #16
 8002840:	bf08      	it	eq
 8002842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800284a:	6010      	str	r0, [r2, #0]
 800284c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002850:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002854:	f380 8811 	msr	BASEPRI, r0
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f000 fc80 	bl	8003164 <vTaskSwitchContext>
 8002864:	f04f 0000 	mov.w	r0, #0
 8002868:	f380 8811 	msr	BASEPRI, r0
 800286c:	bc08      	pop	{r3}
 800286e:	6819      	ldr	r1, [r3, #0]
 8002870:	6808      	ldr	r0, [r1, #0]
 8002872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002876:	f01e 0f10 	tst.w	lr, #16
 800287a:	bf08      	it	eq
 800287c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002880:	f380 8809 	msr	PSP, r0
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	f3af 8000 	nop.w

08002890 <pxCurrentTCBConst>:
 8002890:	20003e04 	.word	0x20003e04

08002894 <xPortSysTickHandler>:
{
 8002894:	b508      	push	{r3, lr}
	__asm volatile
 8002896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289a:	f383 8811 	msr	BASEPRI, r3
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80028a6:	f000 faf5 	bl	8002e94 <xTaskIncrementTick>
 80028aa:	b118      	cbz	r0, 80028b4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80028ac:	4b03      	ldr	r3, [pc, #12]	; (80028bc <xPortSysTickHandler+0x28>)
 80028ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028b2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80028b4:	2300      	movs	r3, #0
 80028b6:	f383 8811 	msr	BASEPRI, r3
 80028ba:	bd08      	pop	{r3, pc}
 80028bc:	e000ed04 	.word	0xe000ed04

080028c0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <vPortSetupTimerInterrupt+0x1c>)
 80028c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80028cc:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <vPortSetupTimerInterrupt+0x20>)
 80028ce:	3b01      	subs	r3, #1
 80028d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80028d2:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <vPortSetupTimerInterrupt+0x24>)
 80028d4:	2207      	movs	r2, #7
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	2000011c 	.word	0x2000011c
 80028e0:	e000e014 	.word	0xe000e014
 80028e4:	e000e010 	.word	0xe000e010

080028e8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80028e8:	4b31      	ldr	r3, [pc, #196]	; (80029b0 <xPortStartScheduler+0xc8>)
 80028ea:	4a32      	ldr	r2, [pc, #200]	; (80029b4 <xPortStartScheduler+0xcc>)
{
 80028ec:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80028ee:	6819      	ldr	r1, [r3, #0]
 80028f0:	4291      	cmp	r1, r2
 80028f2:	d108      	bne.n	8002906 <xPortStartScheduler+0x1e>
	__asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	e7fe      	b.n	8002904 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4b2b      	ldr	r3, [pc, #172]	; (80029b8 <xPortStartScheduler+0xd0>)
 800290a:	429a      	cmp	r2, r3
 800290c:	d108      	bne.n	8002920 <xPortStartScheduler+0x38>
 800290e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002912:	f383 8811 	msr	BASEPRI, r3
 8002916:	f3bf 8f6f 	isb	sy
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	e7fe      	b.n	800291e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002920:	4b26      	ldr	r3, [pc, #152]	; (80029bc <xPortStartScheduler+0xd4>)
 8002922:	781a      	ldrb	r2, [r3, #0]
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002928:	22ff      	movs	r2, #255	; 0xff
 800292a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800292c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800292e:	4a24      	ldr	r2, [pc, #144]	; (80029c0 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002930:	b2db      	uxtb	r3, r3
 8002932:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002936:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800293a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800293e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002940:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <xPortStartScheduler+0xdc>)
 8002942:	2207      	movs	r2, #7
 8002944:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002946:	2100      	movs	r1, #0
 8002948:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800294c:	0600      	lsls	r0, r0, #24
 800294e:	f102 34ff 	add.w	r4, r2, #4294967295
 8002952:	d423      	bmi.n	800299c <xPortStartScheduler+0xb4>
 8002954:	b101      	cbz	r1, 8002958 <xPortStartScheduler+0x70>
 8002956:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800295c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002960:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002962:	9b01      	ldr	r3, [sp, #4]
 8002964:	4a15      	ldr	r2, [pc, #84]	; (80029bc <xPortStartScheduler+0xd4>)
 8002966:	b2db      	uxtb	r3, r3
 8002968:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800296a:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <xPortStartScheduler+0xe0>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002972:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800297a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800297c:	f7ff ffa0 	bl	80028c0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002980:	4b12      	ldr	r3, [pc, #72]	; (80029cc <xPortStartScheduler+0xe4>)
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8002986:	f7ff fee9 	bl	800275c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800298a:	4a11      	ldr	r2, [pc, #68]	; (80029d0 <xPortStartScheduler+0xe8>)
 800298c:	6813      	ldr	r3, [r2, #0]
 800298e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002992:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002994:	f7ff fed2 	bl	800273c <prvPortStartFirstTask>
	prvTaskExitError();
 8002998:	f7ff feb8 	bl	800270c <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800299c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80029a0:	0052      	lsls	r2, r2, #1
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	f88d 2003 	strb.w	r2, [sp, #3]
 80029a8:	2101      	movs	r1, #1
 80029aa:	4622      	mov	r2, r4
 80029ac:	e7cc      	b.n	8002948 <xPortStartScheduler+0x60>
 80029ae:	bf00      	nop
 80029b0:	e000ed00 	.word	0xe000ed00
 80029b4:	410fc271 	.word	0x410fc271
 80029b8:	410fc270 	.word	0x410fc270
 80029bc:	e000e400 	.word	0xe000e400
 80029c0:	200001e6 	.word	0x200001e6
 80029c4:	200001e8 	.word	0x200001e8
 80029c8:	e000ed20 	.word	0xe000ed20
 80029cc:	20000118 	.word	0x20000118
 80029d0:	e000ef34 	.word	0xe000ef34

080029d4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80029d4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80029d6:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <prvInsertBlockIntoFreeList+0x40>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4282      	cmp	r2, r0
 80029dc:	d318      	bcc.n	8002a10 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80029de:	685c      	ldr	r4, [r3, #4]
 80029e0:	1919      	adds	r1, r3, r4
 80029e2:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80029e4:	bf01      	itttt	eq
 80029e6:	6841      	ldreq	r1, [r0, #4]
 80029e8:	4618      	moveq	r0, r3
 80029ea:	1909      	addeq	r1, r1, r4
 80029ec:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80029ee:	6844      	ldr	r4, [r0, #4]
 80029f0:	1901      	adds	r1, r0, r4
 80029f2:	428a      	cmp	r2, r1
 80029f4:	d107      	bne.n	8002a06 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80029f6:	4908      	ldr	r1, [pc, #32]	; (8002a18 <prvInsertBlockIntoFreeList+0x44>)
 80029f8:	6809      	ldr	r1, [r1, #0]
 80029fa:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80029fc:	bf1f      	itttt	ne
 80029fe:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002a00:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002a02:	1909      	addne	r1, r1, r4
 8002a04:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002a06:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002a08:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002a0a:	bf18      	it	ne
 8002a0c:	6018      	strne	r0, [r3, #0]
 8002a0e:	bd10      	pop	{r4, pc}
 8002a10:	4613      	mov	r3, r2
 8002a12:	e7e1      	b.n	80029d8 <prvInsertBlockIntoFreeList+0x4>
 8002a14:	20003dfc 	.word	0x20003dfc
 8002a18:	200001ec 	.word	0x200001ec

08002a1c <pvPortMalloc>:
{
 8002a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a20:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002a22:	f000 fa2f 	bl	8002e84 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002a26:	4940      	ldr	r1, [pc, #256]	; (8002b28 <pvPortMalloc+0x10c>)
 8002a28:	4d40      	ldr	r5, [pc, #256]	; (8002b2c <pvPortMalloc+0x110>)
 8002a2a:	680b      	ldr	r3, [r1, #0]
 8002a2c:	bb0b      	cbnz	r3, 8002a72 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8002a2e:	4a40      	ldr	r2, [pc, #256]	; (8002b30 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002a30:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002a32:	bf1f      	itttt	ne
 8002a34:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a36:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002a3a:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8002a3e:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a40:	bf14      	ite	ne
 8002a42:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002a44:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002a48:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002a4a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a4c:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a50:	4e38      	ldr	r6, [pc, #224]	; (8002b34 <pvPortMalloc+0x118>)
	pxEnd = ( void * ) uxAddress;
 8002a52:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002a54:	2000      	movs	r0, #0
 8002a56:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a58:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8002a5a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002a5c:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002a5e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a60:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a62:	4b35      	ldr	r3, [pc, #212]	; (8002b38 <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002a64:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a66:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a68:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <pvPortMalloc+0x120>)
 8002a6a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002a6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002a70:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002a72:	682f      	ldr	r7, [r5, #0]
 8002a74:	4227      	tst	r7, r4
 8002a76:	d116      	bne.n	8002aa6 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002a78:	2c00      	cmp	r4, #0
 8002a7a:	d041      	beq.n	8002b00 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8002a7c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a80:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002a82:	bf1c      	itt	ne
 8002a84:	f023 0307 	bicne.w	r3, r3, #7
 8002a88:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a8a:	b163      	cbz	r3, 8002aa6 <pvPortMalloc+0x8a>
 8002a8c:	4a2b      	ldr	r2, [pc, #172]	; (8002b3c <pvPortMalloc+0x120>)
 8002a8e:	6816      	ldr	r6, [r2, #0]
 8002a90:	42b3      	cmp	r3, r6
 8002a92:	4690      	mov	r8, r2
 8002a94:	d807      	bhi.n	8002aa6 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002a96:	4a27      	ldr	r2, [pc, #156]	; (8002b34 <pvPortMalloc+0x118>)
 8002a98:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a9a:	6868      	ldr	r0, [r5, #4]
 8002a9c:	4283      	cmp	r3, r0
 8002a9e:	d804      	bhi.n	8002aaa <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002aa0:	6809      	ldr	r1, [r1, #0]
 8002aa2:	428d      	cmp	r5, r1
 8002aa4:	d107      	bne.n	8002ab6 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002aa6:	2400      	movs	r4, #0
 8002aa8:	e02a      	b.n	8002b00 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002aaa:	682c      	ldr	r4, [r5, #0]
 8002aac:	2c00      	cmp	r4, #0
 8002aae:	d0f7      	beq.n	8002aa0 <pvPortMalloc+0x84>
 8002ab0:	462a      	mov	r2, r5
 8002ab2:	4625      	mov	r5, r4
 8002ab4:	e7f1      	b.n	8002a9a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ab6:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002ab8:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002aba:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002abc:	1ac2      	subs	r2, r0, r3
 8002abe:	2a10      	cmp	r2, #16
 8002ac0:	d90f      	bls.n	8002ae2 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002ac2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ac4:	0741      	lsls	r1, r0, #29
 8002ac6:	d008      	beq.n	8002ada <pvPortMalloc+0xbe>
 8002ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002acc:	f383 8811 	msr	BASEPRI, r3
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	e7fe      	b.n	8002ad8 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ada:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002adc:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002ade:	f7ff ff79 	bl	80029d4 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ae2:	4915      	ldr	r1, [pc, #84]	; (8002b38 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ae4:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ae6:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ae8:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002aea:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002aec:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8002aee:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002af2:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002af6:	bf38      	it	cc
 8002af8:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002afa:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002afc:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002afe:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002b00:	f000 fa5a 	bl	8002fb8 <xTaskResumeAll>
		if( pvReturn == NULL )
 8002b04:	b90c      	cbnz	r4, 8002b0a <pvPortMalloc+0xee>
			vApplicationMallocFailedHook();
 8002b06:	f000 fb90 	bl	800322a <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b0a:	0763      	lsls	r3, r4, #29
 8002b0c:	d008      	beq.n	8002b20 <pvPortMalloc+0x104>
 8002b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	e7fe      	b.n	8002b1e <pvPortMalloc+0x102>
}
 8002b20:	4620      	mov	r0, r4
 8002b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b26:	bf00      	nop
 8002b28:	200001ec 	.word	0x200001ec
 8002b2c:	20003df0 	.word	0x20003df0
 8002b30:	200001f0 	.word	0x200001f0
 8002b34:	20003dfc 	.word	0x20003dfc
 8002b38:	20003df8 	.word	0x20003df8
 8002b3c:	20003df4 	.word	0x20003df4

08002b40 <vPortFree>:
{
 8002b40:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002b42:	4604      	mov	r4, r0
 8002b44:	b370      	cbz	r0, 8002ba4 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002b46:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <vPortFree+0x68>)
 8002b48:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002b4c:	6812      	ldr	r2, [r2, #0]
 8002b4e:	4213      	tst	r3, r2
 8002b50:	d108      	bne.n	8002b64 <vPortFree+0x24>
 8002b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b56:	f383 8811 	msr	BASEPRI, r3
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	e7fe      	b.n	8002b62 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002b64:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002b68:	b141      	cbz	r1, 8002b7c <vPortFree+0x3c>
 8002b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6e:	f383 8811 	msr	BASEPRI, r3
 8002b72:	f3bf 8f6f 	isb	sy
 8002b76:	f3bf 8f4f 	dsb	sy
 8002b7a:	e7fe      	b.n	8002b7a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b7c:	ea23 0302 	bic.w	r3, r3, r2
 8002b80:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002b84:	f000 f97e 	bl	8002e84 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b88:	4a08      	ldr	r2, [pc, #32]	; (8002bac <vPortFree+0x6c>)
 8002b8a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002b8e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b90:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b94:	440b      	add	r3, r1
 8002b96:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b98:	f7ff ff1c 	bl	80029d4 <prvInsertBlockIntoFreeList>
}
 8002b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002ba0:	f000 ba0a 	b.w	8002fb8 <xTaskResumeAll>
 8002ba4:	bd10      	pop	{r4, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20003df0 	.word	0x20003df0
 8002bac:	20003df4 	.word	0x20003df4

08002bb0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bb0:	4a06      	ldr	r2, [pc, #24]	; (8002bcc <prvResetNextTaskUnblockTime+0x1c>)
 8002bb2:	6813      	ldr	r3, [r2, #0]
 8002bb4:	6819      	ldr	r1, [r3, #0]
 8002bb6:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <prvResetNextTaskUnblockTime+0x20>)
 8002bb8:	b919      	cbnz	r1, 8002bc2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002bba:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002bc6:	68d2      	ldr	r2, [r2, #12]
 8002bc8:	6852      	ldr	r2, [r2, #4]
 8002bca:	e7f8      	b.n	8002bbe <prvResetNextTaskUnblockTime+0xe>
 8002bcc:	20003e08 	.word	0x20003e08
 8002bd0:	20003ee0 	.word	0x20003ee0

08002bd4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002bd6:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002bd8:	4e1b      	ldr	r6, [pc, #108]	; (8002c48 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002bda:	681d      	ldr	r5, [r3, #0]
{
 8002bdc:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002bde:	6830      	ldr	r0, [r6, #0]
 8002be0:	3004      	adds	r0, #4
{
 8002be2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002be4:	f7ff fd81 	bl	80026ea <uxListRemove>
 8002be8:	4633      	mov	r3, r6
 8002bea:	b940      	cbnz	r0, 8002bfe <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002bec:	6831      	ldr	r1, [r6, #0]
 8002bee:	4e17      	ldr	r6, [pc, #92]	; (8002c4c <prvAddCurrentTaskToDelayedList+0x78>)
 8002bf0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002bf2:	6832      	ldr	r2, [r6, #0]
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	4088      	lsls	r0, r1
 8002bf8:	ea22 0200 	bic.w	r2, r2, r0
 8002bfc:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002bfe:	1c62      	adds	r2, r4, #1
 8002c00:	d107      	bne.n	8002c12 <prvAddCurrentTaskToDelayedList+0x3e>
 8002c02:	b137      	cbz	r7, 8002c12 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	4812      	ldr	r0, [pc, #72]	; (8002c50 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002c08:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002c0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c0e:	f7ff bd49 	b.w	80026a4 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002c12:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002c14:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002c16:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002c18:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002c1a:	d907      	bls.n	8002c2c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c1c:	4a0d      	ldr	r2, [pc, #52]	; (8002c54 <prvAddCurrentTaskToDelayedList+0x80>)
 8002c1e:	6810      	ldr	r0, [r2, #0]
 8002c20:	6819      	ldr	r1, [r3, #0]
}
 8002c22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c26:	3104      	adds	r1, #4
 8002c28:	f7ff bd48 	b.w	80026bc <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c2c:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <prvAddCurrentTaskToDelayedList+0x84>)
 8002c2e:	6810      	ldr	r0, [r2, #0]
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	3104      	adds	r1, #4
 8002c34:	f7ff fd42 	bl	80026bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002c38:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <prvAddCurrentTaskToDelayedList+0x88>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002c3e:	bf38      	it	cc
 8002c40:	601c      	strcc	r4, [r3, #0]
 8002c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c44:	20003f28 	.word	0x20003f28
 8002c48:	20003e04 	.word	0x20003e04
 8002c4c:	20003eb0 	.word	0x20003eb0
 8002c50:	20003f00 	.word	0x20003f00
 8002c54:	20003e0c 	.word	0x20003e0c
 8002c58:	20003e08 	.word	0x20003e08
 8002c5c:	20003ee0 	.word	0x20003ee0

08002c60 <xTaskCreate>:
	{
 8002c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c64:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002c68:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c6a:	4650      	mov	r0, sl
	{
 8002c6c:	460d      	mov	r5, r1
 8002c6e:	4699      	mov	r9, r3
 8002c70:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c72:	f7ff fed3 	bl	8002a1c <pvPortMalloc>
			if( pxStack != NULL )
 8002c76:	4607      	mov	r7, r0
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	f000 809c 	beq.w	8002db6 <xTaskCreate+0x156>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002c7e:	2054      	movs	r0, #84	; 0x54
 8002c80:	f7ff fecc 	bl	8002a1c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002c84:	4604      	mov	r4, r0
 8002c86:	2800      	cmp	r0, #0
 8002c88:	f000 8092 	beq.w	8002db0 <xTaskCreate+0x150>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c8c:	4652      	mov	r2, sl
					pxNewTCB->pxStack = pxStack;
 8002c8e:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c90:	21a5      	movs	r1, #165	; 0xa5
 8002c92:	4638      	mov	r0, r7
 8002c94:	f000 fe36 	bl	8003904 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002c98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c9a:	f1aa 0a04 	sub.w	sl, sl, #4
 8002c9e:	449a      	add	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002ca0:	f02a 0a07 	bic.w	sl, sl, #7
 8002ca4:	1e6b      	subs	r3, r5, #1
 8002ca6:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8002caa:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cac:	7859      	ldrb	r1, [r3, #1]
 8002cae:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002cb2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002cb6:	b109      	cbz	r1, 8002cbc <xTaskCreate+0x5c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cb8:	42ab      	cmp	r3, r5
 8002cba:	d1f7      	bne.n	8002cac <xTaskCreate+0x4c>
 8002cbc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002cbe:	2d06      	cmp	r5, #6
 8002cc0:	bf28      	it	cs
 8002cc2:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002cc4:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cc8:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8002cca:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002ccc:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cce:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002cd0:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002cd4:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cd8:	f7ff fce1 	bl	800269e <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cdc:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ce0:	f104 0018 	add.w	r0, r4, #24
 8002ce4:	f7ff fcdb 	bl	800269e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002ce8:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002cec:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cee:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cf0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002cf2:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cf6:	464a      	mov	r2, r9
 8002cf8:	4641      	mov	r1, r8
 8002cfa:	4650      	mov	r0, sl
 8002cfc:	f7ff fd38 	bl	8002770 <pxPortInitialiseStack>
 8002d00:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002d02:	b106      	cbz	r6, 8002d06 <xTaskCreate+0xa6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d04:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8002d06:	f7ff fd5d 	bl	80027c4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002d0a:	4b32      	ldr	r3, [pc, #200]	; (8002dd4 <xTaskCreate+0x174>)
		if( pxCurrentTCB == NULL )
 8002d0c:	4e32      	ldr	r6, [pc, #200]	; (8002dd8 <xTaskCreate+0x178>)
		uxCurrentNumberOfTasks++;
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002e04 <xTaskCreate+0x1a4>
 8002d14:	3201      	adds	r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002d18:	6835      	ldr	r5, [r6, #0]
 8002d1a:	2d00      	cmp	r5, #0
 8002d1c:	d14e      	bne.n	8002dbc <xTaskCreate+0x15c>
			pxCurrentTCB = pxNewTCB;
 8002d1e:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d11d      	bne.n	8002d62 <xTaskCreate+0x102>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d26:	eb08 0005 	add.w	r0, r8, r5
 8002d2a:	3514      	adds	r5, #20
 8002d2c:	f7ff fcac 	bl	8002688 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d30:	2d8c      	cmp	r5, #140	; 0x8c
 8002d32:	d1f8      	bne.n	8002d26 <xTaskCreate+0xc6>
	vListInitialise( &xDelayedTaskList1 );
 8002d34:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002e08 <xTaskCreate+0x1a8>
	vListInitialise( &xDelayedTaskList2 );
 8002d38:	4d28      	ldr	r5, [pc, #160]	; (8002ddc <xTaskCreate+0x17c>)
	vListInitialise( &xDelayedTaskList1 );
 8002d3a:	4648      	mov	r0, r9
 8002d3c:	f7ff fca4 	bl	8002688 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002d40:	4628      	mov	r0, r5
 8002d42:	f7ff fca1 	bl	8002688 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002d46:	4826      	ldr	r0, [pc, #152]	; (8002de0 <xTaskCreate+0x180>)
 8002d48:	f7ff fc9e 	bl	8002688 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002d4c:	4825      	ldr	r0, [pc, #148]	; (8002de4 <xTaskCreate+0x184>)
 8002d4e:	f7ff fc9b 	bl	8002688 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002d52:	4825      	ldr	r0, [pc, #148]	; (8002de8 <xTaskCreate+0x188>)
 8002d54:	f7ff fc98 	bl	8002688 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002d58:	4b24      	ldr	r3, [pc, #144]	; (8002dec <xTaskCreate+0x18c>)
 8002d5a:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d5e:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <xTaskCreate+0x190>)
 8002d60:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002d62:	4a24      	ldr	r2, [pc, #144]	; (8002df4 <xTaskCreate+0x194>)
		prvAddTaskToReadyList( pxNewTCB );
 8002d64:	4924      	ldr	r1, [pc, #144]	; (8002df8 <xTaskCreate+0x198>)
		uxTaskNumber++;
 8002d66:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002d68:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002d6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d70:	2501      	movs	r5, #1
 8002d72:	fa05 f302 	lsl.w	r3, r5, r2
 8002d76:	4303      	orrs	r3, r0
 8002d78:	2014      	movs	r0, #20
 8002d7a:	600b      	str	r3, [r1, #0]
 8002d7c:	fb00 8002 	mla	r0, r0, r2, r8
 8002d80:	4639      	mov	r1, r7
 8002d82:	f7ff fc8f 	bl	80026a4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002d86:	f7ff fd3f 	bl	8002808 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002d8a:	4b1c      	ldr	r3, [pc, #112]	; (8002dfc <xTaskCreate+0x19c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	b163      	cbz	r3, 8002daa <xTaskCreate+0x14a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d90:	6833      	ldr	r3, [r6, #0]
 8002d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d207      	bcs.n	8002daa <xTaskCreate+0x14a>
			taskYIELD_IF_USING_PREEMPTION();
 8002d9a:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <xTaskCreate+0x1a0>)
 8002d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	f3bf 8f6f 	isb	sy
	}
 8002daa:	4628      	mov	r0, r5
 8002dac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8002db0:	4638      	mov	r0, r7
 8002db2:	f7ff fec5 	bl	8002b40 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002db6:	f04f 35ff 	mov.w	r5, #4294967295
 8002dba:	e7f6      	b.n	8002daa <xTaskCreate+0x14a>
			if( xSchedulerRunning == pdFALSE )
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <xTaskCreate+0x19c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1ce      	bne.n	8002d62 <xTaskCreate+0x102>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002dc4:	6833      	ldr	r3, [r6, #0]
 8002dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002dca:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002dcc:	bf98      	it	ls
 8002dce:	6034      	strls	r4, [r6, #0]
 8002dd0:	e7c7      	b.n	8002d62 <xTaskCreate+0x102>
 8002dd2:	bf00      	nop
 8002dd4:	20003e9c 	.word	0x20003e9c
 8002dd8:	20003e04 	.word	0x20003e04
 8002ddc:	20003ec8 	.word	0x20003ec8
 8002de0:	20003ee8 	.word	0x20003ee8
 8002de4:	20003f14 	.word	0x20003f14
 8002de8:	20003f00 	.word	0x20003f00
 8002dec:	20003e08 	.word	0x20003e08
 8002df0:	20003e0c 	.word	0x20003e0c
 8002df4:	20003eac 	.word	0x20003eac
 8002df8:	20003eb0 	.word	0x20003eb0
 8002dfc:	20003efc 	.word	0x20003efc
 8002e00:	e000ed04 	.word	0xe000ed04
 8002e04:	20003e10 	.word	0x20003e10
 8002e08:	20003eb4 	.word	0x20003eb4

08002e0c <vTaskStartScheduler>:
{
 8002e0c:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8002e0e:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <vTaskStartScheduler+0x60>)
 8002e10:	9301      	str	r3, [sp, #4]
 8002e12:	2400      	movs	r4, #0
 8002e14:	9400      	str	r4, [sp, #0]
 8002e16:	4623      	mov	r3, r4
 8002e18:	2280      	movs	r2, #128	; 0x80
 8002e1a:	4915      	ldr	r1, [pc, #84]	; (8002e70 <vTaskStartScheduler+0x64>)
 8002e1c:	4815      	ldr	r0, [pc, #84]	; (8002e74 <vTaskStartScheduler+0x68>)
 8002e1e:	f7ff ff1f 	bl	8002c60 <xTaskCreate>
	if( xReturn == pdPASS )
 8002e22:	2801      	cmp	r0, #1
 8002e24:	d114      	bne.n	8002e50 <vTaskStartScheduler+0x44>
 8002e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2a:	f383 8811 	msr	BASEPRI, r3
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002e36:	4b10      	ldr	r3, [pc, #64]	; (8002e78 <vTaskStartScheduler+0x6c>)
 8002e38:	f04f 32ff 	mov.w	r2, #4294967295
 8002e3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <vTaskStartScheduler+0x70>)
 8002e40:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002e42:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <vTaskStartScheduler+0x74>)
 8002e44:	601c      	str	r4, [r3, #0]
}
 8002e46:	b002      	add	sp, #8
 8002e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8002e4c:	f7ff bd4c 	b.w	80028e8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e50:	3001      	adds	r0, #1
 8002e52:	d108      	bne.n	8002e66 <vTaskStartScheduler+0x5a>
 8002e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e58:	f383 8811 	msr	BASEPRI, r3
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	e7fe      	b.n	8002e64 <vTaskStartScheduler+0x58>
}
 8002e66:	b002      	add	sp, #8
 8002e68:	bd10      	pop	{r4, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20003edc 	.word	0x20003edc
 8002e70:	08003ad8 	.word	0x08003ad8
 8002e74:	080030f1 	.word	0x080030f1
 8002e78:	20003ee0 	.word	0x20003ee0
 8002e7c:	20003efc 	.word	0x20003efc
 8002e80:	20003f28 	.word	0x20003f28

08002e84 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002e84:	4a02      	ldr	r2, [pc, #8]	; (8002e90 <vTaskSuspendAll+0xc>)
 8002e86:	6813      	ldr	r3, [r2, #0]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20003ea8 	.word	0x20003ea8

08002e94 <xTaskIncrementTick>:
{
 8002e94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e98:	4b3c      	ldr	r3, [pc, #240]	; (8002f8c <xTaskIncrementTick+0xf8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d153      	bne.n	8002f48 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8002ea0:	4b3b      	ldr	r3, [pc, #236]	; (8002f90 <xTaskIncrementTick+0xfc>)
 8002ea2:	681c      	ldr	r4, [r3, #0]
 8002ea4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002ea6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8002ea8:	b9bc      	cbnz	r4, 8002eda <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002eaa:	4b3a      	ldr	r3, [pc, #232]	; (8002f94 <xTaskIncrementTick+0x100>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	b142      	cbz	r2, 8002ec4 <xTaskIncrementTick+0x30>
 8002eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	e7fe      	b.n	8002ec2 <xTaskIncrementTick+0x2e>
 8002ec4:	4a34      	ldr	r2, [pc, #208]	; (8002f98 <xTaskIncrementTick+0x104>)
 8002ec6:	6819      	ldr	r1, [r3, #0]
 8002ec8:	6810      	ldr	r0, [r2, #0]
 8002eca:	6018      	str	r0, [r3, #0]
 8002ecc:	6011      	str	r1, [r2, #0]
 8002ece:	4a33      	ldr	r2, [pc, #204]	; (8002f9c <xTaskIncrementTick+0x108>)
 8002ed0:	6813      	ldr	r3, [r2, #0]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	f7ff fe6b 	bl	8002bb0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002eda:	4d31      	ldr	r5, [pc, #196]	; (8002fa0 <xTaskIncrementTick+0x10c>)
 8002edc:	4f31      	ldr	r7, [pc, #196]	; (8002fa4 <xTaskIncrementTick+0x110>)
 8002ede:	682b      	ldr	r3, [r5, #0]
 8002ee0:	429c      	cmp	r4, r3
 8002ee2:	f04f 0b00 	mov.w	fp, #0
 8002ee6:	d33e      	bcc.n	8002f66 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ee8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002f94 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002eec:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002fb4 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ef0:	f8d8 2000 	ldr.w	r2, [r8]
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	bb72      	cbnz	r2, 8002f56 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8002efc:	602a      	str	r2, [r5, #0]
					break;
 8002efe:	e032      	b.n	8002f66 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f00:	f106 0a04 	add.w	sl, r6, #4
 8002f04:	4650      	mov	r0, sl
 8002f06:	f7ff fbf0 	bl	80026ea <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f0a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002f0c:	b119      	cbz	r1, 8002f16 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f0e:	f106 0018 	add.w	r0, r6, #24
 8002f12:	f7ff fbea 	bl	80026ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f16:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002f18:	f8d9 3000 	ldr.w	r3, [r9]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	fa02 f100 	lsl.w	r1, r2, r0
 8002f22:	4319      	orrs	r1, r3
 8002f24:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <xTaskIncrementTick+0x114>)
 8002f26:	f8c9 1000 	str.w	r1, [r9]
 8002f2a:	f04f 0e14 	mov.w	lr, #20
 8002f2e:	4651      	mov	r1, sl
 8002f30:	fb0e 3000 	mla	r0, lr, r0, r3
 8002f34:	f7ff fbb6 	bl	80026a4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f38:	6838      	ldr	r0, [r7, #0]
 8002f3a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002f3c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002f3e:	4291      	cmp	r1, r2
 8002f40:	bf28      	it	cs
 8002f42:	f04f 0b01 	movcs.w	fp, #1
 8002f46:	e7d3      	b.n	8002ef0 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002f48:	4a18      	ldr	r2, [pc, #96]	; (8002fac <xTaskIncrementTick+0x118>)
 8002f4a:	6813      	ldr	r3, [r2, #0]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002f50:	f04f 0b00 	mov.w	fp, #0
 8002f54:	e011      	b.n	8002f7a <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f56:	f8d8 2000 	ldr.w	r2, [r8]
 8002f5a:	68d2      	ldr	r2, [r2, #12]
 8002f5c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f5e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002f60:	428c      	cmp	r4, r1
 8002f62:	d2cd      	bcs.n	8002f00 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002f64:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <xTaskIncrementTick+0x114>)
 8002f6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f6c:	2214      	movs	r2, #20
 8002f6e:	434a      	muls	r2, r1
 8002f70:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002f72:	2a02      	cmp	r2, #2
 8002f74:	bf28      	it	cs
 8002f76:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002f7a:	4a0d      	ldr	r2, [pc, #52]	; (8002fb0 <xTaskIncrementTick+0x11c>)
 8002f7c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002f7e:	2a00      	cmp	r2, #0
 8002f80:	bf18      	it	ne
 8002f82:	f04f 0b01 	movne.w	fp, #1
}
 8002f86:	4658      	mov	r0, fp
 8002f88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f8c:	20003ea8 	.word	0x20003ea8
 8002f90:	20003f28 	.word	0x20003f28
 8002f94:	20003e08 	.word	0x20003e08
 8002f98:	20003e0c 	.word	0x20003e0c
 8002f9c:	20003ee4 	.word	0x20003ee4
 8002fa0:	20003ee0 	.word	0x20003ee0
 8002fa4:	20003e04 	.word	0x20003e04
 8002fa8:	20003e10 	.word	0x20003e10
 8002fac:	20003ea4 	.word	0x20003ea4
 8002fb0:	20003f2c 	.word	0x20003f2c
 8002fb4:	20003eb0 	.word	0x20003eb0

08002fb8 <xTaskResumeAll>:
{
 8002fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002fbc:	4c31      	ldr	r4, [pc, #196]	; (8003084 <xTaskResumeAll+0xcc>)
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	b943      	cbnz	r3, 8002fd4 <xTaskResumeAll+0x1c>
 8002fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc6:	f383 8811 	msr	BASEPRI, r3
 8002fca:	f3bf 8f6f 	isb	sy
 8002fce:	f3bf 8f4f 	dsb	sy
 8002fd2:	e7fe      	b.n	8002fd2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002fd4:	f7ff fbf6 	bl	80027c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002fd8:	6823      	ldr	r3, [r4, #0]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fde:	6824      	ldr	r4, [r4, #0]
 8002fe0:	b12c      	cbz	r4, 8002fee <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002fe2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002fe4:	f7ff fc10 	bl	8002808 <vPortExitCritical>
}
 8002fe8:	4620      	mov	r0, r4
 8002fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fee:	4b26      	ldr	r3, [pc, #152]	; (8003088 <xTaskResumeAll+0xd0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f5      	beq.n	8002fe2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ff6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80030a0 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8002ffa:	4f24      	ldr	r7, [pc, #144]	; (800308c <xTaskResumeAll+0xd4>)
 8002ffc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80030a4 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003000:	f8d9 3000 	ldr.w	r3, [r9]
 8003004:	b9e3      	cbnz	r3, 8003040 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8003006:	b10c      	cbz	r4, 800300c <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8003008:	f7ff fdd2 	bl	8002bb0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800300c:	4d20      	ldr	r5, [pc, #128]	; (8003090 <xTaskResumeAll+0xd8>)
 800300e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003010:	b144      	cbz	r4, 8003024 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8003012:	4e20      	ldr	r6, [pc, #128]	; (8003094 <xTaskResumeAll+0xdc>)
 8003014:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003016:	f7ff ff3d 	bl	8002e94 <xTaskIncrementTick>
 800301a:	b100      	cbz	r0, 800301e <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 800301c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800301e:	3c01      	subs	r4, #1
 8003020:	d1f9      	bne.n	8003016 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8003022:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003024:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <xTaskResumeAll+0xdc>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0da      	beq.n	8002fe2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800302c:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <xTaskResumeAll+0xe0>)
 800302e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800303c:	2401      	movs	r4, #1
 800303e:	e7d1      	b.n	8002fe4 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003040:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003044:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003046:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003048:	f104 0018 	add.w	r0, r4, #24
 800304c:	f7ff fb4d 	bl	80026ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003050:	4630      	mov	r0, r6
 8003052:	f7ff fb4a 	bl	80026ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003056:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003058:	6839      	ldr	r1, [r7, #0]
 800305a:	2501      	movs	r5, #1
 800305c:	fa05 f302 	lsl.w	r3, r5, r2
 8003060:	2014      	movs	r0, #20
 8003062:	430b      	orrs	r3, r1
 8003064:	fb00 8002 	mla	r0, r0, r2, r8
 8003068:	4631      	mov	r1, r6
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	f7ff fb1a 	bl	80026a4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003070:	4b0a      	ldr	r3, [pc, #40]	; (800309c <xTaskResumeAll+0xe4>)
 8003072:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800307a:	bf24      	itt	cs
 800307c:	4b05      	ldrcs	r3, [pc, #20]	; (8003094 <xTaskResumeAll+0xdc>)
 800307e:	601d      	strcs	r5, [r3, #0]
 8003080:	e7be      	b.n	8003000 <xTaskResumeAll+0x48>
 8003082:	bf00      	nop
 8003084:	20003ea8 	.word	0x20003ea8
 8003088:	20003e9c 	.word	0x20003e9c
 800308c:	20003eb0 	.word	0x20003eb0
 8003090:	20003ea4 	.word	0x20003ea4
 8003094:	20003f2c 	.word	0x20003f2c
 8003098:	e000ed04 	.word	0xe000ed04
 800309c:	20003e04 	.word	0x20003e04
 80030a0:	20003ee8 	.word	0x20003ee8
 80030a4:	20003e10 	.word	0x20003e10

080030a8 <vTaskDelay>:
	{
 80030a8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030aa:	b940      	cbnz	r0, 80030be <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80030ac:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <vTaskDelay+0x40>)
 80030ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80030be:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <vTaskDelay+0x44>)
 80030c0:	6819      	ldr	r1, [r3, #0]
 80030c2:	b141      	cbz	r1, 80030d6 <vTaskDelay+0x2e>
 80030c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	e7fe      	b.n	80030d4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80030d6:	f7ff fed5 	bl	8002e84 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030da:	f7ff fd7b 	bl	8002bd4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80030de:	f7ff ff6b 	bl	8002fb8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80030e2:	2800      	cmp	r0, #0
 80030e4:	d0e2      	beq.n	80030ac <vTaskDelay+0x4>
 80030e6:	bd08      	pop	{r3, pc}
 80030e8:	e000ed04 	.word	0xe000ed04
 80030ec:	20003ea8 	.word	0x20003ea8

080030f0 <prvIdleTask>:
{
 80030f0:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80030f2:	4e17      	ldr	r6, [pc, #92]	; (8003150 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030f4:	4c17      	ldr	r4, [pc, #92]	; (8003154 <prvIdleTask+0x64>)
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	b963      	cbnz	r3, 8003114 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030fa:	4b17      	ldr	r3, [pc, #92]	; (8003158 <prvIdleTask+0x68>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d9f8      	bls.n	80030f4 <prvIdleTask+0x4>
				taskYIELD();
 8003102:	4b16      	ldr	r3, [pc, #88]	; (800315c <prvIdleTask+0x6c>)
 8003104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	e7ef      	b.n	80030f4 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8003114:	f7ff feb6 	bl	8002e84 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003118:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 800311a:	f7ff ff4d 	bl	8002fb8 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800311e:	2d00      	cmp	r5, #0
 8003120:	d0e9      	beq.n	80030f6 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8003122:	f7ff fb4f 	bl	80027c4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003126:	68f3      	ldr	r3, [r6, #12]
 8003128:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800312a:	1d28      	adds	r0, r5, #4
 800312c:	f7ff fadd 	bl	80026ea <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003130:	4a0b      	ldr	r2, [pc, #44]	; (8003160 <prvIdleTask+0x70>)
 8003132:	6813      	ldr	r3, [r2, #0]
 8003134:	3b01      	subs	r3, #1
 8003136:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003138:	6823      	ldr	r3, [r4, #0]
 800313a:	3b01      	subs	r3, #1
 800313c:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 800313e:	f7ff fb63 	bl	8002808 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8003142:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003144:	f7ff fcfc 	bl	8002b40 <vPortFree>
			vPortFree( pxTCB );
 8003148:	4628      	mov	r0, r5
 800314a:	f7ff fcf9 	bl	8002b40 <vPortFree>
 800314e:	e7d2      	b.n	80030f6 <prvIdleTask+0x6>
 8003150:	20003f14 	.word	0x20003f14
 8003154:	20003ea0 	.word	0x20003ea0
 8003158:	20003e10 	.word	0x20003e10
 800315c:	e000ed04 	.word	0xe000ed04
 8003160:	20003e9c 	.word	0x20003e9c

08003164 <vTaskSwitchContext>:
{
 8003164:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003166:	4b23      	ldr	r3, [pc, #140]	; (80031f4 <vTaskSwitchContext+0x90>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4b23      	ldr	r3, [pc, #140]	; (80031f8 <vTaskSwitchContext+0x94>)
 800316c:	b112      	cbz	r2, 8003174 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800316e:	2201      	movs	r2, #1
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8003174:	4c21      	ldr	r4, [pc, #132]	; (80031fc <vTaskSwitchContext+0x98>)
		xYieldPending = pdFALSE;
 8003176:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8003178:	6823      	ldr	r3, [r4, #0]
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8003182:	d10b      	bne.n	800319c <vTaskSwitchContext+0x38>
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800318a:	d107      	bne.n	800319c <vTaskSwitchContext+0x38>
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8003192:	d103      	bne.n	800319c <vTaskSwitchContext+0x38>
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 800319a:	d004      	beq.n	80031a6 <vTaskSwitchContext+0x42>
 800319c:	6820      	ldr	r0, [r4, #0]
 800319e:	6821      	ldr	r1, [r4, #0]
 80031a0:	3134      	adds	r1, #52	; 0x34
 80031a2:	f000 f841 	bl	8003228 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80031a6:	4b16      	ldr	r3, [pc, #88]	; (8003200 <vTaskSwitchContext+0x9c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	f1c3 031f 	rsb	r3, r3, #31
 80031b4:	2214      	movs	r2, #20
 80031b6:	4913      	ldr	r1, [pc, #76]	; (8003204 <vTaskSwitchContext+0xa0>)
 80031b8:	435a      	muls	r2, r3
 80031ba:	1888      	adds	r0, r1, r2
 80031bc:	588d      	ldr	r5, [r1, r2]
 80031be:	b945      	cbnz	r5, 80031d2 <vTaskSwitchContext+0x6e>
	__asm volatile
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	e7fe      	b.n	80031d0 <vTaskSwitchContext+0x6c>
 80031d2:	6845      	ldr	r5, [r0, #4]
 80031d4:	3208      	adds	r2, #8
 80031d6:	686d      	ldr	r5, [r5, #4]
 80031d8:	6045      	str	r5, [r0, #4]
 80031da:	440a      	add	r2, r1
 80031dc:	4295      	cmp	r5, r2
 80031de:	bf04      	itt	eq
 80031e0:	686a      	ldreq	r2, [r5, #4]
 80031e2:	6042      	streq	r2, [r0, #4]
 80031e4:	2214      	movs	r2, #20
 80031e6:	fb02 1303 	mla	r3, r2, r3, r1
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	6023      	str	r3, [r4, #0]
 80031f0:	bd38      	pop	{r3, r4, r5, pc}
 80031f2:	bf00      	nop
 80031f4:	20003ea8 	.word	0x20003ea8
 80031f8:	20003f2c 	.word	0x20003f2c
 80031fc:	20003e04 	.word	0x20003e04
 8003200:	20003eb0 	.word	0x20003eb0
 8003204:	20003e10 	.word	0x20003e10

08003208 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <xTaskGetSchedulerState+0x18>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	b133      	cbz	r3, 800321c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800320e:	4b05      	ldr	r3, [pc, #20]	; (8003224 <xTaskGetSchedulerState+0x1c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8003214:	bf0c      	ite	eq
 8003216:	2002      	moveq	r0, #2
 8003218:	2000      	movne	r0, #0
 800321a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800321c:	2001      	movs	r0, #1
	}
 800321e:	4770      	bx	lr
 8003220:	20003efc 	.word	0x20003efc
 8003224:	20003ea8 	.word	0x20003ea8

08003228 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8003228:	4770      	bx	lr

0800322a <vApplicationMallocFailedHook>:
}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800322a:	4770      	bx	lr

0800322c <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 800322c:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800322e:	f000 f92d 	bl	800348c <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003232:	2001      	movs	r0, #1
 8003234:	f7ff fa16 	bl	8002664 <osDelay>
 8003238:	e7fb      	b.n	8003232 <StartDefaultTask+0x6>
	...

0800323c <SystemClock_Config>:
{
 800323c:	b570      	push	{r4, r5, r6, lr}
 800323e:	b094      	sub	sp, #80	; 0x50
  __HAL_RCC_PWR_CLK_ENABLE();
 8003240:	4b27      	ldr	r3, [pc, #156]	; (80032e0 <SystemClock_Config+0xa4>)
 8003242:	2100      	movs	r1, #0
 8003244:	9101      	str	r1, [sp, #4]
 8003246:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003248:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003254:	9301      	str	r3, [sp, #4]
 8003256:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003258:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <SystemClock_Config+0xa8>)
 800325a:	9102      	str	r1, [sp, #8]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800326a:	9302      	str	r3, [sp, #8]
 800326c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800326e:	2301      	movs	r3, #1
 8003270:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003276:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003278:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800327c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800327e:	2348      	movs	r3, #72	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003280:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003282:	2604      	movs	r6, #4
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003284:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003286:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003288:	2303      	movs	r3, #3
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800328a:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800328c:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800328e:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003290:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003292:	f7fd ff35 	bl	8001100 <HAL_RCC_OscConfig>
 8003296:	b100      	cbz	r0, 800329a <SystemClock_Config+0x5e>
 8003298:	e7fe      	b.n	8003298 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800329a:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800329c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032a0:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80032a2:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032a4:	250f      	movs	r5, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80032a6:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032a8:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032aa:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032ac:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80032ae:	f7fe f8d7 	bl	8001460 <HAL_RCC_ClockConfig>
 80032b2:	4604      	mov	r4, r0
 80032b4:	b100      	cbz	r0, 80032b8 <SystemClock_Config+0x7c>
 80032b6:	e7fe      	b.n	80032b6 <SystemClock_Config+0x7a>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80032b8:	f7fe f96c 	bl	8001594 <HAL_RCC_GetHCLKFreq>
 80032bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80032c4:	f7fd f9c2 	bl	800064c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80032c8:	4630      	mov	r0, r6
 80032ca:	f7fd f9d5 	bl	8000678 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80032ce:	4622      	mov	r2, r4
 80032d0:	4629      	mov	r1, r5
 80032d2:	f04f 30ff 	mov.w	r0, #4294967295
 80032d6:	f7fd f979 	bl	80005cc <HAL_NVIC_SetPriority>
}
 80032da:	b014      	add	sp, #80	; 0x50
 80032dc:	bd70      	pop	{r4, r5, r6, pc}
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40007000 	.word	0x40007000

080032e8 <main>:
{
 80032e8:	b500      	push	{lr}
 80032ea:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032ec:	2400      	movs	r4, #0
  HAL_Init();
 80032ee:	f7fd f91b 	bl	8000528 <HAL_Init>
  SystemClock_Config();
 80032f2:	f7ff ffa3 	bl	800323c <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032f6:	4b1f      	ldr	r3, [pc, #124]	; (8003374 <main+0x8c>)
 80032f8:	9400      	str	r4, [sp, #0]
 80032fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80032fc:	481e      	ldr	r0, [pc, #120]	; (8003378 <main+0x90>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80032fe:	4e1f      	ldr	r6, [pc, #124]	; (800337c <main+0x94>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003300:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003304:	631a      	str	r2, [r3, #48]	; 0x30
 8003306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003308:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800330c:	9200      	str	r2, [sp, #0]
 800330e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003310:	9401      	str	r4, [sp, #4]
 8003312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003314:	f042 0208 	orr.w	r2, r2, #8
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
 800331a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800331c:	f002 0208 	and.w	r2, r2, #8
 8003320:	9201      	str	r2, [sp, #4]
 8003322:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003324:	9402      	str	r4, [sp, #8]
 8003326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003328:	f042 0201 	orr.w	r2, r2, #1
 800332c:	631a      	str	r2, [r3, #48]	; 0x30
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003334:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003336:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003338:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800333c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800333e:	f7fd fa87 	bl	8000850 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003342:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003346:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003348:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800334a:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800334c:	480a      	ldr	r0, [pc, #40]	; (8003378 <main+0x90>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800334e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003352:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003354:	f7fd f99c 	bl	8000690 <HAL_GPIO_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003358:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800335a:	ad03      	add	r5, sp, #12
 800335c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800335e:	6833      	ldr	r3, [r6, #0]
 8003360:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003362:	4621      	mov	r1, r4
 8003364:	a803      	add	r0, sp, #12
 8003366:	f7ff f965 	bl	8002634 <osThreadCreate>
 800336a:	4b05      	ldr	r3, [pc, #20]	; (8003380 <main+0x98>)
 800336c:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800336e:	f7ff f95c 	bl	800262a <osKernelStart>
 8003372:	e7fe      	b.n	8003372 <main+0x8a>
 8003374:	40023800 	.word	0x40023800
 8003378:	40020c00 	.word	0x40020c00
 800337c:	08003ac4 	.word	0x08003ac4
 8003380:	20003f40 	.word	0x20003f40

08003384 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003384:	e7fe      	b.n	8003384 <_Error_Handler>
	...

08003388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003388:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800338a:	4b22      	ldr	r3, [pc, #136]	; (8003414 <HAL_MspInit+0x8c>)
 800338c:	2400      	movs	r4, #0
 800338e:	9400      	str	r4, [sp, #0]
 8003390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003392:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003396:	645a      	str	r2, [r3, #68]	; 0x44
 8003398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800339a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800339e:	9200      	str	r2, [sp, #0]
 80033a0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033a2:	9401      	str	r4, [sp, #4]
 80033a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033b4:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80033b6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033b8:	f7fd f8f6 	bl	80005a8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80033bc:	4622      	mov	r2, r4
 80033be:	4621      	mov	r1, r4
 80033c0:	f06f 000b 	mvn.w	r0, #11
 80033c4:	f7fd f902 	bl	80005cc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80033c8:	4622      	mov	r2, r4
 80033ca:	4621      	mov	r1, r4
 80033cc:	f06f 000a 	mvn.w	r0, #10
 80033d0:	f7fd f8fc 	bl	80005cc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80033d4:	4622      	mov	r2, r4
 80033d6:	4621      	mov	r1, r4
 80033d8:	f06f 0009 	mvn.w	r0, #9
 80033dc:	f7fd f8f6 	bl	80005cc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80033e0:	4622      	mov	r2, r4
 80033e2:	4621      	mov	r1, r4
 80033e4:	f06f 0004 	mvn.w	r0, #4
 80033e8:	f7fd f8f0 	bl	80005cc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80033ec:	4622      	mov	r2, r4
 80033ee:	4621      	mov	r1, r4
 80033f0:	f06f 0003 	mvn.w	r0, #3
 80033f4:	f7fd f8ea 	bl	80005cc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80033f8:	4622      	mov	r2, r4
 80033fa:	210f      	movs	r1, #15
 80033fc:	f06f 0001 	mvn.w	r0, #1
 8003400:	f7fd f8e4 	bl	80005cc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003404:	4622      	mov	r2, r4
 8003406:	210f      	movs	r1, #15
 8003408:	f04f 30ff 	mov.w	r0, #4294967295
 800340c:	f7fd f8de 	bl	80005cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003410:	b002      	add	sp, #8
 8003412:	bd10      	pop	{r4, pc}
 8003414:	40023800 	.word	0x40023800

08003418 <NMI_Handler>:
 8003418:	4770      	bx	lr

0800341a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800341a:	e7fe      	b.n	800341a <HardFault_Handler>

0800341c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800341c:	e7fe      	b.n	800341c <MemManage_Handler>

0800341e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800341e:	e7fe      	b.n	800341e <BusFault_Handler>

08003420 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003420:	e7fe      	b.n	8003420 <UsageFault_Handler>

08003422 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8003422:	4770      	bx	lr

08003424 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003424:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003426:	f7fd f899 	bl	800055c <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800342a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 800342e:	f7ff b921 	b.w	8002674 <osSystickHandler>
	...

08003434 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003434:	4801      	ldr	r0, [pc, #4]	; (800343c <OTG_FS_IRQHandler+0x8>)
 8003436:	f7fd ba91 	b.w	800095c <HAL_PCD_IRQHandler>
 800343a:	bf00      	nop
 800343c:	20005168 	.word	0x20005168

08003440 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003440:	490f      	ldr	r1, [pc, #60]	; (8003480 <SystemInit+0x40>)
 8003442:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003446:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800344e:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <SystemInit+0x44>)
 8003450:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003452:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003454:	f042 0201 	orr.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800345a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003462:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003466:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003468:	4a07      	ldr	r2, [pc, #28]	; (8003488 <SystemInit+0x48>)
 800346a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003472:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003474:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003476:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800347a:	608b      	str	r3, [r1, #8]
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	e000ed00 	.word	0xe000ed00
 8003484:	40023800 	.word	0x40023800
 8003488:	24003010 	.word	0x24003010

0800348c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800348c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800348e:	4c09      	ldr	r4, [pc, #36]	; (80034b4 <MX_USB_DEVICE_Init+0x28>)
 8003490:	4909      	ldr	r1, [pc, #36]	; (80034b8 <MX_USB_DEVICE_Init+0x2c>)
 8003492:	2200      	movs	r2, #0
 8003494:	4620      	mov	r0, r4
 8003496:	f7fe fda6 	bl	8001fe6 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 800349a:	4908      	ldr	r1, [pc, #32]	; (80034bc <MX_USB_DEVICE_Init+0x30>)
 800349c:	4620      	mov	r0, r4
 800349e:	f7fe fdb7 	bl	8002010 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80034a2:	4620      	mov	r0, r4
 80034a4:	4906      	ldr	r1, [pc, #24]	; (80034c0 <MX_USB_DEVICE_Init+0x34>)
 80034a6:	f7fe fd76 	bl	8001f96 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80034aa:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80034ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 80034b0:	f7fe bdb5 	b.w	800201e <USBD_Start>
 80034b4:	20003f44 	.word	0x20003f44
 80034b8:	20000130 	.word	0x20000130
 80034bc:	20000008 	.word	0x20000008
 80034c0:	20000120 	.word	0x20000120

080034c4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80034c4:	2000      	movs	r0, #0
 80034c6:	4770      	bx	lr

080034c8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80034c8:	2000      	movs	r0, #0
 80034ca:	4770      	bx	lr

080034cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80034cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80034ce:	4c05      	ldr	r4, [pc, #20]	; (80034e4 <CDC_Receive_FS+0x18>)
 80034d0:	4601      	mov	r1, r0
 80034d2:	4620      	mov	r0, r4
 80034d4:	f7fe fd6e 	bl	8001fb4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80034d8:	4620      	mov	r0, r4
 80034da:	f7fe fd71 	bl	8001fc0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80034de:	2000      	movs	r0, #0
 80034e0:	bd10      	pop	{r4, pc}
 80034e2:	bf00      	nop
 80034e4:	20003f44 	.word	0x20003f44

080034e8 <CDC_Init_FS>:
{
 80034e8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80034ea:	4c06      	ldr	r4, [pc, #24]	; (8003504 <CDC_Init_FS+0x1c>)
 80034ec:	4906      	ldr	r1, [pc, #24]	; (8003508 <CDC_Init_FS+0x20>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	4620      	mov	r0, r4
 80034f2:	f7fe fd57 	bl	8001fa4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80034f6:	4905      	ldr	r1, [pc, #20]	; (800350c <CDC_Init_FS+0x24>)
 80034f8:	4620      	mov	r0, r4
 80034fa:	f7fe fd5b 	bl	8001fb4 <USBD_CDC_SetRxBuffer>
}
 80034fe:	2000      	movs	r0, #0
 8003500:	bd10      	pop	{r4, pc}
 8003502:	bf00      	nop
 8003504:	20003f44 	.word	0x20003f44
 8003508:	20004968 	.word	0x20004968
 800350c:	20004168 	.word	0x20004168

08003510 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003510:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8003512:	6803      	ldr	r3, [r0, #0]
 8003514:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8003518:	b086      	sub	sp, #24
  if(pcdHandle->Instance==USB_OTG_FS)
 800351a:	d125      	bne.n	8003568 <HAL_PCD_MspInit+0x58>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800351c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003520:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003522:	2302      	movs	r3, #2
 8003524:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003526:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003528:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800352a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800352c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800352e:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003530:	480e      	ldr	r0, [pc, #56]	; (800356c <HAL_PCD_MspInit+0x5c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003532:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003536:	f7fd f8ab 	bl	8000690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800353a:	4b0d      	ldr	r3, [pc, #52]	; (8003570 <HAL_PCD_MspInit+0x60>)
 800353c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800353e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003542:	635a      	str	r2, [r3, #52]	; 0x34
 8003544:	9400      	str	r4, [sp, #0]
 8003546:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003548:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800354c:	645a      	str	r2, [r3, #68]	; 0x44
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003554:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8003556:	2043      	movs	r0, #67	; 0x43
 8003558:	4622      	mov	r2, r4
 800355a:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800355c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800355e:	f7fd f835 	bl	80005cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003562:	2043      	movs	r0, #67	; 0x43
 8003564:	f7fd f866 	bl	8000634 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003568:	b006      	add	sp, #24
 800356a:	bd10      	pop	{r4, pc}
 800356c:	40020000 	.word	0x40020000
 8003570:	40023800 	.word	0x40023800

08003574 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003574:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 8003578:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800357c:	f7fe bd66 	b.w	800204c <USBD_LL_SetupStage>

08003580 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003580:	231c      	movs	r3, #28
 8003582:	fb03 0301 	mla	r3, r3, r1, r0
 8003586:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800358a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800358e:	f7fe bd8a 	b.w	80020a6 <USBD_LL_DataOutStage>

08003592 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003592:	231c      	movs	r3, #28
 8003594:	fb03 0301 	mla	r3, r3, r1, r0
 8003598:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800359c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800359e:	f7fe bdb4 	b.w	800210a <USBD_LL_DataInStage>

080035a2 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80035a2:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80035a6:	f7fe be30 	b.w	800220a <USBD_LL_SOF>

080035aa <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80035aa:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 80035ac:	68c1      	ldr	r1, [r0, #12]
{ 
 80035ae:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80035b0:	3100      	adds	r1, #0
 80035b2:	bf18      	it	ne
 80035b4:	2101      	movne	r1, #1
 80035b6:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80035ba:	f7fe fe14 	bl	80021e6 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80035be:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	; 0x3ec
}
 80035c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80035c6:	f7fe bdef 	b.w	80021a8 <USBD_LL_Reset>
	...

080035cc <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80035cc:	b510      	push	{r4, lr}
 80035ce:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80035d0:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80035d4:	f7fe fe0a 	bl	80021ec <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80035d8:	6822      	ldr	r2, [r4, #0]
 80035da:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80035e6:	6a23      	ldr	r3, [r4, #32]
 80035e8:	b123      	cbz	r3, 80035f4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80035ea:	4a03      	ldr	r2, [pc, #12]	; (80035f8 <HAL_PCD_SuspendCallback+0x2c>)
 80035ec:	6913      	ldr	r3, [r2, #16]
 80035ee:	f043 0306 	orr.w	r3, r3, #6
 80035f2:	6113      	str	r3, [r2, #16]
 80035f4:	bd10      	pop	{r4, pc}
 80035f6:	bf00      	nop
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80035fc:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003600:	f7fe bdfd 	b.w	80021fe <USBD_LL_Resume>

08003604 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003604:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003608:	f7fe be0d 	b.w	8002226 <USBD_LL_IsoOUTIncomplete>

0800360c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800360c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003610:	f7fe be07 	b.w	8002222 <USBD_LL_IsoINIncomplete>

08003614 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8003614:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003618:	f7fe be07 	b.w	800222a <USBD_LL_DevConnected>

0800361c <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800361c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003620:	f7fe be05 	b.w	800222e <USBD_LL_DevDisconnected>

08003624 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8003624:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8003626:	7802      	ldrb	r2, [r0, #0]
 8003628:	bb52      	cbnz	r2, 8003680 <USBD_LL_Init+0x5c>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800362a:	4b16      	ldr	r3, [pc, #88]	; (8003684 <USBD_LL_Init+0x60>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800362c:	2104      	movs	r1, #4
  hpcd_USB_OTG_FS.pData = pdev;
 800362e:	f8c3 03ec 	str.w	r0, [r3, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS;
 8003632:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003636:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800363a:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800363e:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003640:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003642:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003644:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003646:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003648:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800364a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800364c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800364e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003650:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003654:	f7fd f901 	bl	800085a <HAL_PCD_Init>
 8003658:	b120      	cbz	r0, 8003664 <USBD_LL_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 800365a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800365e:	480a      	ldr	r0, [pc, #40]	; (8003688 <USBD_LL_Init+0x64>)
 8003660:	f7ff fe90 	bl	8003384 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8003664:	2180      	movs	r1, #128	; 0x80
 8003666:	4807      	ldr	r0, [pc, #28]	; (8003684 <USBD_LL_Init+0x60>)
 8003668:	f7fd fd45 	bl	80010f6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800366c:	2240      	movs	r2, #64	; 0x40
 800366e:	2100      	movs	r1, #0
 8003670:	4804      	ldr	r0, [pc, #16]	; (8003684 <USBD_LL_Init+0x60>)
 8003672:	f7fd fd1f 	bl	80010b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8003676:	2280      	movs	r2, #128	; 0x80
 8003678:	2101      	movs	r1, #1
 800367a:	4802      	ldr	r0, [pc, #8]	; (8003684 <USBD_LL_Init+0x60>)
 800367c:	f7fd fd1a 	bl	80010b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8003680:	2000      	movs	r0, #0
 8003682:	bd08      	pop	{r3, pc}
 8003684:	20005168 	.word	0x20005168
 8003688:	08003afd 	.word	0x08003afd

0800368c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800368c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800368e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003692:	f7fd f94e 	bl	8000932 <HAL_PCD_Start>
 8003696:	2803      	cmp	r0, #3
 8003698:	bf9a      	itte	ls
 800369a:	4b02      	ldrls	r3, [pc, #8]	; (80036a4 <USBD_LL_Start+0x18>)
 800369c:	5c18      	ldrbls	r0, [r3, r0]
 800369e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80036a0:	bd08      	pop	{r3, pc}
 80036a2:	bf00      	nop
 80036a4:	08003af9 	.word	0x08003af9

080036a8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80036a8:	b510      	push	{r4, lr}
 80036aa:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80036ac:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80036b0:	4613      	mov	r3, r2
 80036b2:	4622      	mov	r2, r4
 80036b4:	f7fd fc10 	bl	8000ed8 <HAL_PCD_EP_Open>
 80036b8:	2803      	cmp	r0, #3
 80036ba:	bf9a      	itte	ls
 80036bc:	4b01      	ldrls	r3, [pc, #4]	; (80036c4 <USBD_LL_OpenEP+0x1c>)
 80036be:	5c18      	ldrbls	r0, [r3, r0]
 80036c0:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80036c2:	bd10      	pop	{r4, pc}
 80036c4:	08003af9 	.word	0x08003af9

080036c8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80036c8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80036ca:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80036ce:	f7fd fc31 	bl	8000f34 <HAL_PCD_EP_Close>
 80036d2:	2803      	cmp	r0, #3
 80036d4:	bf9a      	itte	ls
 80036d6:	4b02      	ldrls	r3, [pc, #8]	; (80036e0 <USBD_LL_CloseEP+0x18>)
 80036d8:	5c18      	ldrbls	r0, [r3, r0]
 80036da:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80036dc:	bd08      	pop	{r3, pc}
 80036de:	bf00      	nop
 80036e0:	08003af9 	.word	0x08003af9

080036e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80036e4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80036e6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80036ea:	f7fd fc92 	bl	8001012 <HAL_PCD_EP_SetStall>
 80036ee:	2803      	cmp	r0, #3
 80036f0:	bf9a      	itte	ls
 80036f2:	4b02      	ldrls	r3, [pc, #8]	; (80036fc <USBD_LL_StallEP+0x18>)
 80036f4:	5c18      	ldrbls	r0, [r3, r0]
 80036f6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80036f8:	bd08      	pop	{r3, pc}
 80036fa:	bf00      	nop
 80036fc:	08003af9 	.word	0x08003af9

08003700 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003700:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003702:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003706:	f7fd fcb0 	bl	800106a <HAL_PCD_EP_ClrStall>
 800370a:	2803      	cmp	r0, #3
 800370c:	bf9a      	itte	ls
 800370e:	4b02      	ldrls	r3, [pc, #8]	; (8003718 <USBD_LL_ClearStallEP+0x18>)
 8003710:	5c18      	ldrbls	r0, [r3, r0]
 8003712:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003714:	bd08      	pop	{r3, pc}
 8003716:	bf00      	nop
 8003718:	08003af9 	.word	0x08003af9

0800371c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 800371c:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003720:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8003724:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003728:	bf1b      	ittet	ne
 800372a:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800372e:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003732:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003736:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800373a:	bf08      	it	eq
 800373c:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 8003740:	4770      	bx	lr
	...

08003744 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8003744:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003746:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800374a:	f7fd fbb3 	bl	8000eb4 <HAL_PCD_SetAddress>
 800374e:	2803      	cmp	r0, #3
 8003750:	bf9a      	itte	ls
 8003752:	4b02      	ldrls	r3, [pc, #8]	; (800375c <USBD_LL_SetUSBAddress+0x18>)
 8003754:	5c18      	ldrbls	r0, [r3, r0]
 8003756:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003758:	bd08      	pop	{r3, pc}
 800375a:	bf00      	nop
 800375c:	08003af9 	.word	0x08003af9

08003760 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003760:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003762:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003766:	f7fd fc34 	bl	8000fd2 <HAL_PCD_EP_Transmit>
 800376a:	2803      	cmp	r0, #3
 800376c:	bf9a      	itte	ls
 800376e:	4b02      	ldrls	r3, [pc, #8]	; (8003778 <USBD_LL_Transmit+0x18>)
 8003770:	5c18      	ldrbls	r0, [r3, r0]
 8003772:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8003774:	bd08      	pop	{r3, pc}
 8003776:	bf00      	nop
 8003778:	08003af9 	.word	0x08003af9

0800377c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800377c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800377e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003782:	f7fd fbfa 	bl	8000f7a <HAL_PCD_EP_Receive>
 8003786:	2803      	cmp	r0, #3
 8003788:	bf9a      	itte	ls
 800378a:	4b02      	ldrls	r3, [pc, #8]	; (8003794 <USBD_LL_PrepareReceive+0x18>)
 800378c:	5c18      	ldrbls	r0, [r3, r0]
 800378e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003790:	bd08      	pop	{r3, pc}
 8003792:	bf00      	nop
 8003794:	08003af9 	.word	0x08003af9

08003798 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003798:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800379a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800379e:	f7fd fc10 	bl	8000fc2 <HAL_PCD_EP_GetRxCount>
}
 80037a2:	bd08      	pop	{r3, pc}

080037a4 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 80037a4:	2312      	movs	r3, #18
 80037a6:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80037a8:	4800      	ldr	r0, [pc, #0]	; (80037ac <USBD_FS_DeviceDescriptor+0x8>)
 80037aa:	4770      	bx	lr
 80037ac:	2000014c 	.word	0x2000014c

080037b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 80037b0:	2304      	movs	r3, #4
 80037b2:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80037b4:	4800      	ldr	r0, [pc, #0]	; (80037b8 <USBD_FS_LangIDStrDescriptor+0x8>)
 80037b6:	4770      	bx	lr
 80037b8:	20000160 	.word	0x20000160

080037bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80037bc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80037be:	4c04      	ldr	r4, [pc, #16]	; (80037d0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80037c0:	4804      	ldr	r0, [pc, #16]	; (80037d4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80037c2:	460a      	mov	r2, r1
 80037c4:	4621      	mov	r1, r4
 80037c6:	f7fe fed2 	bl	800256e <USBD_GetString>
  return USBD_StrDesc;
}
 80037ca:	4620      	mov	r0, r4
 80037cc:	bd10      	pop	{r4, pc}
 80037ce:	bf00      	nop
 80037d0:	20005558 	.word	0x20005558
 80037d4:	08003b29 	.word	0x08003b29

080037d8 <USBD_FS_ProductStrDescriptor>:
{
 80037d8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80037da:	4c04      	ldr	r4, [pc, #16]	; (80037ec <USBD_FS_ProductStrDescriptor+0x14>)
 80037dc:	4804      	ldr	r0, [pc, #16]	; (80037f0 <USBD_FS_ProductStrDescriptor+0x18>)
 80037de:	460a      	mov	r2, r1
 80037e0:	4621      	mov	r1, r4
 80037e2:	f7fe fec4 	bl	800256e <USBD_GetString>
}
 80037e6:	4620      	mov	r0, r4
 80037e8:	bd10      	pop	{r4, pc}
 80037ea:	bf00      	nop
 80037ec:	20005558 	.word	0x20005558
 80037f0:	08003b3c 	.word	0x08003b3c

080037f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80037f4:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80037f6:	4c04      	ldr	r4, [pc, #16]	; (8003808 <USBD_FS_SerialStrDescriptor+0x14>)
 80037f8:	4804      	ldr	r0, [pc, #16]	; (800380c <USBD_FS_SerialStrDescriptor+0x18>)
 80037fa:	460a      	mov	r2, r1
 80037fc:	4621      	mov	r1, r4
 80037fe:	f7fe feb6 	bl	800256e <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003802:	4620      	mov	r0, r4
 8003804:	bd10      	pop	{r4, pc}
 8003806:	bf00      	nop
 8003808:	20005558 	.word	0x20005558
 800380c:	08003b52 	.word	0x08003b52

08003810 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003810:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003812:	4c04      	ldr	r4, [pc, #16]	; (8003824 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003814:	4804      	ldr	r0, [pc, #16]	; (8003828 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003816:	460a      	mov	r2, r1
 8003818:	4621      	mov	r1, r4
 800381a:	f7fe fea8 	bl	800256e <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800381e:	4620      	mov	r0, r4
 8003820:	bd10      	pop	{r4, pc}
 8003822:	bf00      	nop
 8003824:	20005558 	.word	0x20005558
 8003828:	08003b10 	.word	0x08003b10

0800382c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800382c:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800382e:	4c04      	ldr	r4, [pc, #16]	; (8003840 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003830:	4804      	ldr	r0, [pc, #16]	; (8003844 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003832:	460a      	mov	r2, r1
 8003834:	4621      	mov	r1, r4
 8003836:	f7fe fe9a 	bl	800256e <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800383a:	4620      	mov	r0, r4
 800383c:	bd10      	pop	{r4, pc}
 800383e:	bf00      	nop
 8003840:	20005558 	.word	0x20005558
 8003844:	08003b1b 	.word	0x08003b1b

08003848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003880 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800384c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800384e:	e003      	b.n	8003858 <LoopCopyDataInit>

08003850 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003850:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003852:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003854:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003856:	3104      	adds	r1, #4

08003858 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003858:	480b      	ldr	r0, [pc, #44]	; (8003888 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800385a:	4b0c      	ldr	r3, [pc, #48]	; (800388c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800385c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800385e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003860:	d3f6      	bcc.n	8003850 <CopyDataInit>
  ldr  r2, =_sbss
 8003862:	4a0b      	ldr	r2, [pc, #44]	; (8003890 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003864:	e002      	b.n	800386c <LoopFillZerobss>

08003866 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003866:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003868:	f842 3b04 	str.w	r3, [r2], #4

0800386c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800386c:	4b09      	ldr	r3, [pc, #36]	; (8003894 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800386e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003870:	d3f9      	bcc.n	8003866 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003872:	f7ff fde5 	bl	8003440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003876:	f000 f811 	bl	800389c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800387a:	f7ff fd35 	bl	80032e8 <main>
  bx  lr    
 800387e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003880:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003884:	08003b70 	.word	0x08003b70
  ldr  r0, =_sdata
 8003888:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800388c:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 8003890:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 8003894:	2000575c 	.word	0x2000575c

08003898 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003898:	e7fe      	b.n	8003898 <ADC_IRQHandler>
	...

0800389c <__libc_init_array>:
 800389c:	b570      	push	{r4, r5, r6, lr}
 800389e:	4e0d      	ldr	r6, [pc, #52]	; (80038d4 <__libc_init_array+0x38>)
 80038a0:	4c0d      	ldr	r4, [pc, #52]	; (80038d8 <__libc_init_array+0x3c>)
 80038a2:	1ba4      	subs	r4, r4, r6
 80038a4:	10a4      	asrs	r4, r4, #2
 80038a6:	2500      	movs	r5, #0
 80038a8:	42a5      	cmp	r5, r4
 80038aa:	d109      	bne.n	80038c0 <__libc_init_array+0x24>
 80038ac:	4e0b      	ldr	r6, [pc, #44]	; (80038dc <__libc_init_array+0x40>)
 80038ae:	4c0c      	ldr	r4, [pc, #48]	; (80038e0 <__libc_init_array+0x44>)
 80038b0:	f000 f8fc 	bl	8003aac <_init>
 80038b4:	1ba4      	subs	r4, r4, r6
 80038b6:	10a4      	asrs	r4, r4, #2
 80038b8:	2500      	movs	r5, #0
 80038ba:	42a5      	cmp	r5, r4
 80038bc:	d105      	bne.n	80038ca <__libc_init_array+0x2e>
 80038be:	bd70      	pop	{r4, r5, r6, pc}
 80038c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038c4:	4798      	blx	r3
 80038c6:	3501      	adds	r5, #1
 80038c8:	e7ee      	b.n	80038a8 <__libc_init_array+0xc>
 80038ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038ce:	4798      	blx	r3
 80038d0:	3501      	adds	r5, #1
 80038d2:	e7f2      	b.n	80038ba <__libc_init_array+0x1e>
 80038d4:	08003b68 	.word	0x08003b68
 80038d8:	08003b68 	.word	0x08003b68
 80038dc:	08003b68 	.word	0x08003b68
 80038e0:	08003b6c 	.word	0x08003b6c

080038e4 <malloc>:
 80038e4:	4b02      	ldr	r3, [pc, #8]	; (80038f0 <malloc+0xc>)
 80038e6:	4601      	mov	r1, r0
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	f000 b861 	b.w	80039b0 <_malloc_r>
 80038ee:	bf00      	nop
 80038f0:	20000164 	.word	0x20000164

080038f4 <free>:
 80038f4:	4b02      	ldr	r3, [pc, #8]	; (8003900 <free+0xc>)
 80038f6:	4601      	mov	r1, r0
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	f000 b80b 	b.w	8003914 <_free_r>
 80038fe:	bf00      	nop
 8003900:	20000164 	.word	0x20000164

08003904 <memset>:
 8003904:	4402      	add	r2, r0
 8003906:	4603      	mov	r3, r0
 8003908:	4293      	cmp	r3, r2
 800390a:	d100      	bne.n	800390e <memset+0xa>
 800390c:	4770      	bx	lr
 800390e:	f803 1b01 	strb.w	r1, [r3], #1
 8003912:	e7f9      	b.n	8003908 <memset+0x4>

08003914 <_free_r>:
 8003914:	b538      	push	{r3, r4, r5, lr}
 8003916:	4605      	mov	r5, r0
 8003918:	2900      	cmp	r1, #0
 800391a:	d045      	beq.n	80039a8 <_free_r+0x94>
 800391c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003920:	1f0c      	subs	r4, r1, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	bfb8      	it	lt
 8003926:	18e4      	addlt	r4, r4, r3
 8003928:	f000 f8b0 	bl	8003a8c <__malloc_lock>
 800392c:	4a1f      	ldr	r2, [pc, #124]	; (80039ac <_free_r+0x98>)
 800392e:	6813      	ldr	r3, [r2, #0]
 8003930:	4610      	mov	r0, r2
 8003932:	b933      	cbnz	r3, 8003942 <_free_r+0x2e>
 8003934:	6063      	str	r3, [r4, #4]
 8003936:	6014      	str	r4, [r2, #0]
 8003938:	4628      	mov	r0, r5
 800393a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800393e:	f000 b8a6 	b.w	8003a8e <__malloc_unlock>
 8003942:	42a3      	cmp	r3, r4
 8003944:	d90c      	bls.n	8003960 <_free_r+0x4c>
 8003946:	6821      	ldr	r1, [r4, #0]
 8003948:	1862      	adds	r2, r4, r1
 800394a:	4293      	cmp	r3, r2
 800394c:	bf04      	itt	eq
 800394e:	681a      	ldreq	r2, [r3, #0]
 8003950:	685b      	ldreq	r3, [r3, #4]
 8003952:	6063      	str	r3, [r4, #4]
 8003954:	bf04      	itt	eq
 8003956:	1852      	addeq	r2, r2, r1
 8003958:	6022      	streq	r2, [r4, #0]
 800395a:	6004      	str	r4, [r0, #0]
 800395c:	e7ec      	b.n	8003938 <_free_r+0x24>
 800395e:	4613      	mov	r3, r2
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	b10a      	cbz	r2, 8003968 <_free_r+0x54>
 8003964:	42a2      	cmp	r2, r4
 8003966:	d9fa      	bls.n	800395e <_free_r+0x4a>
 8003968:	6819      	ldr	r1, [r3, #0]
 800396a:	1858      	adds	r0, r3, r1
 800396c:	42a0      	cmp	r0, r4
 800396e:	d10b      	bne.n	8003988 <_free_r+0x74>
 8003970:	6820      	ldr	r0, [r4, #0]
 8003972:	4401      	add	r1, r0
 8003974:	1858      	adds	r0, r3, r1
 8003976:	4282      	cmp	r2, r0
 8003978:	6019      	str	r1, [r3, #0]
 800397a:	d1dd      	bne.n	8003938 <_free_r+0x24>
 800397c:	6810      	ldr	r0, [r2, #0]
 800397e:	6852      	ldr	r2, [r2, #4]
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	4401      	add	r1, r0
 8003984:	6019      	str	r1, [r3, #0]
 8003986:	e7d7      	b.n	8003938 <_free_r+0x24>
 8003988:	d902      	bls.n	8003990 <_free_r+0x7c>
 800398a:	230c      	movs	r3, #12
 800398c:	602b      	str	r3, [r5, #0]
 800398e:	e7d3      	b.n	8003938 <_free_r+0x24>
 8003990:	6820      	ldr	r0, [r4, #0]
 8003992:	1821      	adds	r1, r4, r0
 8003994:	428a      	cmp	r2, r1
 8003996:	bf04      	itt	eq
 8003998:	6811      	ldreq	r1, [r2, #0]
 800399a:	6852      	ldreq	r2, [r2, #4]
 800399c:	6062      	str	r2, [r4, #4]
 800399e:	bf04      	itt	eq
 80039a0:	1809      	addeq	r1, r1, r0
 80039a2:	6021      	streq	r1, [r4, #0]
 80039a4:	605c      	str	r4, [r3, #4]
 80039a6:	e7c7      	b.n	8003938 <_free_r+0x24>
 80039a8:	bd38      	pop	{r3, r4, r5, pc}
 80039aa:	bf00      	nop
 80039ac:	20003f30 	.word	0x20003f30

080039b0 <_malloc_r>:
 80039b0:	b570      	push	{r4, r5, r6, lr}
 80039b2:	1ccd      	adds	r5, r1, #3
 80039b4:	f025 0503 	bic.w	r5, r5, #3
 80039b8:	3508      	adds	r5, #8
 80039ba:	2d0c      	cmp	r5, #12
 80039bc:	bf38      	it	cc
 80039be:	250c      	movcc	r5, #12
 80039c0:	2d00      	cmp	r5, #0
 80039c2:	4606      	mov	r6, r0
 80039c4:	db01      	blt.n	80039ca <_malloc_r+0x1a>
 80039c6:	42a9      	cmp	r1, r5
 80039c8:	d903      	bls.n	80039d2 <_malloc_r+0x22>
 80039ca:	230c      	movs	r3, #12
 80039cc:	6033      	str	r3, [r6, #0]
 80039ce:	2000      	movs	r0, #0
 80039d0:	bd70      	pop	{r4, r5, r6, pc}
 80039d2:	f000 f85b 	bl	8003a8c <__malloc_lock>
 80039d6:	4a23      	ldr	r2, [pc, #140]	; (8003a64 <_malloc_r+0xb4>)
 80039d8:	6814      	ldr	r4, [r2, #0]
 80039da:	4621      	mov	r1, r4
 80039dc:	b991      	cbnz	r1, 8003a04 <_malloc_r+0x54>
 80039de:	4c22      	ldr	r4, [pc, #136]	; (8003a68 <_malloc_r+0xb8>)
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	b91b      	cbnz	r3, 80039ec <_malloc_r+0x3c>
 80039e4:	4630      	mov	r0, r6
 80039e6:	f000 f841 	bl	8003a6c <_sbrk_r>
 80039ea:	6020      	str	r0, [r4, #0]
 80039ec:	4629      	mov	r1, r5
 80039ee:	4630      	mov	r0, r6
 80039f0:	f000 f83c 	bl	8003a6c <_sbrk_r>
 80039f4:	1c43      	adds	r3, r0, #1
 80039f6:	d126      	bne.n	8003a46 <_malloc_r+0x96>
 80039f8:	230c      	movs	r3, #12
 80039fa:	6033      	str	r3, [r6, #0]
 80039fc:	4630      	mov	r0, r6
 80039fe:	f000 f846 	bl	8003a8e <__malloc_unlock>
 8003a02:	e7e4      	b.n	80039ce <_malloc_r+0x1e>
 8003a04:	680b      	ldr	r3, [r1, #0]
 8003a06:	1b5b      	subs	r3, r3, r5
 8003a08:	d41a      	bmi.n	8003a40 <_malloc_r+0x90>
 8003a0a:	2b0b      	cmp	r3, #11
 8003a0c:	d90f      	bls.n	8003a2e <_malloc_r+0x7e>
 8003a0e:	600b      	str	r3, [r1, #0]
 8003a10:	50cd      	str	r5, [r1, r3]
 8003a12:	18cc      	adds	r4, r1, r3
 8003a14:	4630      	mov	r0, r6
 8003a16:	f000 f83a 	bl	8003a8e <__malloc_unlock>
 8003a1a:	f104 000b 	add.w	r0, r4, #11
 8003a1e:	1d23      	adds	r3, r4, #4
 8003a20:	f020 0007 	bic.w	r0, r0, #7
 8003a24:	1ac3      	subs	r3, r0, r3
 8003a26:	d01b      	beq.n	8003a60 <_malloc_r+0xb0>
 8003a28:	425a      	negs	r2, r3
 8003a2a:	50e2      	str	r2, [r4, r3]
 8003a2c:	bd70      	pop	{r4, r5, r6, pc}
 8003a2e:	428c      	cmp	r4, r1
 8003a30:	bf0d      	iteet	eq
 8003a32:	6863      	ldreq	r3, [r4, #4]
 8003a34:	684b      	ldrne	r3, [r1, #4]
 8003a36:	6063      	strne	r3, [r4, #4]
 8003a38:	6013      	streq	r3, [r2, #0]
 8003a3a:	bf18      	it	ne
 8003a3c:	460c      	movne	r4, r1
 8003a3e:	e7e9      	b.n	8003a14 <_malloc_r+0x64>
 8003a40:	460c      	mov	r4, r1
 8003a42:	6849      	ldr	r1, [r1, #4]
 8003a44:	e7ca      	b.n	80039dc <_malloc_r+0x2c>
 8003a46:	1cc4      	adds	r4, r0, #3
 8003a48:	f024 0403 	bic.w	r4, r4, #3
 8003a4c:	42a0      	cmp	r0, r4
 8003a4e:	d005      	beq.n	8003a5c <_malloc_r+0xac>
 8003a50:	1a21      	subs	r1, r4, r0
 8003a52:	4630      	mov	r0, r6
 8003a54:	f000 f80a 	bl	8003a6c <_sbrk_r>
 8003a58:	3001      	adds	r0, #1
 8003a5a:	d0cd      	beq.n	80039f8 <_malloc_r+0x48>
 8003a5c:	6025      	str	r5, [r4, #0]
 8003a5e:	e7d9      	b.n	8003a14 <_malloc_r+0x64>
 8003a60:	bd70      	pop	{r4, r5, r6, pc}
 8003a62:	bf00      	nop
 8003a64:	20003f30 	.word	0x20003f30
 8003a68:	20003f34 	.word	0x20003f34

08003a6c <_sbrk_r>:
 8003a6c:	b538      	push	{r3, r4, r5, lr}
 8003a6e:	4c06      	ldr	r4, [pc, #24]	; (8003a88 <_sbrk_r+0x1c>)
 8003a70:	2300      	movs	r3, #0
 8003a72:	4605      	mov	r5, r0
 8003a74:	4608      	mov	r0, r1
 8003a76:	6023      	str	r3, [r4, #0]
 8003a78:	f000 f80a 	bl	8003a90 <_sbrk>
 8003a7c:	1c43      	adds	r3, r0, #1
 8003a7e:	d102      	bne.n	8003a86 <_sbrk_r+0x1a>
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	b103      	cbz	r3, 8003a86 <_sbrk_r+0x1a>
 8003a84:	602b      	str	r3, [r5, #0]
 8003a86:	bd38      	pop	{r3, r4, r5, pc}
 8003a88:	20005758 	.word	0x20005758

08003a8c <__malloc_lock>:
 8003a8c:	4770      	bx	lr

08003a8e <__malloc_unlock>:
 8003a8e:	4770      	bx	lr

08003a90 <_sbrk>:
 8003a90:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <_sbrk+0x14>)
 8003a92:	6819      	ldr	r1, [r3, #0]
 8003a94:	4602      	mov	r2, r0
 8003a96:	b909      	cbnz	r1, 8003a9c <_sbrk+0xc>
 8003a98:	4903      	ldr	r1, [pc, #12]	; (8003aa8 <_sbrk+0x18>)
 8003a9a:	6019      	str	r1, [r3, #0]
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	4402      	add	r2, r0
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	4770      	bx	lr
 8003aa4:	20003f38 	.word	0x20003f38
 8003aa8:	2000575c 	.word	0x2000575c

08003aac <_init>:
 8003aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aae:	bf00      	nop
 8003ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ab2:	bc08      	pop	{r3}
 8003ab4:	469e      	mov	lr, r3
 8003ab6:	4770      	bx	lr

08003ab8 <_fini>:
 8003ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aba:	bf00      	nop
 8003abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003abe:	bc08      	pop	{r3}
 8003ac0:	469e      	mov	lr, r3
 8003ac2:	4770      	bx	lr
